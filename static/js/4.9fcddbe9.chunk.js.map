{"version":3,"sources":["models/shipBuilds/shipSpecialty.ts","models/shipBuilds/index.ts","models/shipBuilds/shipSize.ts","functions/shipBuilds/getShipInfo.ts","functions/shipBuilds/processJSONBuild.ts","components/shipBuilds/query/queryStyles.ts","components/shipBuilds/query/querySpecialities.tsx","assets/shipBuilds/Engineer_icon.svg","components/shipBuilds/engToggleGroup.tsx","components/shipBuilds/builds/buildAddText.tsx","components/shipBuilds/shipAutocomplete.tsx","hooks/shipBuilds/useShipMap.ts","components/shipBuilds/builds/buildCheckBox.tsx","hooks/shipBuilds/useShipBuildMutations.ts","hooks/shipBuilds/useShipBuilds.ts","hooks/useURLQuery.ts","components/shipBuilds/builds/buildAdd.tsx","components/shipBuilds/builds/tagGroup.tsx","components/shipBuilds/builds/engIcons.tsx","components/shipBuilds/builds/buildDetailFull.tsx","components/shipBuilds/builds/buildDetailMobile.tsx","components/shipBuilds/builds/buildCard.tsx","components/shipBuilds/builds/buildDetailBuilds.tsx","components/shipBuilds/builds/buildDetail.tsx","hooks/shipBuilds/useShipBuildInfo.ts","components/shipBuilds/builds/buildList.tsx","functions/shipBuilds/filterShipBuilds.ts","components/shipBuilds/query/queryShip.tsx","components/shipBuilds/query/queryEngineering.tsx","components/shipBuilds/query/queryOther.tsx","components/shipBuilds/query/queryButtons.tsx","components/shipBuilds/query/query.tsx","components/shipBuilds/queryandBuildList.tsx","routes/shipBuilds.routes.tsx"],"names":["ShipSpecialty","ShipSize","getShipInfofromID","shipID","shipMap","find","x","shipId","checkEngineering","hardpoints","internals","core","engineering","weaponEng","filter","hp","blueprint","internalEng","i","ppEng","powerPlant","thrustEng","thrusters","fsdEng","frameShiftDrive","lifeEng","lifeSupport","pdEng","powerDistributor","sensorEng","sensors","length","checkPowerplay","powerplay","powerplayInternals","group","toLowerCase","startsWith","forEach","powerplayHardpoint","name","checkGuardian","guardian","ppName","pdName","guardianHardPoints","guardianInternals","useQueryStyles","makeStyles","theme","root","display","rowGap","width","gridTemplateAreas","textAlign","breakpoints","up","gridTemplateRows","columnGap","bottomButtons","gridArea","margin","querySection","minWidth","border","padding","borderRadius","querySectionheader","marginTop","shipQueries","flexDirection","shipTypeQuery","flex","shipSizeQuery","engineeringQuery","queryExplanationText","color","querySpecialtyButtons","gridTemplate","queryOtherButtons","justifyContent","flexWrap","queryOtherButtonGrids","height","QueryOtherBeginnerButtons","borderWidth","borderStyle","borderColor","palette","secondary","main","QuerySpecialization","props","selectedSpecialties","setSpecialties","classes","className","Typography","getSpecialties","map","special","ToggleButton","value","selected","includes","onChange","newSpecials","v","handleSpecialties","specialties","speciality","useStyles","engButton","EngToggleGroup","engLevel","handleEngLevelChange","ToggleButtonGroup","exclusive","Tooltip","title","arrow","src","engineerIcon","alt","BuildAddText","id","label","isMultiline","disabled","TextField","variant","multiline","rowsMax","findShipName","ships","ShipAutocomplete","shipType","handleShipChange","Ships","Autocomplete","options","sortItems","autoHighlight","getOptionLabel","option","renderOption","renderInput","params","inputProps","autocomplete","BuildCheckBox","checked","FormControlLabel","control","Checkbox","AddBuildMutation","ReplaceBuildMutation","UpdateBuildMutation","useShipBuildMutations","addBuild","useAddBuild","replaceBuild","useReplaceBuild","updateVariants","useUpdateVariantBuilds","updateRelated","useUpdateRelatedBuilds","useMutation","addBuildMutation","build","a","variables","addedBuild","updateBuildMutation","relatedBuilds","_id","input","related","updatedBuild","variantBuilds","variants","replaceBuildMutation","buildID","AllShipBuildsv2s","useShipBuilds","addRelated","useAddRelatedBuild","addVariant","useAddVariantBuild","useAllShipBuilds","shipBuilds","loading","useQuery","data","error","Error","message","shipBuildsv2s","currentID","buildtoInsert","currentBuild","tempBuild","console","log","insertOneShipBuildsv2","newRelated","parentID","parentBuild","isVariant","useUrlQuery","URLSearchParams","useLocation","search","center","BuildAdd","enqueueSnackbar","useSnackbar","useState","jsonBuild","setJsonBuild","DEFAULTBUILD","buildInfo","setBuildInfo","urlQuery","useEffect","specializations","handleTextChange","event","target","info","description","buildLink","author","handleOtherChange","handleSubmit","addType","get","refID","ObjectId","textFields","json","JSON","parse","buildName","shipName","ship","url","references","components","standard","internal","hasGuardian","hasPowerplay","processJSONBuild","shipInfo","getShipInfofromName","isBeginner","checkFields","Paper","Button","to","component","NavLink","field","_","FormGroup","row","check","onClick","chips","TagGroup","Chip","verticalAlign","EngIcons","icons","icon","paper","marginBottom","img","buttonGrid","flexDown","flexAcross","flexGrow","spacer","gridDown","textCenter","BuildDetailFull","blueprints","useLinks","foundBuild","shipImg","size","requires","href","shipReview","Divider","orientation","flexItem","plugins","gfm","renderers","paragraph","children","flexShrink","flexrow","gap","BuildDetailMobile","style","content","flexBasis","media","BuildCard","shipBuild","useShipIdfromMap","Card","CardMedia","image","CardContent","CardActions","BuildDetailBuilds","buildIDs","BuildDetail","useMemo","undefined","useShipBuildInfo","useParams","useTheme","isMobile","useMediaQuery","down","BuildList","queriedBuilds","setQueriedBuilds","buildQuery","filterBuilds","useCallback","filtered","query","newList","other","showVariants","tempList","specialty","val","beginner","filterShipBuilds","QueryShip","setShipType","shipSize","setShipSize","newValue","QueryEngineering","setEngLevel","QueryOther","setOther","prevState","QueryActions","resetQueries","Query","updateQuery","header","fab","position","bottom","right","QueryandBuildList","setQuery","buildRef","useRef","handleQuery","ref","Fab","current","scrollIntoView","behavior","ShipBuildSystemRoutes","path","useRouteMatch","exact"],"mappings":"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","file":"static/js/4.9fcddbe9.chunk.js","sourcesContent":["export enum ShipSpecialty {\n  jump = 'Jump Ship',\n  hge = 'HGE Farming',\n  cargo = 'Cargo',\n  passenger = 'Passenger',\n  mining = 'Miner',\n  pve = 'Combat - PvE',\n  pvp = 'Combat - PvP',\n  ax = 'Combat - Anti-Xeno',\n  racing = 'Racing',\n  multi = 'Multi-Purpose',\n}\n","export * from './buildInfo';\nexport * from './buildInfoInsert';\nexport * from './otherFilters';\nexport * from './query';\nexport * from './shipInfo';\nexport * from './shipSize';\nexport * from './shipSpecialty';\n","export enum ShipSize {\n  'S' = 1,\n  'M',\n  'L',\n}\n","import shipMap from 'data/shipBuilds/shipMap.json';\nimport { IShipInfo } from 'models/shipBuilds/shipInfo';\n\nexport const getShipInfofromID = (shipID: string): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find((x) => x.shipId === shipID);\n  return ship;\n};\nexport const getShipInfofromName = (\n  shipName: string\n): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find(\n    (x) => x.name.toLowerCase() === shipName.toLowerCase()\n  );\n  return ship;\n};\n","import {\n  ICoriolisLoadout,\n  IShipCoreModules,\n  IShipHardpoints,\n  IShipInternalModules,\n} from 'models/shipBuilds/coriolis';\n\nexport const processJSONBuild = (\n  json: string\n): {\n  buildName: string;\n  shipName: string;\n  hasGuardian: boolean;\n  hasPowerplay: boolean;\n  engineering: boolean;\n  url: string;\n} => {\n  const build: ICoriolisLoadout = JSON.parse(json);\n\n  const buildName = build.name;\n  const shipName = build.ship;\n  const url = build.references[0].url ?? '';\n\n  const components = build.components;\n  const core = components.standard;\n  const hardpoints = components.hardpoints;\n  const internals = components.internal;\n\n  // Check for Guardian\n  const guardian = checkGuardian(core, hardpoints, internals);\n\n  // Check for PowerPlay\n  const powerplay = checkPowerplay(internals, hardpoints);\n\n  // Check for engineering\n  const engineering = checkEngineering(hardpoints, internals, core);\n\n  return {\n    buildName,\n    shipName,\n    hasGuardian: guardian,\n    hasPowerplay: powerplay,\n    engineering,\n    url,\n  };\n};\n\n/**\n * Check for Engineered modules, except the armor\n * @param hardpoints\n * @param internals\n * @param core\n */\nconst checkEngineering = (\n  hardpoints: IShipHardpoints,\n  internals: IShipInternalModules,\n  core: IShipCoreModules\n) => {\n  let engineering = false;\n  const weaponEng = hardpoints.filter((hp) => hp?.blueprint);\n  const internalEng = internals.filter((i) => i?.blueprint);\n  const ppEng = core.powerPlant.blueprint;\n  const thrustEng = core.thrusters.blueprint;\n  const fsdEng = core.frameShiftDrive.blueprint;\n  const lifeEng = core.lifeSupport.blueprint;\n  const pdEng = core.powerDistributor.blueprint;\n  const sensorEng = core.sensors.blueprint;\n  if (\n    weaponEng.length > 0 ||\n    internalEng.length > 0 ||\n    ppEng ||\n    thrustEng ||\n    fsdEng ||\n    lifeEng ||\n    pdEng ||\n    sensorEng\n  ) {\n    engineering = true;\n  }\n  return engineering;\n};\n\n/**\n * Check for Powerplay modules\n * @param internals\n * @param hardpoints\n */\nconst checkPowerplay = (\n  internals: IShipInternalModules,\n  hardpoints: IShipHardpoints\n) => {\n  let powerplay = false;\n  const powerplayWeaponNames = [\n    'disruptor',\n    'imperial hammer',\n    'pack-hound',\n    'mining lance',\n    'enforcer',\n    'cytoscrambler',\n    'retributor',\n    'advanced plasma accelerator',\n    'pacifier',\n    'rocket propelled fsd disruptor',\n  ];\n  const powerplayInternals = internals.find((x) =>\n    x?.group?.toLowerCase().startsWith('prismatic')\n  );\n  if (powerplay === false && powerplayInternals) {\n    powerplay = true;\n  }\n  powerplayWeaponNames.forEach((x) => {\n    if (powerplay === false) {\n      const powerplayHardpoint = hardpoints.find(\n        (hp) => hp?.name?.toLowerCase() === x.toLowerCase()\n      );\n      powerplay = powerplayHardpoint ? true : false;\n    }\n  });\n  return powerplay;\n};\n\n/**\n * Check for Guardian modules/weapons\n * @param core\n * @param hardpoints\n * @param internals\n */\nconst checkGuardian = (\n  core: IShipCoreModules,\n  hardpoints: IShipHardpoints,\n  internals: IShipInternalModules\n) => {\n  let guardian = false;\n  const ppName = (core.powerPlant.name as string) ?? '';\n  const pdName = (core.powerDistributor.name as string) ?? '';\n  const guardianHardPoints = hardpoints.find((x) =>\n    x?.group?.toLowerCase().startsWith('guardian')\n  );\n  const guardianInternals = internals.find((x) =>\n    x?.group?.toLowerCase().startsWith('guardian')\n  );\n  if (\n    ppName.toLowerCase().startsWith('guardian') ||\n    pdName.toLowerCase().startsWith('guardian') ||\n    guardianHardPoints ||\n    guardianInternals\n  ) {\n    guardian = true;\n  }\n  return guardian;\n};\n","import { makeStyles } from '@material-ui/core';\n\nexport const useQueryStyles = makeStyles((theme) => ({\n  root: {\n    display: 'grid',\n    rowGap: '2px',\n    width: '99%',\n    gridTemplateAreas: `\n    'specializations'\n    'engineering'\n    'ship'\n    'other'\n    'buttons'`,\n    textAlign: 'center',\n    [theme.breakpoints.up('lg')]: {\n      gridTemplateAreas: `\n        'specializations    engineering'\n        'ship   other'\n        'buttons    buttons'`,\n      gridTemplateRows: '1fr 1fr 0.1fr',\n      rowGap: '5px',\n      columnGap: '5px',\n    },\n  },\n  bottomButtons: {\n    textAlign: 'center',\n    gridArea: 'buttons',\n    '& button': {\n      margin: '5px',\n    },\n  },\n  querySection: {\n    width: '90%',\n    minWidth: '90%',\n    border: '5px solid gray',\n    padding: '5px',\n    borderRadius: '15px',\n    margin: 'auto',\n    textAlign: 'center',\n    [theme.breakpoints.up('lg')]: {\n      width: '98%',\n    },\n  },\n  querySectionheader: {\n    marginTop: '5px',\n    textAlign: 'center',\n  },\n  shipQueries: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n  },\n  shipTypeQuery: {\n    [theme.breakpoints.up('lg')]: {\n      minWidth: '200px',\n      margin: '5px',\n      flex: '1 0',\n    },\n  },\n  shipSizeQuery: {\n    margin: 'auto',\n  },\n  engineeringQuery: {\n    gridArea: 'engineering',\n  },\n  queryExplanationText: {\n    color: 'rgba(255, 255, 255, 0.7)',\n  },\n  querySpecialtyButtons: {\n    display: 'grid',\n    gridTemplate: '1fr 1fr 1fr 1fr 1fr / 1fr 1fr',\n    '& button': {\n      margin: '3px',\n    },\n    [theme.breakpoints.up('lg')]: {\n      gridTemplate: '1fr 1fr / 1fr 1fr 1fr 1fr 1fr',\n    },\n  },\n  queryOtherButtons: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  queryOtherButtonGrids: {\n    display: 'grid',\n    gridTemplateRows: '0.5fr 1fr',\n    margin: '0 10px',\n    '& div': {\n      margin: 'auto',\n      padding: '5px',\n    },\n    '& label': {\n      height: '25px',\n      padding: '5px',\n    },\n  },\n  QueryOtherBeginnerButtons: {\n    borderWidth: '3px',\n    borderStyle: 'solid',\n    borderColor: theme.palette.secondary.main,\n    borderRadius: '5px',\n  },\n}));\n","import { Typography } from '@material-ui/core';\nimport { ToggleButton } from '@material-ui/lab';\nimport { ShipSpecialty } from 'models/shipBuilds/shipSpecialty';\nimport { Dispatch, SetStateAction } from 'react';\nimport { useQueryStyles } from './queryStyles';\n\nexport const QuerySpecialization = (props: {\n  selectedSpecialties: string[];\n  setSpecialties: Dispatch<SetStateAction<string[]>>;\n}) => {\n  const { selectedSpecialties, setSpecialties } = props;\n  const classes = useQueryStyles();\n\n  const handleSpecialties = (special: string) => {\n    let newSpecials: string[] = [];\n    if (selectedSpecialties.includes(special)) {\n      newSpecials = selectedSpecialties.filter((v) => v !== special);\n    } else {\n      newSpecials = [...selectedSpecialties, special];\n    }\n    setSpecialties(newSpecials);\n  };\n\n  return (\n    <div className={classes.querySection}>\n      <h3 className={classes.querySectionheader}>Ship Specializations</h3>\n\n      <Typography className={classes.queryExplanationText}>\n        Select specializations that the ship should fulfill.\n      </Typography>\n\n      <div className={classes.querySpecialtyButtons}>\n        {getSpecialties().map((special) => (\n          <ToggleButton\n            value={special}\n            key={special}\n            selected={selectedSpecialties.includes(special)}\n            onChange={() => handleSpecialties(special)}\n          >\n            {special}\n          </ToggleButton>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst getSpecialties = (): string[] => {\n  let specialties: string[] = [];\n\n  for (const speciality in ShipSpecialty) {\n    specialties = [\n      ...specialties,\n      ShipSpecialty[speciality as keyof typeof ShipSpecialty],\n    ];\n  }\n  return specialties;\n};\n","export default __webpack_public_path__ + \"static/media/Engineer_icon.0eb84776.svg\";","import { MouseEvent } from 'react';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { makeStyles, Tooltip } from '@material-ui/core';\nimport BlockIcon from '@material-ui/icons/Block';\nimport engineerIcon from 'assets/shipBuilds/Engineer_icon.svg';\n\ninterface IEngToggleGroupProps {\n  handleEngLevelChange: (_: MouseEvent<HTMLElement>, newValue: number) => void;\n  engLevel: number | null;\n}\n\nconst useStyles = makeStyles({\n  engButton: {\n    display: 'flex',\n    '& img': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n});\n\nexport const EngToggleGroup = (props: IEngToggleGroupProps) => {\n  const { engLevel, handleEngLevelChange } = props;\n  const classes = useStyles();\n\n  return (\n    <ToggleButtonGroup\n      value={engLevel}\n      exclusive\n      onChange={handleEngLevelChange}\n    >\n      <ToggleButton value={0}>\n        <Tooltip title=\"No Engineering\" arrow>\n          <div className={classes.engButton}>\n            <BlockIcon />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={1}>\n        <Tooltip title=\"Simple Engineering\" arrow>\n          <div className={classes.engButton}>\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={2}>\n        <Tooltip title=\"Moderate Engineering\" arrow>\n          <div className={classes.engButton}>\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={3}>\n        <Tooltip title=\"End-Game/Extreme Engineering\" arrow>\n          <div className={classes.engButton}>\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n","import { TextField } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildAddText {\n  id: string;\n  label: string;\n  isMultiline: boolean;\n  value: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\n\n/**\n *\n */\nexport const BuildAddText = (props: IBuildAddText) => {\n  const { id, label, value, onChange, isMultiline, disabled } = props;\n  return (\n    <TextField\n      variant=\"outlined\"\n      id={id}\n      label={label}\n      multiline={isMultiline}\n      rowsMax={10}\n      value={value}\n      onChange={onChange}\n      disabled={disabled}\n    />\n  );\n};\n","import { Autocomplete } from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport { sortItems } from 'functions/sort';\nimport { ChangeEvent } from 'react';\nimport { IShipInfo } from 'models/shipBuilds';\nimport { useShipMap } from 'hooks/shipBuilds/useShipMap';\n\nconst findShipName = (ships: IShipInfo[], shipID: string | null) => {\n  if (shipID === null) {\n    return null;\n  }\n  const shipName = ships.find((x) => x.shipId === shipID);\n  return shipName;\n};\n\ninterface IShipAutocompleteProps {\n  shipType: string | null;\n  handleShipChange: (event: ChangeEvent<{}>, value: IShipInfo | null) => void;\n}\n\nexport const ShipAutocomplete = (props: IShipAutocompleteProps) => {\n  const { shipType, handleShipChange } = props;\n  const ships = useShipMap();\n\n  return (\n    <Autocomplete\n      id=\"shipType\"\n      options={sortItems(ships, 'name')}\n      autoHighlight\n      getOptionLabel={(option) => option.name}\n      renderOption={(option) => (\n        <>\n          <span>{option.name}</span>\n        </>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Ship Type\"\n          variant=\"outlined\"\n          inputProps={{\n            ...params.inputProps,\n            autocomplete: 'new-password',\n          }}\n        />\n      )}\n      value={findShipName(ships, shipType)}\n      onChange={handleShipChange}\n    />\n  );\n};\n","import Ships from 'data/shipBuilds/shipMap.json';\nimport { IShipInfo } from 'models/shipBuilds';\n\nexport const useShipMap = () => {\n  const ships: IShipInfo[] = Ships;\n  return ships;\n};\n\nexport const useShipIdfromMap = (shipId?: string) => {\n  if (shipId) {\n    const ships: IShipInfo[] = Ships;\n    const ship = ships.find((x) => x.shipId === shipId);\n    return ship;\n  }\n  return undefined;\n};\n","import { FormControlLabel, Checkbox } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildCheckBoxProps {\n  label: string;\n  name: string;\n  checked: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n  disabled?: boolean;\n}\nexport const BuildCheckBox = (props: IBuildCheckBoxProps) => {\n  const { label, name, checked, onChange, disabled } = props;\n  return (\n    <FormControlLabel\n      label={label}\n      control={\n        <Checkbox\n          name={name}\n          checked={checked}\n          onChange={onChange}\n          disabled={disabled}\n        />\n      }\n    />\n  );\n};\n","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { IBuildInfoInsert } from 'models/shipBuilds/buildInfoInsert';\n\nconst AddBuildMutation = loader('../../graphql/insertOneShipBuildsv2.gql');\nconst ReplaceBuildMutation = loader('../../graphql/replaceOneShipBuildsv2.gql');\nconst UpdateBuildMutation = loader(\n  '../../graphql/updateRelatedOneShipBuildsv2.gql'\n);\n\nexport const useShipBuildMutations = () => {\n  return {\n    addBuild: useAddBuild(),\n    replaceBuild: useReplaceBuild(),\n    updateVariants: useUpdateVariantBuilds(),\n    updateRelated: useUpdateRelatedBuilds(),\n  };\n};\n\nconst useAddBuild = () => {\n  const [addBuildMutation] = useMutation<{\n    insertOneShipBuildsv2: IBuildInfoInsert;\n  }>(AddBuildMutation);\n\n  const addShipBuild = async (build: IBuildInfoInsert) => {\n    const addedBuild = await addBuildMutation({\n      variables: {\n        build: {\n          ...build,\n        },\n      },\n    });\n    return addedBuild;\n  };\n\n  return addShipBuild;\n};\n\nconst useUpdateRelatedBuilds = () => {\n  const [updateBuildMutation] = useMutation(UpdateBuildMutation);\n\n  const updateRelatedBuilds = async (id: string, relatedBuilds: string[]) => {\n    const updatedBuild = await updateBuildMutation({\n      variables: {\n        build: {\n          _id: id,\n        },\n        input: {\n          related: relatedBuilds,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n  return updateRelatedBuilds;\n};\n\nconst useUpdateVariantBuilds = () => {\n  const [updateBuildMutation] = useMutation(UpdateBuildMutation);\n\n  const updateVariantBuilds = async (id: string, variantBuilds: string[]) => {\n    const updatedBuild = await updateBuildMutation({\n      variables: {\n        build: {\n          _id: id,\n        },\n        input: {\n          variants: variantBuilds,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n  return updateVariantBuilds;\n};\n\nconst useReplaceBuild = () => {\n  const [replaceBuildMutation] = useMutation<IBuildInfoInsert>(\n    ReplaceBuildMutation\n  );\n\n  const replaceShipBuild = async (build: IBuildInfoInsert) => {\n    const updatedBuild = await replaceBuildMutation({\n      variables: {\n        buildID: build._id,\n        build: {\n          ...build,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n\n  return replaceShipBuild;\n};\n","import { useQuery } from '@apollo/client';\nimport { IBuildInfov2 } from 'models/shipBuilds';\nimport { loader } from 'graphql.macro';\nimport { useShipBuildMutations } from './useShipBuildMutations';\nimport { IBuildInfoInsert } from 'models/shipBuilds/buildInfoInsert';\n\nconst AllShipBuildsv2s = loader('../../graphql/allShipBuildsv2s.gql');\n\nexport const useShipBuilds = () => {\n  const addRelated = useAddRelatedBuild();\n  const addVariant = useAddVariantBuild();\n  const { shipBuilds, loading } = useAllShipBuilds();\n  const { addBuild, replaceBuild } = useShipBuildMutations();\n  return {\n    loading,\n    shipBuilds,\n    addBuild,\n    addRelated,\n    addVariant,\n    replaceBuild,\n  };\n};\n\nexport const useAllShipBuilds = () => {\n  const { data, loading, error } = useQuery<{\n    shipBuildsv2s: IBuildInfov2[];\n  }>(AllShipBuildsv2s);\n  if (error) {\n    throw new Error(`Failed to fetch ship builds: ${error.message}`);\n  }\n  const shipBuilds = data?.shipBuildsv2s ?? [];\n\n  return { shipBuilds, loading };\n};\n\nconst useAddRelatedBuild = () => {\n  const { addBuild, updateRelated } = useShipBuildMutations();\n  const addRelatedBuild = async (\n    currentID: string,\n    shipBuilds: IBuildInfov2[],\n    buildtoInsert: IBuildInfoInsert\n  ) => {\n    const currentBuild = shipBuilds.find(\n      (x) => ((x._id as unknown) as string) === currentID\n    );\n    if (currentBuild) {\n      const relatedBuilds = currentBuild.related;\n\n      const tempBuild = buildtoInsert;\n      tempBuild.related = currentBuild.related;\n      tempBuild.related = [...tempBuild.related, currentID];\n      const addedBuild:\n        | { insertOneShipBuildsv2: IBuildInfov2 }\n        | undefined\n        | null = (await addBuild(tempBuild)).data;\n      console.log(addedBuild);\n      if (addedBuild) {\n        const buildID = (addedBuild.insertOneShipBuildsv2\n          ._id as unknown) as string;\n        if (buildID) {\n          await updateRelated(currentID, [...relatedBuilds, buildID]);\n          for (const id of relatedBuilds) {\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            if (build) {\n              const newRelated = [...build.related, buildID];\n              await updateRelated((build._id as unknown) as string, newRelated);\n            }\n          }\n        }\n      } else {\n        throw new Error('Reference build and related builds not updated');\n      }\n    } else {\n      throw new Error('Reference build cannot be found');\n    }\n  };\n  return addRelatedBuild;\n};\n\nconst useAddVariantBuild = () => {\n  const { addBuild, updateVariants, updateRelated } = useShipBuildMutations();\n  const addVariantBuild = async (\n    parentID: string,\n    shipBuilds: IBuildInfov2[],\n    buildtoInsert: IBuildInfoInsert\n  ) => {\n    const parentBuild = shipBuilds.find(\n      (x) => ((x._id as unknown) as string) === parentID\n    );\n    if (parentBuild) {\n      const variantBuilds = parentBuild.variants;\n\n      const tempBuild = buildtoInsert;\n      tempBuild.isVariant = true;\n      tempBuild.related = variantBuilds;\n      const addedBuild:\n        | { insertOneShipBuildsv2: IBuildInfov2 }\n        | undefined\n        | null = (await addBuild(tempBuild)).data;\n      if (addedBuild) {\n        const buildID = (addedBuild.insertOneShipBuildsv2\n          ._id as unknown) as string;\n        if (buildID) {\n          console.log(buildID);\n          await updateVariants(parentID, [...variantBuilds, buildID]);\n\n          for (const id of variantBuilds) {\n            console.log(id);\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            if (build) {\n              const newRelated = [...build.related, buildID];\n              await updateRelated((build._id as unknown) as string, newRelated);\n            }\n          }\n        }\n      } else {\n        throw new Error('Parent and related builds were not updated');\n      }\n    } else {\n      throw new Error('Parent cannot be found');\n    }\n  };\n  return addVariantBuild;\n};\n","import { useLocation } from 'react-router-dom';\n\nexport const useUrlQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n","import {\n  Button,\n  FormGroup,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { ObjectId } from 'bson';\nimport { ChangeEvent, MouseEvent, useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { getShipInfofromName, processJSONBuild } from 'functions/shipBuilds';\nimport { IShipInfo, IBuildInfoInsert } from 'models/shipBuilds';\nimport { QuerySpecialization } from '../query/querySpecialities';\nimport { EngToggleGroup } from '../engToggleGroup';\nimport { BuildAddText } from './buildAddText';\nimport { ShipAutocomplete } from '../shipAutocomplete';\nimport { BuildCheckBox } from './buildCheckBox';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\nimport { useUrlQuery } from 'hooks/useURLQuery';\nimport { EDSpinner } from '@admiralfeb/react-components';\nimport { useSnackbar } from 'notistack';\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: 'center',\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n    rowGap: '10px',\n    width: '90%',\n    margin: 'auto',\n    padding: 10,\n  },\n  center: {\n    textAlign: 'center',\n    margin: '0 auto',\n  },\n});\n\n/**\n * Add Build Screen\n *\n * Used for all addition functions:\n *\n * - Normal Build\n * - Related Build\n * - Variant Build\n */\nexport const BuildAdd = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [jsonBuild, setJsonBuild] = useState('');\n  const [buildInfo, setBuildInfo] = useState<IBuildInfoInsert>(DEFAULTBUILD);\n  const [specialties, setSpecialties] = useState<string[]>([]);\n  const {\n    loading,\n    shipBuilds,\n    addBuild,\n    addRelated,\n    addVariant,\n  } = useShipBuilds();\n  const urlQuery = useUrlQuery();\n\n  useEffect(() => {\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, specializations: specialties };\n    });\n  }, [specialties]);\n\n  const handleJSONChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setJsonBuild(event.target.value);\n    const {\n      buildName,\n      shipName,\n      hasGuardian,\n      hasPowerplay,\n      engineering,\n      url,\n    } = processJSONBuild(event.target.value);\n    const engLevel = engineering ? 1 : 0;\n    const shipInfo = getShipInfofromName(shipName)!;\n    const _id = buildInfo._id;\n    const info: IBuildInfoInsert = {\n      _id,\n      title: buildName,\n      hasGuardian,\n      hasPowerplay,\n      buildLink: url,\n      shipId: shipInfo.shipId,\n      author: '',\n      specializations: [],\n      engLevel,\n      isBeginner: false,\n      description: '',\n      isVariant: false,\n      variants: [],\n      related: [],\n      jsonBuild: event.target.value,\n    };\n    setBuildInfo(info);\n  };\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n\n    switch (event.target.id) {\n      case 'title':\n        setBuildInfo((info) => {\n          return { ...info, title: value };\n        });\n        break;\n      case 'description':\n        setBuildInfo((info) => {\n          return { ...info, description: value };\n        });\n        break;\n      case 'buildLink':\n        setBuildInfo((info) => {\n          return { ...info, buildLink: value };\n        });\n        break;\n      case 'author':\n        setBuildInfo((info) => {\n          return { ...info, author: value };\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value!.shipId;\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, shipId: ship };\n    });\n  };\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    engLevel: number\n  ) => {\n    setBuildInfo({ ...buildInfo, engLevel });\n  };\n  const handleOtherChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setBuildInfo({ ...buildInfo, [event.target.name]: event.target.checked });\n  };\n  const handleSubmit = async () => {\n    try {\n      if (buildInfo.jsonBuild === '') {\n        throw new Error(\n          'Exported JSON is blank. Verify you have pasted the JSON from Coriolis.'\n        );\n      }\n      if (buildInfo.specializations.length < 1) {\n        throw new Error(\n          'No specializations have been selected. Minimum is one.'\n        );\n      }\n      if (buildInfo.author === '') {\n        throw new Error('Author is blank.');\n      }\n      if (buildInfo.description === '') {\n        throw new Error('More Information is blank.');\n      }\n      if (buildInfo.title === '') {\n        throw new Error(\n          'Build Title is blank. Verify you have pasted the JSON from Coriolis.'\n        );\n      }\n      if (buildInfo.buildLink === '') {\n        throw new Error(\n          'Build Link is blank. Verify you have pasted the JSON from Coriolis.'\n        );\n      }\n      const addType = urlQuery.get('type');\n      console.log(addType);\n      const refID = urlQuery.get('refID');\n      try {\n        switch (addType) {\n          case 'variant':\n            if (refID) {\n              await addVariant(refID, shipBuilds, buildInfo);\n            } else {\n              throw new Error('Build reference ID missing from URL');\n            }\n            break;\n          case 'related':\n            if (refID) {\n              await addRelated(refID, shipBuilds, buildInfo);\n            } else {\n              throw new Error('Build reference ID missing from URL');\n            }\n            break;\n          default:\n            await addBuild(buildInfo);\n            break;\n        }\n        enqueueSnackbar('Build Successfully Submitted', {\n          variant: 'success',\n        });\n        setBuildInfo({ ...DEFAULTBUILD, _id: new ObjectId() });\n        setSpecialties([]);\n        setJsonBuild('');\n      } catch (e) {\n        enqueueSnackbar(`Submit Failed: ${e.message}`, { variant: 'error' });\n        console.error(e);\n      }\n    } catch (e) {\n      enqueueSnackbar(`Submit failed. ${e.message}`, { variant: 'error' });\n    }\n  };\n\n  const textFields = [\n    {\n      id: 'json',\n      label: 'Exported JSON',\n      isMultiline: true,\n      value: jsonBuild,\n      onChange: handleJSONChange,\n    },\n    {\n      id: 'title',\n      label: 'Title',\n      isMultiline: false,\n      value: buildInfo.title,\n      onChange: handleTextChange,\n      disabled: false,\n    },\n    {\n      id: 'description',\n      label: 'More Information - Accepts markdown',\n      isMultiline: true,\n      value: buildInfo.description,\n      onChange: handleTextChange,\n    },\n    {\n      id: 'buildLink',\n      label: 'Build Link - Full',\n      isMultiline: false,\n      value: buildInfo.buildLink,\n      onChange: handleTextChange,\n      disabled: true,\n    },\n    // {\n    //   id: 'variant',\n    //   label: 'Variant Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.variants.join(','),\n    //   onChange: handleTextChange,\n    // },\n    // {\n    //   id: 'related',\n    //   label: 'Related Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.related.join(','),\n    //   onChange: handleTextChange,\n    // },\n    {\n      id: 'author',\n      label: 'Author',\n      isMultiline: false,\n      value: buildInfo.author,\n      onChange: handleTextChange,\n    },\n  ];\n\n  const checkFields = [\n    {\n      label: 'Guardian',\n      name: 'hasGuardian',\n      checked: buildInfo.hasGuardian,\n      disabled: true,\n    },\n    {\n      label: 'PowerPlay',\n      name: 'hasPowerplay',\n      checked: buildInfo.hasPowerplay,\n      disabled: true,\n    },\n    { label: 'Beginner', name: 'isBeginner', checked: buildInfo.isBeginner },\n  ];\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <>\n      <Typography variant=\"h3\" className={classes.center}>\n        Add Build Form\n      </Typography>\n      <Paper className={classes.root}>\n        <Button\n          to=\"/information/builds\"\n          component={NavLink}\n          color=\"secondary\"\n          variant=\"outlined\"\n        >\n          Return to builds\n        </Button>\n        <Typography>\n          Save your build in Coriolis and choose Export. Paste the exported JSON\n          into the Exported JSON field.\n        </Typography>\n        <Typography>\n          Verify/enter remaining information and click Submit Build at the\n          bottom.\n        </Typography>\n        {textFields.map((field) => (\n          <BuildAddText key={field.id} {...field} />\n        ))}\n        <ShipAutocomplete\n          shipType={buildInfo.shipId}\n          handleShipChange={handleShipChange}\n        />\n        <QuerySpecialization\n          selectedSpecialties={buildInfo.specializations}\n          setSpecialties={setSpecialties}\n        />\n        <div className={classes.center}>\n          <EngToggleGroup\n            engLevel={buildInfo.engLevel}\n            handleEngLevelChange={handleEngLevelChange}\n          />\n        </div>\n        <FormGroup row className={classes.center}>\n          {checkFields.map((check) => (\n            <BuildCheckBox\n              key={check.name}\n              {...check}\n              onChange={handleOtherChange}\n            />\n          ))}\n        </FormGroup>\n        <Button onClick={handleSubmit} variant=\"outlined\">\n          Submit Build\n        </Button>\n      </Paper>\n    </>\n  );\n};\n\nconst DEFAULTBUILD: IBuildInfoInsert = {\n  _id: new ObjectId(),\n  shipId: 'adder',\n  title: '',\n  specializations: [],\n  buildLink: '',\n  engLevel: 0,\n  hasGuardian: false,\n  hasPowerplay: false,\n  isBeginner: false,\n  author: '',\n  isVariant: false,\n  variants: [],\n  related: [],\n  description: '',\n  jsonBuild: '',\n};\n","import { Chip, makeStyles } from '@material-ui/core';\nimport { IBuildInfov2 } from 'models/shipBuilds';\n\nconst useStyles = makeStyles({\n  chips: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    margin: '5px',\n    '& div': {\n      margin: '1px',\n    },\n  },\n});\n\nexport const TagGroup = (props: { build: IBuildInfov2 }) => {\n  const { build } = props;\n  const classes = useStyles();\n  return (\n    <div className={classes.chips}>\n      {build.specializations.map((v) => (\n        <Chip label={v} key={v} />\n      ))}\n      {build.hasGuardian && <Chip label=\"Guardian\" key=\"guardian\" />}\n      {build.hasPowerplay && <Chip label=\"PowerPlay\" key=\"powerplay\" />}\n      {build.isBeginner && <Chip label=\"Beginner\" key=\"beginner\" />}\n    </div>\n  );\n};\n","import { makeStyles } from '@material-ui/core';\nimport engineerIcon from 'assets/shipBuilds/Engineer_icon.svg';\n\nconst useStyles = makeStyles({\n  engineering: {\n    '& p': {\n      '& img': {\n        height: '20px',\n        width: '20px',\n        verticalAlign: 'middle',\n      },\n    },\n  },\n});\n\nexport const EngIcons = (props: { engLevel: number }) => {\n  const classes = useStyles();\n  let icons: JSX.Element[] = [];\n  if (props.engLevel > 3 || props.engLevel < 1) {\n    return (\n      <div className={classes.engineering}>\n        <p>Engineering Level: None</p>\n      </div>\n    );\n  } else {\n    for (let i = 1; i <= props.engLevel; i++) {\n      icons = [\n        ...icons,\n        <img src={engineerIcon} key={i} alt=\"Engineering Icon\" />,\n      ];\n    }\n    return (\n      <div className={classes.engineering}>\n        <p>\n          <span>Engineering Level:</span> {icons.map((icon) => icon)}\n        </p>\n      </div>\n    );\n  }\n};\n","import {\n  Button,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\nimport { IBuildInfov2, IShipInfo, ShipSize } from 'models/shipBuilds';\nimport { TagGroup } from './tagGroup';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport { useLinks } from 'hooks/useLinks';\nimport { EngIcons } from './engIcons';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '80%',\n    margin: 'auto',\n    padding: 10,\n    marginBottom: 5,\n  },\n  img: {\n    width: 300,\n  },\n  buttonGrid: {\n    display: 'grid',\n    gridTemplate: '1fr 1fr / 1fr 1fr',\n  },\n  flexDown: {\n    display: 'flex',\n    flexDirection: 'column',\n    '& a': {\n      margin: '5px',\n    },\n  },\n  flexAcross: {\n    display: 'flex',\n    flexDirection: 'row',\n    '& a': {\n      flexGrow: 1,\n    },\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  gridDown: {\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n  },\n  margin: {\n    margin: 10,\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetailFull = (props: {\n  foundBuild: IBuildInfov2;\n  shipInfo: IShipInfo | undefined;\n}) => {\n  const classes = useStyles();\n  const { blueprints } = useLinks();\n  const { shipInfo, foundBuild } = props;\n\n  return (\n    <>\n      <Paper className={classes.paper}>\n        <div className={classes.flexAcross}>\n          {shipInfo && (\n            <div className={`${classes.flexDown} ${classes.margin}`}>\n              <img\n                src={shipInfo.shipImg}\n                alt={shipInfo.name}\n                className={classes.img}\n              />\n              <div className={classes.flexAcross}>\n                <Typography>{shipInfo.name}</Typography>\n                <span className={classes.spacer} />\n                <Typography>{ShipSize[shipInfo.size]}</Typography>\n              </div>\n              {shipInfo.requires && (\n                <Typography>Requires: {shipInfo.requires}</Typography>\n              )}\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                href={foundBuild!.buildLink}\n                target=\"_blank\"\n              >\n                Show Build\n              </Button>\n              <div className={classes.buttonGrid}>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  href={shipInfo.shipReview}\n                  target=\"_blank\"\n                >\n                  Pilot's Review\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  href={`${blueprints}?s=${shipInfo.blueprint}`}\n                  target=\"_blank\"\n                >\n                  Ship Anatomy\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  to={`/information/builds/add?type=variant&refID=${\n                    (foundBuild!._id as unknown) as string\n                  }`}\n                  component={NavLink}\n                >\n                  Add Variant\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  to={`/information/builds/add?type=related&refID=${\n                    (foundBuild!._id as unknown) as string\n                  }`}\n                  component={NavLink}\n                >\n                  Add Related\n                </Button>\n              </div>\n            </div>\n          )}\n          <Divider orientation=\"vertical\" flexItem />\n          <div\n            className={`${classes.flexDown} ${classes.spacer} ${classes.margin}`}\n          >\n            <Typography variant=\"h5\">{foundBuild?.title}</Typography>\n            <Typography>Author: {foundBuild?.author}</Typography>\n            <EngIcons engLevel={foundBuild!.engLevel} />\n            <TagGroup build={foundBuild!} />\n            {foundBuild?.description && (\n              <ReactMarkdown\n                plugins={[gfm]}\n                renderers={{ paragraph: Typography }}\n                children={foundBuild.description}\n              />\n            )}\n          </div>\n        </div>\n      </Paper>\n    </>\n  );\n};\n","import {\n  Button,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { useLinks } from 'hooks/useLinks';\nimport { IBuildInfov2, IShipInfo, ShipSize } from 'models/shipBuilds';\nimport ReactMarkdown from 'react-markdown';\nimport { NavLink } from 'react-router-dom';\nimport gfm from 'remark-gfm';\nimport { EngIcons } from './engIcons';\nimport { TagGroup } from './tagGroup';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '90%',\n    margin: 'auto',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  img: {\n    width: 150,\n    flexShrink: 0,\n  },\n  flexrow: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  buttonGrid: {\n    display: 'grid',\n    gridTemplate: '1fr 1fr / 1fr 1fr',\n    gap: 5,\n    padding: 5,\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n}));\n\nexport const BuildDetailMobile = (props: {\n  foundBuild: IBuildInfov2;\n  shipInfo: IShipInfo | undefined;\n}) => {\n  const { blueprints } = useLinks();\n  const { foundBuild, shipInfo } = props;\n  const classes = useStyles();\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.flexrow}>\n        {shipInfo && (\n          <img\n            src={shipInfo!.shipImg}\n            alt={shipInfo!.name}\n            className={classes.img}\n          />\n        )}\n        <div>\n          <Typography variant=\"h5\">{foundBuild.title}</Typography>\n          <Typography>Author: {foundBuild.author}</Typography>\n          <div className={classes.flexrow}>\n            {shipInfo && (\n              <>\n                <Typography>{shipInfo.name}</Typography>\n                <div className={classes.spacer} />\n                <Typography>{ShipSize[shipInfo.size]}</Typography>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        href={foundBuild.buildLink}\n        target=\"_blank\"\n      >\n        Show Build\n      </Button>\n      <Divider style={{ marginTop: '10px' }} />\n      <TagGroup build={foundBuild!} />\n      <EngIcons engLevel={foundBuild!.engLevel} />\n      {foundBuild.description && (\n        <ReactMarkdown\n          plugins={[gfm]}\n          renderers={{ paragraph: Typography }}\n          children={foundBuild.description}\n        />\n      )}\n      <div className={classes.buttonGrid}>\n        {shipInfo && (\n          <>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              href={shipInfo.shipReview}\n              target=\"_blank\"\n            >\n              Pilot's Review\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              href={`${blueprints}?s=${shipInfo.blueprint}`}\n              target=\"_blank\"\n            >\n              Ship Anatomy\n            </Button>\n          </>\n        )}\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          to={`/information/builds/add?type=variant&refID=${\n            (foundBuild!._id as unknown) as string\n          }`}\n          component={NavLink}\n        >\n          Add Variant\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          to={`/information/builds/add?type=related&refID=${\n            (foundBuild!._id as unknown) as string\n          }`}\n          component={NavLink}\n        >\n          Add Related\n        </Button>\n      </div>\n    </Paper>\n  );\n};\n","import {\n  CardMedia,\n  Divider,\n  Typography,\n  Button,\n  CardActions,\n  CardContent,\n  Card,\n  makeStyles,\n} from '@material-ui/core';\nimport { IBuildInfov2, ShipSize } from 'models/shipBuilds';\nimport { EngIcons } from './engIcons';\nimport { NavLink } from 'react-router-dom';\nimport { useShipIdfromMap } from 'hooks/shipBuilds/useShipMap';\nimport { TagGroup } from './tagGroup';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '400px',\n    minWidth: '400px',\n    margin: '5px',\n  },\n  content: {\n    flexGrow: 1,\n    flexBasis: 'auto',\n    flexWrap: 'wrap',\n  },\n  media: {\n    height: '100px',\n    width: '100px',\n    flexShrink: 0,\n  },\n  shipName: {\n    display: 'flex',\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n});\n\nexport const BuildCard = (props: { shipBuild: IBuildInfov2 | undefined }) => {\n  const { shipBuild } = props;\n  const shipInfo = useShipIdfromMap(shipBuild?.shipId);\n  const classes = useStyles();\n\n  return shipBuild && shipInfo ? (\n    <Card variant=\"outlined\" className={classes.root}>\n      <div>\n        <CardMedia\n          className={classes.media}\n          image={shipInfo.shipImg}\n          title={shipInfo.name}\n        />\n        <Typography>{ShipSize[shipInfo.size]}</Typography>\n      </div>\n      <CardContent className={classes.content}>\n        <Typography>{shipBuild.title}</Typography>\n        <Divider />\n        <Typography>{shipInfo.name} </Typography>\n        {shipInfo.requires && (\n          <Typography>Requirement: {shipInfo.requires}</Typography>\n        )}\n        <TagGroup build={shipBuild} />\n        <Divider />\n        <EngIcons engLevel={shipBuild.engLevel} />\n        <Divider />\n        <Typography>Author: {shipBuild.author}</Typography>\n        {shipBuild.variants.length > 0 ? (\n          <Typography>Has Variants</Typography>\n        ) : null}\n        {shipBuild.related.length > 0 ? (\n          <Typography>Has Related Builds</Typography>\n        ) : null}\n        <div className={classes.spacer} />\n        <CardActions className=\"\">\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            href={shipBuild.buildLink}\n            target=\"_blank\"\n          >\n            View Build\n          </Button>{' '}\n          <Button\n            to={`/information/builds/detail/${\n              (shipBuild._id as unknown) as string\n            }`}\n            component={NavLink}\n            color=\"primary\"\n            variant=\"contained\"\n            target=\"_blank\"\n          >\n            View Details\n          </Button>\n        </CardActions>\n      </CardContent>\n    </Card>\n  ) : null;\n};\n","import { EDSpinner } from '@admiralfeb/react-components';\nimport { makeStyles, Typography } from '@material-ui/core';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\nimport { BuildCard } from './buildCard';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '90%',\n    margin: 'auto',\n    marginBottom: 5,\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetailBuilds = (props: {\n  title: string;\n  buildIDs: string[];\n}) => {\n  const { title, buildIDs } = props;\n  const classes = useStyles();\n  const { loading, shipBuilds } = useShipBuilds();\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <div className={classes.textCenter}>\n      <Typography variant=\"h4\">{title}</Typography>\n      <div className={classes.paper}>\n        {buildIDs.map((id) => {\n          const build = shipBuilds.find(\n            (x) => ((x._id as unknown) as string) === id\n          );\n          return <BuildCard shipBuild={build} key={id} />;\n        })}\n      </div>\n    </div>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { EDSpinner } from '@admiralfeb/react-components';\nimport { NotFound } from 'components';\nimport {\n  makeStyles,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport { BuildDetailFull } from './buildDetailFull';\nimport { BuildDetailMobile } from './buildDetailMobile';\nimport { BuildDetailBuilds } from './buildDetailBuilds';\nimport { useShipBuildInfo } from 'hooks/shipBuilds/useShipBuildInfo';\n\ninterface RouteParams {\n  id: string;\n}\n\nconst useStyles = makeStyles({\n  textCenter: {\n    textAlign: 'center',\n  },\n});\n\nexport const BuildDetail = () => {\n  let { id } = useParams<RouteParams>();\n  const { loading, shipInfo, foundBuild } = useShipBuildInfo(id);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const classes = useStyles();\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <>\n      <Typography variant=\"h3\" className={classes.textCenter}>\n        Build Detail\n      </Typography>\n      {foundBuild ? (\n        isMobile ? (\n          <BuildDetailMobile foundBuild={foundBuild} shipInfo={shipInfo} />\n        ) : (\n          <BuildDetailFull foundBuild={foundBuild} shipInfo={shipInfo} />\n        )\n      ) : (\n        <NotFound />\n      )}\n      {foundBuild && foundBuild.variants.length > 0 ? (\n        <BuildDetailBuilds\n          title=\"Build Variants\"\n          buildIDs={foundBuild.variants}\n        />\n      ) : null}\n      {foundBuild && foundBuild.related.length > 0 ? (\n        <BuildDetailBuilds\n          title=\"Related Builds\"\n          buildIDs={foundBuild.related}\n        />\n      ) : null}\n    </>\n  );\n};\n","import { getShipInfofromID } from 'functions/shipBuilds';\nimport { useMemo } from 'react';\nimport { useShipBuilds } from './useShipBuilds';\n\n/**\n * Returns the build and ship info for a build provided the id.\n * It also provides the ship builds and loading boolean.\n * @param id id of build\n */\nexport const useShipBuildInfo = (id?: string) => {\n  const { loading, shipBuilds } = useShipBuilds();\n\n  let foundBuild = useMemo(() => {\n    if (id === undefined) {\n      return undefined;\n    }\n    if (loading) {\n      return undefined;\n    }\n\n    let build = shipBuilds.find(\n      (x) => x._id && ((x._id as unknown) as string) === id\n    );\n    if (build) {\n      return build;\n    } else {\n      return null;\n    }\n  }, [id, loading, shipBuilds]);\n\n  let shipInfo = useMemo(() => {\n    if (foundBuild) {\n      return getShipInfofromID(foundBuild.shipId);\n    } else {\n      return undefined;\n    }\n  }, [foundBuild]);\n\n  return { loading, shipBuilds, foundBuild, shipInfo };\n};\n","import { EDSpinner } from '@admiralfeb/react-components';\nimport { useCallback, useEffect, useState } from 'react';\nimport { filterShipBuilds } from 'functions/shipBuilds/filterShipBuilds';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\nimport { IBuildInfov2, IQuery } from 'models/shipBuilds';\nimport { BuildCard } from './buildCard';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n});\n\nexport const BuildList = (props: { buildQuery: IQuery | undefined }) => {\n  const [queriedBuilds, setQueriedBuilds] = useState<IBuildInfov2[]>();\n  const { buildQuery } = props;\n  const { loading, shipBuilds } = useShipBuilds();\n  const classes = useStyles();\n\n  let filterBuilds = useCallback(() => {\n    if (loading) {\n      return;\n    }\n    console.log(shipBuilds);\n    const filtered = filterShipBuilds(shipBuilds, buildQuery);\n    setQueriedBuilds(filtered);\n  }, [loading, shipBuilds, buildQuery]);\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    filterBuilds();\n  }, [loading, filterBuilds]);\n\n  return (\n    <div className={classes.root}>\n      {loading ? (\n        <EDSpinner />\n      ) : (\n        queriedBuilds?.map((ship) => {\n          return (\n            <BuildCard key={(ship._id as unknown) as string} shipBuild={ship} />\n          );\n        })\n      )}\n    </div>\n  );\n};\n","import { IBuildInfov2, IQuery } from 'models/shipBuilds';\nimport { getShipInfofromID } from './getShipInfo';\n\nexport const filterShipBuilds = (\n  shipBuilds: IBuildInfov2[] | undefined,\n  query: IQuery | undefined\n) => {\n  if (shipBuilds && query) {\n    let newList = shipBuilds;\n    if (\n      query.other.showVariants === null ||\n      query.other.showVariants === false\n    ) {\n      newList = newList.filter((build) => build.isVariant === false);\n    }\n    // ship type\n    if (query.ship !== null) {\n      newList = newList.filter((build) => build.shipId === query.ship);\n    }\n    // ship size\n    if (query.size !== null) {\n      newList = newList.filter((build) => {\n        const shipInfo = getShipInfofromID(build.shipId);\n        if (shipInfo?.size === query.size) {\n          return build;\n        } else {\n          return undefined;\n        }\n      });\n    }\n    // Engineering\n    if (query.engLevel !== null) {\n      newList = newList.filter((build) => build.engLevel === query.engLevel);\n    }\n    // Specializations\n    if (query.specialties.length > 0) {\n      console.log(query.specialties);\n      let tempList: IBuildInfov2[] = [];\n      for (const specialty of query.specialties) {\n        if (tempList.length > 0) {\n          tempList = tempList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        } else {\n          tempList = newList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        }\n      }\n      newList = tempList;\n    }\n    // Guardian\n    if (query.other.guardian !== null) {\n      const val = query.other.guardian === 1 ? true : false;\n      newList = newList.filter((build) => build.hasGuardian === val);\n    }\n    // PowerPlay\n    if (query.other.powerplay !== null) {\n      const val = query.other.powerplay === 1 ? true : false;\n      newList = newList.filter((build) => build.hasPowerplay === val);\n    }\n    // Beginner\n    if (query.other.beginner !== null) {\n      const val = query.other.beginner === 1 ? true : false;\n      newList = newList.filter((build) => build.isBeginner === val);\n    }\n\n    return newList;\n  }\n};\n","import { Tooltip } from '@material-ui/core';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { ChangeEvent, Dispatch, MouseEvent, SetStateAction } from 'react';\nimport { IShipInfo } from 'models/shipBuilds';\nimport { ShipAutocomplete } from '../shipAutocomplete';\nimport { useQueryStyles } from './queryStyles';\n\nexport const QueryShip = (props: {\n  shipSize: number | null;\n  setShipSize: Dispatch<SetStateAction<number | null>>;\n  shipType: string | null;\n  setShipType: Dispatch<SetStateAction<string | null>>;\n}) => {\n  const { shipType, setShipType, shipSize, setShipSize } = props;\n  const classes = useQueryStyles();\n\n  const handleShipSizeChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setShipType(null);\n    setShipSize(newValue);\n  };\n\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value?.shipId;\n    setShipType(ship ?? null);\n    setShipSize(null);\n  };\n\n  return (\n    <div className={classes.querySection}>\n      <h3 className={classes.querySectionheader}>Ship Type and Size</h3>\n      <div className={classes.shipQueries}>\n        <div className={classes.shipTypeQuery}>\n          <ShipAutocomplete\n            shipType={shipType}\n            handleShipChange={handleShipChange}\n          />\n        </div>\n        <div className={classes.shipSizeQuery}>\n          <Tooltip\n            title=\"What's the size of the ship you're looking for?\"\n            arrow\n          >\n            <ToggleButtonGroup\n              value={shipSize}\n              exclusive\n              onChange={handleShipSizeChange}\n            >\n              <ToggleButton value={1}>Small</ToggleButton>\n              <ToggleButton value={2}>Medium</ToggleButton>\n              <ToggleButton value={3}>Large</ToggleButton>\n            </ToggleButtonGroup>\n          </Tooltip>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Typography } from '@material-ui/core';\nimport { SetStateAction, MouseEvent, Dispatch } from 'react';\nimport { EngToggleGroup } from '../engToggleGroup';\nimport { useQueryStyles } from './queryStyles';\n\nexport const QueryEngineering = (props: {\n  engLevel: number | null;\n  setEngLevel: Dispatch<SetStateAction<number | null>>;\n}) => {\n  const { engLevel, setEngLevel } = props;\n  const classes = useQueryStyles();\n\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setEngLevel(newValue);\n  };\n\n  return (\n    <div className={`${classes.querySection} ${classes.engineeringQuery}`}>\n      <h3 className={classes.querySectionheader}>Ship Engineering Level</h3>\n      <Typography className={classes.queryExplanationText}>\n        Select Engineering level ranging from None to Max Engineering.\n      </Typography>\n      <EngToggleGroup\n        engLevel={engLevel}\n        handleEngLevelChange={handleEngLevelChange}\n      />\n    </div>\n  );\n};\n","import { Tooltip } from '@material-ui/core';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\n\nimport { OtherFilters } from 'models/shipBuilds/otherFilters';\nimport BlockIcon from '@material-ui/icons/Block';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { Dispatch, MouseEvent, SetStateAction } from 'react';\nimport { useQueryStyles } from './queryStyles';\n\nexport const QueryOther = (props: {\n  other: OtherFilters;\n  setOther: Dispatch<SetStateAction<OtherFilters>>;\n}) => {\n  const { other, setOther } = props;\n  const classes = useQueryStyles();\n\n  const handleGuardianChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther((prevState) => ({ ...prevState, guardian: newValue }));\n  };\n  const handlePowerPlayChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther((prevState) => ({ ...prevState, powerplay: newValue }));\n  };\n  const handleBeginnerChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther((prevState) => ({ ...prevState, beginner: newValue }));\n  };\n  const handleShowVariantsChange = (\n    _: MouseEvent<HTMLElement>,\n    checked: boolean\n  ) => {\n    setOther((prevState) => ({ ...prevState, showVariants: checked }));\n  };\n\n  return (\n    <div className={classes.querySection}>\n      <h3 className={classes.querySectionheader}>Other Filters</h3>\n      <div className={classes.queryOtherButtons}>\n        <Tooltip title=\"Show all builds, including variants\" arrow>\n          <div className={classes.queryOtherButtonGrids}>\n            <label>Show Variants</label>\n            <ToggleButtonGroup\n              value={other.showVariants}\n              exclusive\n              onChange={handleShowVariantsChange}\n            >\n              <ToggleButton value={true}>\n                <CheckIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Should the build have Guardian components?\" arrow>\n          <div className={classes.queryOtherButtonGrids}>\n            <label>Guardian</label>\n            <ToggleButtonGroup\n              value={other.guardian}\n              exclusive\n              onChange={handleGuardianChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Does the build have Power Play modules?\" arrow>\n          <div className={classes.queryOtherButtonGrids}>\n            <label>Power Play</label>\n            <ToggleButtonGroup\n              value={other.powerplay}\n              exclusive\n              onChange={handlePowerPlayChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Is this build easy to achieve early-game?\" arrow>\n          <div\n            className={`${classes.queryOtherButtonGrids} ${classes.QueryOtherBeginnerButtons}`}\n          >\n            <label>Beginner</label>\n            <ToggleButtonGroup\n              value={other.beginner}\n              exclusive\n              onChange={handleBeginnerChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import { Button, makeStyles } from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: 'center',\n    gridArea: 'buttons',\n    '& button': {\n      margin: '5px',\n    },\n  },\n});\n\nexport const QueryActions = (props: { resetQueries: () => void }) => {\n  const classes = useStyles();\n  const { resetQueries } = props;\n  return (\n    <div className={classes.root}>\n      <Button\n        onClick={resetQueries}\n        color=\"primary\"\n        variant=\"outlined\"\n        className=\"resetButton\"\n      >\n        Reset Selections\n      </Button>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        component={NavLink}\n        to=\"/information/builds/add\"\n      >\n        Add Build\n      </Button>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { IQuery, OtherFilters } from 'models/shipBuilds';\n\nimport { Paper } from '@material-ui/core';\nimport { QuerySpecialization } from './querySpecialities';\nimport { QueryShip } from './queryShip';\nimport { QueryEngineering } from './queryEngineering';\nimport { QueryOther } from './queryOther';\nimport { useUrlQuery } from 'hooks/useURLQuery';\nimport { useQueryStyles } from './queryStyles';\nimport { QueryActions } from './queryButtons';\n\nexport const Query = (props: { updateQuery: (query: IQuery) => void }) => {\n  const [shipType, setShipType] = useState<string | null>(null);\n  const [shipSize, setShipSize] = useState<number | null>(null);\n  const [engLevel, setEngLevel] = useState<number | null>(null);\n  const [selectedSpecialties, setSpecialties] = useState<string[]>([]);\n  const [other, setOther] = useState<OtherFilters>({\n    guardian: null,\n    powerplay: null,\n    beginner: null,\n    showVariants: null,\n  });\n  let urlQuery = useUrlQuery();\n  const { updateQuery } = props;\n  const classes = useQueryStyles();\n\n  useEffect(() => {\n    const queryParam = urlQuery.get('beginner');\n    if (queryParam === 'true') {\n      setOther({ ...other, beginner: 1 });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const query: IQuery = {\n      ship: shipType,\n      size: shipSize,\n      engLevel,\n      specialties: selectedSpecialties,\n      other,\n    };\n    console.log(query);\n    updateQuery(query);\n  }, [shipType, shipSize, engLevel, selectedSpecialties, other, updateQuery]);\n\n  const resetQueries = () => {\n    setShipType(null);\n    setShipSize(null);\n    setEngLevel(null);\n    setSpecialties([]);\n    setOther({\n      guardian: null,\n      powerplay: null,\n      beginner: null,\n      showVariants: null,\n    });\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <QuerySpecialization\n        selectedSpecialties={selectedSpecialties}\n        setSpecialties={setSpecialties}\n      />\n      <QueryShip\n        shipType={shipType}\n        setShipType={setShipType}\n        shipSize={shipSize}\n        setShipSize={setShipSize}\n      />\n      <QueryEngineering engLevel={engLevel} setEngLevel={setEngLevel} />\n      <QueryOther other={other} setOther={setOther} />\n      <QueryActions resetQueries={resetQueries} />\n    </Paper>\n  );\n};\n","import {\n  Fab,\n  makeStyles,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport { useCallback, useRef, useState } from 'react';\nimport { BuildList } from './builds/buildList';\nimport { IQuery } from 'models/shipBuilds';\nimport { Query } from './query/query';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nconst useStyles = makeStyles({\n  root: {\n    '& p': {\n      textAlign: 'center',\n    },\n    width: '95%',\n    margin: 'auto',\n  },\n  header: { textAlign: 'center' },\n  fab: {\n    position: 'fixed',\n    bottom: '5px',\n    right: '10px',\n  },\n});\n\nexport const QueryandBuildList = () => {\n  const [query, setQuery] = useState<IQuery>();\n  const buildRef = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const classes = useStyles();\n\n  const handleQuery = useCallback((query: IQuery) => {\n    setQuery(query);\n  }, []);\n\n  const handleFab = () => {\n    if (buildRef.current) {\n      buildRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h3\" className={classes.header}>\n        Ship Build Archive\n      </Typography>\n      <Query updateQuery={handleQuery} />\n      <div ref={buildRef}>\n        <BuildList buildQuery={query} />\n      </div>\n      {isMobile && (\n        <div className={classes.fab}>\n          <Fab color=\"primary\" className=\"fab\" onClick={handleFab}>\n            <ArrowDownwardIcon />\n          </Fab>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { EDSpinner } from '@admiralfeb/react-components';\nimport {\n  QueryandBuildList,\n  BuildAdd,\n  BuildDetail,\n} from 'components/shipBuilds';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\n\nexport const ShipBuildSystemRoutes = () => {\n  const { path } = useRouteMatch();\n  const { loading } = useShipBuilds();\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <Switch>\n      <Route path={`${path}/detail/:id`}>\n        <BuildDetail />\n      </Route>\n      <Route path={path} exact>\n        <QueryandBuildList />\n      </Route>\n      <Route path={`${path}/add`}>\n        <BuildAdd />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default ShipBuildSystemRoutes;\n"],"sourceRoot":""}