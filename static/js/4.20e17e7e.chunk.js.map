{"version":3,"sources":["app/information/ship-builds/models/shipSize.ts","app/information/ship-builds/models/index.ts","app/information/ship-builds/functions/getShipInfo.ts","app/information/ship-builds/hooks/useShipBuilds.ts","app/information/ship-builds/models/shipSpecialty.ts","app/information/ship-builds/assets/Engineer_icon.svg","app/information/ship-builds/components/moreInfoDialog.tsx","app/information/ship-builds/components/builds/buildCard.tsx","app/information/ship-builds/components/builds/buildList.tsx","app/information/ship-builds/functions/filterShipBuilds.ts","app/information/ship-builds/components/query/querySpecialities.tsx","app/information/ship-builds/components/shipAutocomplete.tsx","app/information/ship-builds/hooks/useShips.ts","app/information/ship-builds/components/query/queryShip.tsx","app/information/ship-builds/components/engToggleGroup.tsx","app/information/ship-builds/components/query/queryEngineering.tsx","app/information/ship-builds/components/query/queryOther.tsx","app/information/ship-builds/components/query/query.tsx","app/information/ship-builds/hooks/useAddBuild.ts","app/information/ship-builds/components/builds/buildAddText.tsx","app/information/ship-builds/components/builds/buildCheckBox.tsx","app/information/ship-builds/components/builds/buildAdd.tsx","app/information/ship-builds/functions/processJSONBuild.ts","app/information/ship-builds/components/uscBuildSystem.tsx"],"names":["ShipSize","getShipInfofromID","shipID","shipMap","find","x","id","ShipSpecialty","Transition","forwardRef","props","ref","Slide","direction","MoreInfoDialog","content","open","setOpen","handleClose","Dialog","TransitionComponent","keepMounted","scroll","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","style","whiteSpace","DialogActions","Button","onClick","color","BuildCard","useState","shipInfo","setShipInfo","showDialog","setShowDialog","useEffect","Card","variant","className","CardMedia","image","shipImg","title","name","CardContent","Typography","description","Divider","size","requires","tags","specializations","guardian","powerplay","beginner","engLevel","author","CardActions","href","buildLink","target","moreInfo","EngIcons","icons","i","src","engineerIcon","alt","map","icon","TagGroup","v","Chip","label","BuildList","queriedBuilds","setQueriedBuilds","buildQuery","useQuery","gql","data","loading","error","Error","message","shipBuilds","useShipBuilds","filterBuilds","useCallback","filtered","query","newList","ship","filter","build","specialties","length","console","log","tempList","specialty","includes","other","val","filterShipBuilds","sorted","sortItems","_id","QuerySpecialization","selectedSpecialties","setSpecialties","getSpecialties","special","ToggleButton","value","selected","onChange","newSpecials","handleSpecialties","speciality","findShipName","ships","ShipAutocomplete","shipType","handleShipChange","Ships","Autocomplete","options","autoHighlight","getOptionLabel","option","renderOption","renderInput","params","TextField","inputProps","autocomplete","QueryShip","setShipType","shipSize","setShipSize","_","Tooltip","arrow","ToggleButtonGroup","exclusive","newValue","EngToggleGroup","handleEngLevelChange","QueryEngineering","setEngLevel","QueryOther","setOther","Query","URLSearchParams","useLocation","search","get","queryUpdate","Paper","component","NavLink","to","BuildAddText","isMultiline","multiline","BuildCheckBox","checked","FormControlLabel","control","Checkbox","useStyles","makeStyles","root","textAlign","display","gridTemplate","rowGap","width","margin","BuildAdd","classes","enqueueSnackbar","useSnackbar","jsonBuild","setJsonBuild","DEFAULTBUILD","buildInfo","setBuildInfo","addBuild","useMutation","addBuildMutation","a","variables","addedBuild","useAddBuild","handleTextChange","event","handleOtherChange","handleSubmit","textFields","json","JSON","parse","buildName","shipName","url","references","engineering","components","core","standard","hardpoints","internals","internal","ppName","powerPlant","pdName","powerDistributor","guardianHardPoints","group","toLowerCase","startsWith","guardianInternals","powerplayInternals","forEach","powerplayHardpoint","hp","weaponEng","blueprint","internalEng","ppEng","thrustEng","thrusters","fsdEng","frameShiftDrive","lifeEng","lifeSupport","pdEng","sensorEng","sensors","processJSONBuild","getShipInfofromName","info","checkFields","field","FormGroup","row","check","ObjectId","USCBuildSystem","path","useRouteMatch","setQuery","buildRef","useRef","isMobile","useMediaQuery","exact","Fab","current","scrollIntoView","behavior"],"mappings":"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","file":"static/js/4.20e17e7e.chunk.js","sourcesContent":["export enum ShipSize {\n  'S' = 1,\n  'M',\n  'L',\n}\n","export * from './buildInfo';\nexport * from './query';\nexport * from './shipInfo';\nexport * from './shipSize';\nexport * from './tag';\n","import shipMap from '../assets/shipMap.json';\nimport { IShipInfo } from '../models/shipInfo';\n\nexport const getShipInfofromID = (shipID: number): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find((x) => x.id === shipID);\n  return ship;\n};\nexport const getShipInfofromName = (\n  shipName: string\n): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find(\n    (x) => x.name.toLowerCase() === shipName.toLowerCase()\n  );\n  return ship;\n};\n","import { gql, useQuery } from '@apollo/client';\nimport { IBuildInfo } from '../models';\n\nexport const useShipBuilds = () => {\n  const { data, loading, error } = useQuery<{ shipBuilds: IBuildInfo[] }>(gql`\n    query AllShipBuilds {\n      shipBuilds {\n        _id\n        author\n        beginner\n        buildLink\n        description\n        engLevel\n        guardian\n        moreInfo\n        powerplay\n        ship\n        specializations\n      }\n    }\n  `);\n  if (error) {\n    throw new Error(`Failed to fetch ship builds: ${error.message}`);\n  }\n\n  const shipBuilds = data?.shipBuilds ?? [];\n\n  return { shipBuilds, loading };\n};\n","export enum ShipSpecialty {\n  exp = 'Exploration',\n  jump = 'Jump Ship',\n  hge = 'HGE Farming',\n  cargo = 'Cargo',\n  mining = 'Miner',\n  pve = 'Combat - PvE',\n  pvp = 'Combat - PvP',\n  ax = 'Combat - Anti-Xeno',\n  racing = 'Racing',\n  multi = 'Multi-Purpose',\n}\n","export default __webpack_public_path__ + \"static/media/Engineer_icon.42fbabbd.svg\";","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport { forwardRef } from 'react';\n\nconst Transition = forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport const MoreInfoDialog = (props: {\n  content: string;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}) => {\n  const { content, open, setOpen } = props;\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        scroll=\"paper\"\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">\n          {'More Info About the Build'}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText\n            id=\"alert-dialog-slide-description\"\n            style={{ whiteSpace: 'pre-line' }}\n          >\n            {content}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport engineerIcon from '../../assets/Engineer_icon.svg';\nimport './buildCard.css';\nimport { Chip } from '@material-ui/core';\nimport { getShipInfofromID } from '../../functions/getShipInfo';\nimport { IShipInfo } from '../../models/shipInfo';\nimport { ShipSize } from '../../models';\nimport { MoreInfoDialog } from '../moreInfoDialog';\n\ninterface IBuildItemProps {\n  id: number;\n  author: string;\n  specializations: string[];\n  engLevel: number;\n  description: string;\n  buildLink: string;\n  guardian: boolean;\n  powerplay: boolean;\n  beginner: boolean;\n  moreInfo?: string;\n}\n\nexport const BuildCard = (props: IBuildItemProps) => {\n  const [shipInfo, setShipInfo] = useState<IShipInfo>();\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n\n  useEffect(() => setShipInfo(getShipInfofromID(props.id)), [props.id]);\n\n  const handleShowDialog = () => {\n    setShowDialog(true);\n  };\n\n  return (\n    <Card variant=\"outlined\" className=\"card\">\n      {shipInfo && (\n        <CardMedia\n          className=\"shipImg\"\n          image={shipInfo?.shipImg}\n          title={shipInfo?.name}\n        />\n      )}\n      <CardContent className=\"cardContent\">\n        <Typography>{props.description}</Typography>\n        <Divider />\n        <div className=\"shipName\">\n          <Typography>{shipInfo?.name} </Typography>\n          <div className=\"spacer\" />\n          {shipInfo && <Typography>{ShipSize[shipInfo.size]}</Typography>}\n        </div>\n        {shipInfo?.requires && (\n          <Typography>Requirement: {shipInfo.requires}</Typography>\n        )}\n        <TagGroup\n          tags={props.specializations}\n          guardian={props.guardian}\n          powerplay={props.powerplay}\n          beginner={props.beginner}\n        />\n        <Divider />\n        <EngIcons engLevel={props.engLevel} />\n        <Divider />\n        <Typography>Author: {props.author}</Typography>\n        <CardActions className=\"cardActions\">\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            href={props.buildLink}\n            target=\"_blank\"\n          >\n            View Build\n          </Button>{' '}\n          {props.moreInfo && (\n            <>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleShowDialog}\n              >\n                More Info\n              </Button>\n              <MoreInfoDialog\n                content={props.moreInfo!}\n                open={showDialog}\n                setOpen={setShowDialog}\n              />\n            </>\n          )}\n        </CardActions>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst EngIcons = (props: { engLevel: number }) => {\n  let icons: JSX.Element[] = [];\n  if (props.engLevel > 3 || props.engLevel < 1) {\n    return (\n      <div className=\"engineering\">\n        <p>Engineering Level: None</p>\n      </div>\n    );\n  } else {\n    for (let i = 1; i <= props.engLevel; i++) {\n      icons = [\n        ...icons,\n        <img src={engineerIcon} key={i} alt=\"Engineering Icon\" />,\n      ];\n    }\n    return (\n      <div className=\"engineering\">\n        <p>\n          <span>Engineering Level:</span> {icons.map((icon) => icon)}\n        </p>\n      </div>\n    );\n  }\n};\n\nconst TagGroup = (props: {\n  tags: string[];\n  guardian: boolean;\n  powerplay: boolean;\n  beginner: boolean;\n}) => {\n  return (\n    <div className=\"chips\">\n      {props.tags.map((v) => (\n        <Chip label={v} key={v} />\n      ))}\n      {props.guardian && <Chip label=\"Guardian\" key=\"guardian\" />}\n      {props.powerplay && <Chip label=\"PowerPlay\" key=\"powerplay\" />}\n      {props.beginner && <Chip label=\"Beginner\" key=\"beginner\" />}\n    </div>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { Loading } from '../../../../components';\nimport { filterShipBuilds } from '../../functions/filterShipBuilds';\nimport { getShipInfofromID } from '../../functions/getShipInfo';\nimport { sortItems } from '../../functions/sort';\nimport { useShipBuilds } from '../../hooks/useShipBuilds';\nimport { IBuildInfo, IQuery } from '../../models';\nimport { BuildCard } from './buildCard';\nimport './buildList.css';\n\nexport const BuildList = (props: { buildQuery: IQuery | undefined }) => {\n  const [queriedBuilds, setQueriedBuilds] = useState<IBuildInfo[]>();\n  const { buildQuery } = props;\n  const { loading, shipBuilds } = useShipBuilds();\n\n  let filterBuilds = useCallback(() => {\n    if (loading) {\n      return;\n    }\n    const mappedBuilds = shipBuilds?.map((v) => {\n      const shipInfo = getShipInfofromID(v.ship)!;\n      const size = shipInfo?.size;\n      const newBuild: IBuildInfo = { ...v, size };\n      return newBuild;\n    });\n\n    const filtered = filterShipBuilds(mappedBuilds, buildQuery);\n    const sorted = sortItems(filtered!, 'ship');\n    setQueriedBuilds(sorted);\n  }, [loading, shipBuilds, buildQuery]);\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    filterBuilds();\n  }, [loading, filterBuilds]);\n\n  return (\n    <div className=\"builds\">\n      {loading ? (\n        <Loading />\n      ) : (\n        queriedBuilds?.map((ship) => {\n          return (\n            <BuildCard\n              key={ship._id}\n              id={ship.ship}\n              author={ship.author}\n              specializations={ship.specializations}\n              engLevel={ship.engLevel}\n              description={ship.description}\n              buildLink={ship.buildLink}\n              guardian={ship.guardian}\n              powerplay={ship.powerplay}\n              beginner={ship.beginner}\n              moreInfo={ship.moreInfo}\n            />\n          );\n        })\n      )}\n    </div>\n  );\n};\n","import { IBuildInfo, IQuery } from '../models';\n\nexport const filterShipBuilds = (\n  shipBuilds: IBuildInfo[] | undefined,\n  query: IQuery | undefined\n) => {\n  if (shipBuilds && query) {\n    let newList = shipBuilds;\n    // ship type\n    if (query.ship !== null) {\n      newList = newList.filter((build) => build.ship === query.ship);\n    }\n    // ship size\n    if (query.size !== null) {\n      newList = newList.filter((build) => build.size === query.size);\n    }\n    // Engineering\n    if (query.engLevel !== null) {\n      newList = newList.filter((build) => build.engLevel === query.engLevel);\n    }\n    // Specializations\n    if (query.specialties.length > 0) {\n      console.log(query.specialties);\n      let tempList: IBuildInfo[] = [];\n      for (const specialty of query.specialties) {\n        if (tempList.length > 0) {\n          tempList = tempList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        } else {\n          tempList = newList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        }\n      }\n      newList = tempList;\n    }\n    // Guardian\n    if (query.other.guardian !== null) {\n      const val = query.other.guardian === 1 ? true : false;\n      newList = newList.filter((build) => build.guardian === val);\n    }\n    // PowerPlay\n    if (query.other.powerplay !== null) {\n      const val = query.other.powerplay === 1 ? true : false;\n      newList = newList.filter((build) => build.powerplay === val);\n    }\n    // Beginner\n    if (query.other.beginner !== null) {\n      const val = query.other.beginner === 1 ? true : false;\n      newList = newList.filter((build) => build.beginner === val);\n    }\n    return newList;\n  }\n};\n","import { Typography } from '@material-ui/core';\nimport { ToggleButton } from '@material-ui/lab';\nimport { ShipSpecialty } from '../../models/shipSpecialty';\n\nexport const QuerySpecialization = (props: {\n  selectedSpecialties: string[];\n  setSpecialties: React.Dispatch<React.SetStateAction<string[]>>;\n}) => {\n  const { selectedSpecialties, setSpecialties } = props;\n\n  const handleSpecialties = (special: string) => {\n    let newSpecials: string[] = [];\n    if (selectedSpecialties.includes(special)) {\n      newSpecials = selectedSpecialties.filter((v) => v !== special);\n    } else {\n      newSpecials = [...selectedSpecialties, special];\n    }\n    setSpecialties(newSpecials);\n  };\n\n  return (\n    <div className=\"specializationQuery\">\n      <h3 className=\"queryHeader\">Ship Specializations</h3>\n\n      <Typography>\n        Select specializations that the ship should fulfill.\n      </Typography>\n\n      <div className=\"specialButtons\">\n        {getSpecialties().map((special) => (\n          <ToggleButton\n            value={special}\n            key={special}\n            selected={selectedSpecialties.includes(special)}\n            onChange={() => handleSpecialties(special)}\n          >\n            {special}\n          </ToggleButton>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst getSpecialties = (): string[] => {\n  let specialties: string[] = [];\n\n  for (const speciality in ShipSpecialty) {\n    specialties = [\n      ...specialties,\n      ShipSpecialty[speciality as keyof typeof ShipSpecialty],\n    ];\n  }\n  return specialties;\n};\n","import { Autocomplete } from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport { sortItems } from '../functions/sort';\nimport { ChangeEvent } from 'react';\nimport { IShipInfo } from '../models';\nimport { useShips } from '../hooks/useShips';\n\nconst findShipName = (ships: IShipInfo[], shipID: number | null) => {\n  if (shipID === null) {\n    return null;\n  }\n  const shipName = ships.find((x) => x.id === shipID);\n  return shipName;\n};\n\ninterface IShipAutocompleteProps {\n  shipType: number | null;\n  handleShipChange: (event: ChangeEvent<{}>, value: IShipInfo | null) => void;\n}\n\nexport const ShipAutocomplete = (props: IShipAutocompleteProps) => {\n  const { shipType, handleShipChange } = props;\n  const ships = useShips();\n\n  return (\n    <Autocomplete\n      id=\"shipType\"\n      options={sortItems(ships, 'name')}\n      autoHighlight\n      getOptionLabel={(option) => option.name}\n      renderOption={(option) => (\n        <>\n          <span>{option.name}</span>\n        </>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Ship Type\"\n          variant=\"outlined\"\n          inputProps={{\n            ...params.inputProps,\n            autocomplete: 'new-password',\n          }}\n        />\n      )}\n      value={findShipName(ships, shipType)}\n      onChange={handleShipChange}\n    />\n  );\n};\n","import Ships from '../assets/shipMap.json';\nimport { IShipInfo } from '../models';\n\nexport const useShips = () => {\n  const ships: IShipInfo[] = Ships;\n  return ships;\n};\n","import { Tooltip } from '@material-ui/core';\n\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { ChangeEvent } from 'react';\nimport { IShipInfo } from '../../models';\nimport { ShipAutocomplete } from '../shipAutocomplete';\n\nexport const QueryShip = (props: {\n  shipSize: number | null;\n  setShipSize: React.Dispatch<React.SetStateAction<number | null>>;\n  shipType: number | null;\n  setShipType: React.Dispatch<React.SetStateAction<number | null>>;\n}) => {\n  const { shipType, setShipType, shipSize, setShipSize } = props;\n\n  const handleShipSizeChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setShipType(null);\n    setShipSize(newValue);\n  };\n\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value!.id;\n    setShipSize(ship);\n  };\n\n  return (\n    <div className=\"shipQuery\">\n      <h3 className=\"queryHeader\">Ship Type and Size</h3>\n      <div className=\"shipQuerySection\">\n        <div className=\"shipTypeQuery\">\n          <ShipAutocomplete\n            shipType={shipType}\n            handleShipChange={handleShipChange}\n          />\n        </div>\n        <div className=\"shipSizeQuery\">\n          <Tooltip\n            title=\"What's the size of the ship you're looking for?\"\n            arrow\n          >\n            <ToggleButtonGroup\n              value={shipSize}\n              exclusive\n              onChange={handleShipSizeChange}\n            >\n              <ToggleButton value={1}>Small</ToggleButton>\n              <ToggleButton value={2}>Medium</ToggleButton>\n              <ToggleButton value={3}>Large</ToggleButton>\n            </ToggleButtonGroup>\n          </Tooltip>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { Tooltip } from '@material-ui/core';\nimport BlockIcon from '@material-ui/icons/Block';\nimport engineerIcon from '../assets/Engineer_icon.svg';\n\ninterface IEngToggleGroupProps {\n  handleEngLevelChange: (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => void;\n  engLevel: number | null;\n}\n\nexport const EngToggleGroup = (props: IEngToggleGroupProps) => {\n  const { engLevel, handleEngLevelChange } = props;\n\n  return (\n    <ToggleButtonGroup\n      value={engLevel}\n      exclusive\n      onChange={handleEngLevelChange}\n    >\n      <ToggleButton value={0}>\n        <Tooltip title=\"No Engineering\" arrow>\n          <div className=\"engButton\">\n            <BlockIcon />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={1}>\n        <Tooltip title=\"Simple Engineering\" arrow>\n          <div className=\"engButton\">\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={2}>\n        <Tooltip title=\"Moderate Engineering\" arrow>\n          <div className=\"engButton\">\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={3}>\n        <Tooltip title=\"End-Game/Extreme Engineering\" arrow>\n          <div className=\"engButton\">\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n","import { Typography } from '@material-ui/core';\nimport { SetStateAction, MouseEvent } from 'react';\nimport { EngToggleGroup } from '../engToggleGroup';\n\nexport const QueryEngineering = (props: {\n  engLevel: number | null;\n  setEngLevel: React.Dispatch<SetStateAction<number | null>>;\n}) => {\n  const { engLevel, setEngLevel } = props;\n\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setEngLevel(newValue);\n  };\n\n  return (\n    <div className=\"engineeringQuery\">\n      <h3 className=\"queryHeader\">Ship Engineering Level</h3>\n      <Typography>\n        Select Engineering level ranging from None to Max Engineering.\n      </Typography>\n      <EngToggleGroup\n        engLevel={engLevel}\n        handleEngLevelChange={handleEngLevelChange}\n      />\n    </div>\n  );\n};\n","import { Tooltip } from '@material-ui/core';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\n\nimport { OtherFilters } from '../../models/otherFilters';\nimport BlockIcon from '@material-ui/icons/Block';\nimport CheckIcon from '@material-ui/icons/Check';\n\nexport const QueryOther = (props: {\n  other: OtherFilters;\n  setOther: React.Dispatch<React.SetStateAction<OtherFilters>>;\n}) => {\n  const { other, setOther } = props;\n\n  const handleGuardianChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther({ ...other, guardian: newValue });\n  };\n  const handlePowerPlayChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther({ ...other, powerplay: newValue });\n  };\n  const handleBeginnerChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther({ ...other, beginner: newValue });\n  };\n\n  return (\n    <div className=\"otherQuery\">\n      <h3 className=\"queryHeader\">Other Filters</h3>\n      <div className=\"otherButtons\">\n        <Tooltip title=\"Should the build have Guardian components?\" arrow>\n          <div className=\"guardian\">\n            <label>Guardian</label>\n            <ToggleButtonGroup\n              value={other.guardian}\n              exclusive\n              onChange={handleGuardianChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Does the build have Power Play modules?\" arrow>\n          <div className=\"powerplay\">\n            <label>Power Play</label>\n            <ToggleButtonGroup\n              value={other.powerplay}\n              exclusive\n              onChange={handlePowerPlayChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Is this build easy to achieve early-game?\">\n          <div className=\"beginner\">\n            <label>Beginner</label>\n            <ToggleButtonGroup\n              value={other.beginner}\n              exclusive\n              onChange={handleBeginnerChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { IQuery } from '../../models';\n\nimport './query.css';\n\nimport { Button, Paper } from '@material-ui/core';\nimport { QuerySpecialization } from './querySpecialities';\nimport { QueryShip } from './queryShip';\nimport { QueryEngineering } from './queryEngineering';\nimport { QueryOther } from './queryOther';\nimport { OtherFilters } from '../../models/otherFilters';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nconst useUrlQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\nexport const Query = (props: { queryUpdate: (query: IQuery) => void }) => {\n  const [shipType, setShipType] = useState<number | null>(null);\n  const [shipSize, setShipSize] = useState<number | null>(null);\n  const [engLevel, setEngLevel] = useState<number | null>(null);\n  const [selectedSpecialties, setSpecialties] = useState<string[]>([]);\n  const [other, setOther] = useState<OtherFilters>({\n    guardian: null,\n    powerplay: null,\n    beginner: null,\n  });\n  let query = useUrlQuery();\n\n  useEffect(() => {\n    const queryParam = query.get('beginner');\n    if (queryParam === 'true') {\n      setOther({ ...other, beginner: 1 });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const { queryUpdate } = props;\n    const query: IQuery = {\n      ship: shipType,\n      size: shipSize,\n      engLevel,\n      specialties: selectedSpecialties,\n      other,\n    };\n    queryUpdate(query);\n    // Disable eslint. Props is not missing from dependencies.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shipType, shipSize, engLevel, selectedSpecialties, other]);\n\n  const resetQueries = () => {\n    setShipType(null);\n    setShipSize(null);\n    setEngLevel(null);\n    setSpecialties([]);\n    setOther({\n      guardian: null,\n      powerplay: null,\n      beginner: null,\n    });\n  };\n\n  return (\n    <Paper className=\"query\">\n      <QuerySpecialization\n        selectedSpecialties={selectedSpecialties}\n        setSpecialties={setSpecialties}\n      />\n      <QueryShip\n        shipType={shipType}\n        setShipType={setShipType}\n        shipSize={shipSize}\n        setShipSize={setShipSize}\n      />\n      <QueryEngineering engLevel={engLevel} setEngLevel={setEngLevel} />\n      <QueryOther other={other} setOther={setOther} />\n      <div className=\"reset\">\n        <Button\n          onClick={resetQueries}\n          color=\"primary\"\n          variant=\"outlined\"\n          className=\"resetButton\"\n        >\n          Reset Selections\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          component={NavLink}\n          to=\"/information/builds/add\"\n        >\n          Add Build\n        </Button>\n      </div>\n    </Paper>\n  );\n};\n","import { gql, useMutation } from '@apollo/client';\nimport { IBuildInfoInsert } from '../models/buildInfoInsert';\n\nexport const useAddBuild = () => {\n  const [addBuildMutation] = useMutation<IBuildInfoInsert>(gql`\n    mutation AddBuild($build: ShipBuildInsertInput!) {\n      addedBuild: insertOneShipBuild(data: $build) {\n        _id\n        author\n        beginner\n        buildLink\n        description\n        engLevel\n        guardian\n        moreInfo\n        powerplay\n        ship\n        specializations\n        id\n      }\n    }\n  `);\n\n  const addShipBuild = async (build: IBuildInfoInsert) => {\n    const addedBuild = await addBuildMutation({\n      variables: {\n        build: {\n          ...build,\n        },\n      },\n    });\n    return addedBuild;\n  };\n\n  return addShipBuild;\n};\n","import { TextField } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildAddText {\n  id: string;\n  label: string;\n  isMultiline: boolean;\n  value: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\nexport const BuildAddText = (props: IBuildAddText) => {\n  const { id, label, value, onChange, isMultiline } = props;\n  return (\n    <TextField\n      variant=\"outlined\"\n      id={id}\n      label={label}\n      multiline={isMultiline}\n      value={value}\n      onChange={onChange}\n    />\n  );\n};\n","import { FormControlLabel, Checkbox } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildCheckBoxProps {\n  label: string;\n  name: string;\n  checked: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n}\nexport const BuildCheckBox = (props: IBuildCheckBoxProps) => {\n  const { label, name, checked, onChange } = props;\n  return (\n    <FormControlLabel\n      label={label}\n      control={<Checkbox name={name} checked={checked} onChange={onChange} />}\n    />\n  );\n};\n","import { Button, FormGroup, makeStyles } from '@material-ui/core';\nimport { ChangeEvent, MouseEvent, useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { processJSONBuild } from '../../functions/processJSONBuild';\nimport { getShipInfofromName } from '../../functions/getShipInfo';\nimport { useAddBuild } from '../../hooks/useAddBuild';\nimport { IBuildInfoInsert } from '../../models/buildInfoInsert';\nimport { ObjectId } from 'bson';\nimport { QuerySpecialization } from '../query/querySpecialities';\nimport { useSnackbar } from 'notistack';\nimport { EngToggleGroup } from '../engToggleGroup';\nimport { BuildAddText } from './buildAddText';\nimport { IShipInfo } from '../../models';\nimport { ShipAutocomplete } from '../shipAutocomplete';\nimport { BuildCheckBox } from './buildCheckBox';\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: 'center',\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n    rowGap: '10px',\n    width: '90%',\n    margin: 'auto',\n  },\n});\n\nexport const BuildAdd = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [jsonBuild, setJsonBuild] = useState('');\n  const [buildInfo, setBuildInfo] = useState<IBuildInfoInsert>(DEFAULTBUILD);\n  const [specialties, setSpecialties] = useState<string[]>([]);\n  const addBuild = useAddBuild();\n\n  useEffect(() => {\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, specializations: specialties };\n    });\n  }, [specialties]);\n\n  const handleJSONChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setJsonBuild(event.target.value);\n    const {\n      buildName,\n      shipName,\n      guardian,\n      powerplay,\n      engineering,\n      url,\n    } = processJSONBuild(event.target.value);\n    const engLevel = engineering ? 1 : 0;\n    const shipInfo = getShipInfofromName(shipName)!;\n    const _id = buildInfo._id;\n    const info: IBuildInfoInsert = {\n      _id,\n      id: 0,\n      description: buildName,\n      guardian,\n      powerplay,\n      buildLink: url,\n      ship: shipInfo.id,\n      author: '',\n      specializations: [],\n      engLevel,\n      beginner: false,\n      moreInfo: '',\n    };\n    setBuildInfo(info);\n  };\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n\n    switch (event.target.id) {\n      case 'description':\n        setBuildInfo({ ...buildInfo, description: value });\n        break;\n      case 'moreInfo':\n        setBuildInfo({ ...buildInfo, moreInfo: value });\n        break;\n      case 'buildLink':\n        setBuildInfo({ ...buildInfo, buildLink: value });\n        break;\n      case 'author':\n        setBuildInfo({ ...buildInfo, author: value });\n        break;\n      default:\n        break;\n    }\n  };\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value!.id;\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, ship };\n    });\n  };\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    engLevel: number\n  ) => {\n    setBuildInfo({ ...buildInfo, engLevel });\n  };\n  const handleOtherChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setBuildInfo({ ...buildInfo, [event.target.name]: event.target.checked });\n  };\n  const handleSubmit = async () => {\n    try {\n      await addBuild(buildInfo);\n      enqueueSnackbar('Build Successfully Submitted', { variant: 'success' });\n      setBuildInfo(DEFAULTBUILD);\n      setSpecialties([]);\n      setJsonBuild('');\n    } catch (e) {\n      enqueueSnackbar('Submit Failed', { variant: 'error' });\n      console.error(e);\n    }\n  };\n\n  const textFields = [\n    {\n      id: 'json',\n      label: 'Exported JSON',\n      isMultiline: true,\n      value: jsonBuild,\n      onChange: handleJSONChange,\n    },\n    {\n      id: 'description',\n      label: 'Title/Description',\n      isMultiline: false,\n      value: buildInfo.description,\n      onChange: handleTextChange,\n    },\n    {\n      id: 'moreInfo',\n      label: 'More Information',\n      isMultiline: true,\n      value: buildInfo.moreInfo,\n      onChange: handleTextChange,\n    },\n    {\n      id: 'buildLink',\n      label: 'Build Link - Full',\n      isMultiline: false,\n      value: buildInfo.buildLink,\n      onChange: handleTextChange,\n    },\n    {\n      id: 'author',\n      label: 'Author',\n      isMultiline: false,\n      value: buildInfo.author,\n      onChange: handleTextChange,\n    },\n  ];\n\n  const checkFields = [\n    { label: 'Guardian', name: 'guardian', checked: buildInfo.guardian },\n    { label: 'PowerPlay', name: 'powerplay', checked: buildInfo.powerplay },\n    { label: 'Beginner', name: 'beginner', checked: buildInfo.beginner },\n  ];\n\n  return (\n    <div className={classes.root}>\n      <Button\n        to=\"/information/builds\"\n        component={NavLink}\n        color=\"secondary\"\n        variant=\"outlined\"\n      >\n        Return to builds\n      </Button>\n      {textFields.map((field) => (\n        <BuildAddText {...field} />\n      ))}\n      <ShipAutocomplete\n        shipType={buildInfo.ship}\n        handleShipChange={handleShipChange}\n      />\n      <QuerySpecialization\n        selectedSpecialties={buildInfo.specializations}\n        setSpecialties={setSpecialties}\n      />\n      <EngToggleGroup\n        engLevel={buildInfo.engLevel}\n        handleEngLevelChange={handleEngLevelChange}\n      />\n      <FormGroup row>\n        {checkFields.map((check) => (\n          <BuildCheckBox {...check} onChange={handleOtherChange} />\n        ))}\n      </FormGroup>\n      <Button onClick={handleSubmit}>Submit Build</Button>\n    </div>\n  );\n};\n\nconst DEFAULTBUILD: IBuildInfoInsert = {\n  description: '',\n  guardian: false,\n  powerplay: false,\n  buildLink: '',\n  ship: 0,\n  moreInfo: '',\n  _id: new ObjectId(),\n  id: 0,\n  author: '',\n  specializations: [],\n  engLevel: 0,\n  beginner: false,\n};\n","import { ICoriolisLoadout } from '../models/coriolis';\n\nexport const processJSONBuild = (\n  json: string\n): {\n  buildName: string;\n  shipName: string;\n  guardian: boolean;\n  powerplay: boolean;\n  engineering: boolean;\n  url: string;\n} => {\n  const build: ICoriolisLoadout = JSON.parse(json);\n\n  const buildName = build.name;\n  const shipName = build.ship;\n  const url = build.references[0].url ?? '';\n  let guardian = false;\n  let powerplay = false;\n  let engineering = false;\n\n  const components = build.components;\n  const core = components.standard;\n  const hardpoints = components.hardpoints;\n  const internals = components.internal;\n\n  // Check for Guardian\n  const ppName = (core.powerPlant.name as string) ?? '';\n  const pdName = (core.powerDistributor.name as string) ?? '';\n  const guardianHardPoints = hardpoints.find((x) =>\n    x?.group.toLowerCase().startsWith('guardian')\n  );\n  const guardianInternals = internals.find((x) =>\n    x?.group.toLowerCase().startsWith('guardian')\n  );\n  if (\n    guardian === false &&\n    (ppName.toLowerCase().startsWith('guardian') ||\n      pdName.toLowerCase().startsWith('guardian') ||\n      guardianHardPoints ||\n      guardianInternals)\n  ) {\n    guardian = true;\n  }\n\n  // Check for PowerPlay\n  const powerplayWeaponNames = [\n    'disruptor',\n    'imperial hammer',\n    'pack-hound',\n    'mining lance',\n    'enforcer',\n    'cytoscrambler',\n    'retributor',\n    'advanced plasma accelerator',\n    'pacifier',\n    'rocket propelled fsd disruptor',\n  ];\n  const powerplayInternals = internals.find((x) =>\n    x?.group.toLowerCase().startsWith('prismatic')\n  );\n  if (powerplay === false && powerplayInternals) {\n    powerplay = true;\n  }\n  powerplayWeaponNames.forEach((x) => {\n    if (powerplay === false) {\n      const powerplayHardpoint = hardpoints.find(\n        (hp) => hp?.name?.toLowerCase() === x.toLowerCase()\n      );\n      powerplay = powerplayHardpoint ? true : false;\n    }\n  });\n\n  // Check for engineering\n  const weaponEng = hardpoints.filter((hp) => hp?.blueprint);\n  const internalEng = internals.filter((i) => i?.blueprint);\n  const ppEng = core.powerPlant.blueprint;\n  const thrustEng = core.thrusters.blueprint;\n  const fsdEng = core.frameShiftDrive.blueprint;\n  const lifeEng = core.lifeSupport.blueprint;\n  const pdEng = core.powerDistributor.blueprint;\n  const sensorEng = core.sensors.blueprint;\n  if (\n    engineering === false &&\n    (weaponEng.length > 0 ||\n      internalEng.length > 0 ||\n      ppEng ||\n      thrustEng ||\n      fsdEng ||\n      lifeEng ||\n      pdEng ||\n      sensorEng)\n  ) {\n    engineering = true;\n  }\n\n  return { buildName, shipName, guardian, powerplay, engineering, url };\n};\n","import { Fab, Typography, useMediaQuery } from '@material-ui/core';\nimport { useRef, useState } from 'react';\nimport { BuildList } from './builds/buildList';\nimport { IQuery } from '../models';\nimport { Query } from './query/query';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport './uscBuildSystem.css';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { BuildAdd } from './builds/buildAdd';\n\nexport const USCBuildSystem = () => {\n  const { path } = useRouteMatch();\n  const [query, setQuery] = useState<IQuery>();\n  const buildRef = useRef<HTMLDivElement>(null);\n  const isMobile = useMediaQuery('(max-width:1000px)');\n\n  const handleQuery = (query: IQuery) => {\n    setQuery(query);\n  };\n  const handleFab = () => {\n    if (buildRef.current) {\n      buildRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <Switch>\n      <Route path={path} exact>\n        <section className=\"selection\">\n          <Typography variant=\"h3\">Ship Build Archive</Typography>\n          <Query queryUpdate={handleQuery} />\n          <div ref={buildRef}>\n            <BuildList buildQuery={query} />\n          </div>\n          {isMobile && (\n            <div className=\"fab\">\n              <Fab color=\"primary\" className=\"fab\" onClick={handleFab}>\n                <ArrowDownwardIcon />\n              </Fab>\n            </div>\n          )}\n        </section>\n      </Route>\n      <Route path={`${path}/add`}>\n        <BuildAdd />\n      </Route>\n    </Switch>\n  );\n};\n"],"sourceRoot":""}