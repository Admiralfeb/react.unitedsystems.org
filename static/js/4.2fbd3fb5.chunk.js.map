{"version":3,"sources":["app/information/ship-builds/models/index.ts","app/information/ship-builds/models/shipSize.ts","app/information/ship-builds/models/shipSpecialty.ts","app/information/ship-builds/functions/getShipInfo.ts","app/information/ship-builds/components/query/querySpecialities.tsx","app/information/ship-builds/assets/Engineer_icon.svg","app/information/ship-builds/components/engToggleGroup.tsx","app/information/ship-builds/components/builds/buildAddText.tsx","app/information/ship-builds/components/shipAutocomplete.tsx","app/information/ship-builds/hooks/useShipMap.ts","app/information/ship-builds/components/builds/buildCheckBox.tsx","app/information/ship-builds/hooks/useShipBuildMutations.ts","app/information/ship-builds/hooks/useShipBuilds.ts","app/information/ship-builds/components/builds/buildAdd.tsx","app/information/ship-builds/functions/processJSONBuild.ts","app/information/ship-builds/components/builds/engIcons.tsx","app/information/ship-builds/components/builds/tagGroup.tsx","app/information/ship-builds/components/builds/buildCard.tsx","app/information/ship-builds/components/builds/buildDetailBuilds.tsx","app/information/ship-builds/components/builds/buildDetail.tsx","app/information/ship-builds/components/builds/buildList.tsx","app/information/ship-builds/functions/filterShipBuilds.ts","app/information/ship-builds/components/query/queryShip.tsx","app/information/ship-builds/components/query/queryEngineering.tsx","app/information/ship-builds/components/query/queryOther.tsx","app/information/ship-builds/components/query/query.tsx","app/information/ship-builds/hooks/useURLQuery.ts","app/information/ship-builds/components/queryandBuildList.tsx","app/information/ship-builds/components/uscBuildSystem.tsx"],"names":["ShipSize","ShipSpecialty","getShipInfofromID","shipID","shipMap","find","x","shipId","QuerySpecialization","props","selectedSpecialties","setSpecialties","className","Typography","getSpecialties","map","special","ToggleButton","value","selected","includes","onChange","newSpecials","filter","v","handleSpecialties","specialties","speciality","EngToggleGroup","engLevel","handleEngLevelChange","ToggleButtonGroup","exclusive","Tooltip","title","arrow","src","engineerIcon","alt","BuildAddText","id","label","isMultiline","disabled","TextField","variant","multiline","rowsMax","findShipName","ships","ShipAutocomplete","shipType","handleShipChange","Ships","Autocomplete","options","sortItems","autoHighlight","getOptionLabel","option","name","renderOption","renderInput","params","inputProps","autocomplete","BuildCheckBox","checked","FormControlLabel","control","Checkbox","AddBuildMutation","ReplaceBuildMutation","useAddBuild","useMutation","addBuildMutation","build","a","variables","addedBuild","useReplaceBuild","replaceBuildMutation","buildID","_id","updatedBuild","AllShipBuildsv2s","useShipBuilds","useAllShipBuilds","shipBuilds","loading","addBuild","replaceBuild","useQuery","data","error","Error","message","shipBuildsv2s","useStyles","makeStyles","root","textAlign","display","gridTemplate","rowGap","width","margin","BuildAdd","classes","enqueueSnackbar","useSnackbar","useState","jsonBuild","setJsonBuild","DEFAULTBUILD","buildInfo","setBuildInfo","useEffect","specializations","handleTextChange","event","target","info","description","buildLink","author","variants","split","s","trim","related","handleOtherChange","handleSubmit","ObjectId","console","textFields","json","JSON","parse","buildName","shipName","ship","url","references","guardian","powerplay","engineering","components","core","standard","hardpoints","internals","internal","ppName","powerPlant","pdName","powerDistributor","guardianHardPoints","group","toLowerCase","startsWith","guardianInternals","powerplayInternals","forEach","powerplayHardpoint","hp","weaponEng","blueprint","internalEng","i","ppEng","thrustEng","thrusters","fsdEng","frameShiftDrive","lifeEng","lifeSupport","pdEng","sensorEng","sensors","length","hasGuardian","hasPowerplay","processJSONBuild","shipInfo","getShipInfofromName","isBeginner","isVariant","checkFields","Button","to","component","NavLink","color","field","_","FormGroup","row","check","onClick","EngIcons","icons","icon","TagGroup","Chip","BuildCard","shipBuild","useShipIdfromMap","Card","CardMedia","image","shipImg","CardContent","Divider","size","requires","CardActions","href","theme","paper","marginBottom","flexWrap","flexDirection","justifyContent","textCenter","BuildDetailBuilds","buildIDs","padding","img","breakpoints","down","flexDown","flexAcross","spacer","flexGrow","gridDown","gap","BuildDetail","useParams","setShipInfo","foundBuild","useMemo","Paper","shipReview","orientation","flexItem","style","whiteSpace","plugins","gfm","children","BuildList","queriedBuilds","setQueriedBuilds","buildQuery","filterBuilds","useCallback","log","filtered","query","newList","tempList","specialty","other","val","beginner","filterShipBuilds","sorted","QueryShip","setShipType","shipSize","setShipSize","newValue","QueryEngineering","setEngLevel","QueryOther","setOther","Query","URLSearchParams","useLocation","search","get","queryUpdate","QueryandBuildList","setQuery","buildRef","useRef","isMobile","useMediaQuery","ref","Fab","current","scrollIntoView","behavior","USCBuildSystem","path","useRouteMatch","exact"],"mappings":"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","file":"static/js/4.2fbd3fb5.chunk.js","sourcesContent":["export * from './buildInfo';\nexport * from './query';\nexport * from './shipInfo';\nexport * from './shipSize';\nexport * from './tag';\n","export enum ShipSize {\n  'S' = 1,\n  'M',\n  'L',\n}\n","export enum ShipSpecialty {\n  exp = 'Exploration',\n  jump = 'Jump Ship',\n  hge = 'HGE Farming',\n  cargo = 'Cargo',\n  mining = 'Miner',\n  pve = 'Combat - PvE',\n  pvp = 'Combat - PvP',\n  ax = 'Combat - Anti-Xeno',\n  racing = 'Racing',\n  multi = 'Multi-Purpose',\n}\n","import shipMap from '../assets/shipMap.json';\nimport { IShipInfo } from '../models/shipInfo';\n\nexport const getShipInfofromID = (shipID: string): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find((x) => x.shipId === shipID);\n  return ship;\n};\nexport const getShipInfofromName = (\n  shipName: string\n): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find(\n    (x) => x.name.toLowerCase() === shipName.toLowerCase()\n  );\n  return ship;\n};\n","import { Typography } from '@material-ui/core';\nimport { ToggleButton } from '@material-ui/lab';\nimport { ShipSpecialty } from '../../models/shipSpecialty';\n\nexport const QuerySpecialization = (props: {\n  selectedSpecialties: string[];\n  setSpecialties: React.Dispatch<React.SetStateAction<string[]>>;\n}) => {\n  const { selectedSpecialties, setSpecialties } = props;\n\n  const handleSpecialties = (special: string) => {\n    let newSpecials: string[] = [];\n    if (selectedSpecialties.includes(special)) {\n      newSpecials = selectedSpecialties.filter((v) => v !== special);\n    } else {\n      newSpecials = [...selectedSpecialties, special];\n    }\n    setSpecialties(newSpecials);\n  };\n\n  return (\n    <div className=\"specializationQuery\">\n      <h3 className=\"queryHeader\">Ship Specializations</h3>\n\n      <Typography>\n        Select specializations that the ship should fulfill.\n      </Typography>\n\n      <div className=\"specialButtons\">\n        {getSpecialties().map((special) => (\n          <ToggleButton\n            value={special}\n            key={special}\n            selected={selectedSpecialties.includes(special)}\n            onChange={() => handleSpecialties(special)}\n          >\n            {special}\n          </ToggleButton>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst getSpecialties = (): string[] => {\n  let specialties: string[] = [];\n\n  for (const speciality in ShipSpecialty) {\n    specialties = [\n      ...specialties,\n      ShipSpecialty[speciality as keyof typeof ShipSpecialty],\n    ];\n  }\n  return specialties;\n};\n","export default __webpack_public_path__ + \"static/media/Engineer_icon.42fbabbd.svg\";","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { Tooltip } from '@material-ui/core';\nimport BlockIcon from '@material-ui/icons/Block';\nimport engineerIcon from '../assets/Engineer_icon.svg';\n\ninterface IEngToggleGroupProps {\n  handleEngLevelChange: (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => void;\n  engLevel: number | null;\n}\n\nexport const EngToggleGroup = (props: IEngToggleGroupProps) => {\n  const { engLevel, handleEngLevelChange } = props;\n\n  return (\n    <ToggleButtonGroup\n      value={engLevel}\n      exclusive\n      onChange={handleEngLevelChange}\n    >\n      <ToggleButton value={0}>\n        <Tooltip title=\"No Engineering\" arrow>\n          <div className=\"engButton\">\n            <BlockIcon />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={1}>\n        <Tooltip title=\"Simple Engineering\" arrow>\n          <div className=\"engButton\">\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={2}>\n        <Tooltip title=\"Moderate Engineering\" arrow>\n          <div className=\"engButton\">\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={3}>\n        <Tooltip title=\"End-Game/Extreme Engineering\" arrow>\n          <div className=\"engButton\">\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n","import { TextField } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildAddText {\n  id: string;\n  label: string;\n  isMultiline: boolean;\n  value: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\nexport const BuildAddText = (props: IBuildAddText) => {\n  const { id, label, value, onChange, isMultiline, disabled } = props;\n  return (\n    <TextField\n      variant=\"outlined\"\n      id={id}\n      label={label}\n      multiline={isMultiline}\n      rowsMax={10}\n      value={value}\n      onChange={onChange}\n      disabled={disabled}\n    />\n  );\n};\n","import { Autocomplete } from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport { sortItems } from '../functions/sort';\nimport { ChangeEvent } from 'react';\nimport { IShipInfo } from '../models';\nimport { useShipMap } from '../hooks/useShipMap';\n\nconst findShipName = (ships: IShipInfo[], shipID: string | null) => {\n  if (shipID === null) {\n    return null;\n  }\n  const shipName = ships.find((x) => x.shipId === shipID);\n  return shipName;\n};\n\ninterface IShipAutocompleteProps {\n  shipType: string | null;\n  handleShipChange: (event: ChangeEvent<{}>, value: IShipInfo | null) => void;\n}\n\nexport const ShipAutocomplete = (props: IShipAutocompleteProps) => {\n  const { shipType, handleShipChange } = props;\n  const ships = useShipMap();\n\n  return (\n    <Autocomplete\n      id=\"shipType\"\n      options={sortItems(ships, 'name')}\n      autoHighlight\n      getOptionLabel={(option) => option.name}\n      renderOption={(option) => (\n        <>\n          <span>{option.name}</span>\n        </>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Ship Type\"\n          variant=\"outlined\"\n          inputProps={{\n            ...params.inputProps,\n            autocomplete: 'new-password',\n          }}\n        />\n      )}\n      value={findShipName(ships, shipType)}\n      onChange={handleShipChange}\n    />\n  );\n};\n","import Ships from '../assets/shipMap.json';\nimport { IShipInfo } from '../models';\n\nexport const useShipMap = () => {\n  const ships: IShipInfo[] = Ships;\n  return ships;\n};\n\nexport const useShipIdfromMap = (shipId: string | undefined) => {\n  if (shipId) {\n    const ships: IShipInfo[] = Ships;\n    const ship = ships.find((x) => x.shipId === shipId);\n    return ship;\n  }\n  return undefined;\n};\n","import { FormControlLabel, Checkbox } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildCheckBoxProps {\n  label: string;\n  name: string;\n  checked: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n  disabled?: boolean;\n}\nexport const BuildCheckBox = (props: IBuildCheckBoxProps) => {\n  const { label, name, checked, onChange, disabled } = props;\n  return (\n    <FormControlLabel\n      label={label}\n      control={\n        <Checkbox\n          name={name}\n          checked={checked}\n          onChange={onChange}\n          disabled={disabled}\n        />\n      }\n    />\n  );\n};\n","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { IBuildInfoInsert } from '../models/buildInfoInsert';\n\nconst AddBuildMutation = loader('../graphql/insertOneShipBuildsv2.gql');\nconst ReplaceBuildMutation = loader('../graphql/replaceOneShipBuildsv2.gql');\n\nexport const useShipBuildMutations = () => {\n  return {\n    addBuild: useAddBuild(),\n    replaceBuild: useReplaceBuild(),\n  };\n};\n\nconst useAddBuild = () => {\n  const [addBuildMutation] = useMutation<IBuildInfoInsert>(AddBuildMutation);\n\n  const addShipBuild = async (build: IBuildInfoInsert) => {\n    const addedBuild = await addBuildMutation({\n      variables: {\n        build: {\n          ...build,\n        },\n      },\n    });\n    return addedBuild;\n  };\n\n  return addShipBuild;\n};\n\nconst useReplaceBuild = () => {\n  const [replaceBuildMutation] = useMutation<IBuildInfoInsert>(\n    ReplaceBuildMutation\n  );\n\n  const replaceShipBuild = async (build: IBuildInfoInsert) => {\n    const updatedBuild = await replaceBuildMutation({\n      variables: {\n        buildID: build._id,\n        build: {\n          ...build,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n\n  return replaceShipBuild;\n};\n","import { useQuery } from '@apollo/client';\nimport { IBuildInfov2 } from '../models';\nimport { loader } from 'graphql.macro';\nimport { useShipBuildMutations } from './useShipBuildMutations';\n\nconst AllShipBuildsv2s = loader('../graphql/allShipBuildsv2s.gql');\n\nexport const useShipBuilds = () => {\n  const { shipBuilds, loading } = useAllShipBuilds();\n  const { addBuild, replaceBuild } = useShipBuildMutations();\n  return { loading, shipBuilds, addBuild, replaceBuild };\n};\n\nconst useAllShipBuilds = () => {\n  const { data, loading, error } = useQuery<{\n    shipBuildsv2s: IBuildInfov2[];\n  }>(AllShipBuildsv2s);\n  if (error) {\n    throw new Error(`Failed to fetch ship builds: ${error.message}`);\n  }\n  const shipBuilds = data?.shipBuildsv2s ?? [];\n\n  return { shipBuilds, loading };\n};\n","import { Button, FormGroup, makeStyles } from '@material-ui/core';\nimport { ChangeEvent, MouseEvent, useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { processJSONBuild } from '../../functions/processJSONBuild';\nimport { getShipInfofromName } from '../../functions/getShipInfo';\nimport { IBuildInfoInsert } from '../../models/buildInfoInsert';\nimport { ObjectId } from 'bson';\nimport { QuerySpecialization } from '../query/querySpecialities';\nimport { useSnackbar } from 'notistack';\nimport { EngToggleGroup } from '../engToggleGroup';\nimport { BuildAddText } from './buildAddText';\nimport { IShipInfo } from '../../models';\nimport { ShipAutocomplete } from '../shipAutocomplete';\nimport { BuildCheckBox } from './buildCheckBox';\nimport { useShipBuilds } from '../../hooks/useShipBuilds';\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: 'center',\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n    rowGap: '10px',\n    width: '90%',\n    margin: 'auto',\n  },\n});\n\nexport const BuildAdd = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [jsonBuild, setJsonBuild] = useState('');\n  const [buildInfo, setBuildInfo] = useState<IBuildInfoInsert>(DEFAULTBUILD);\n  const [specialties, setSpecialties] = useState<string[]>([]);\n  const { addBuild } = useShipBuilds();\n\n  useEffect(() => {\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, specializations: specialties };\n    });\n  }, [specialties]);\n\n  const handleJSONChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setJsonBuild(event.target.value);\n    const {\n      buildName,\n      shipName,\n      hasGuardian,\n      hasPowerplay,\n      engineering,\n      url,\n    } = processJSONBuild(event.target.value);\n    const engLevel = engineering ? 1 : 0;\n    const shipInfo = getShipInfofromName(shipName)!;\n    const _id = buildInfo._id;\n    const info: IBuildInfoInsert = {\n      _id,\n      title: buildName,\n      hasGuardian,\n      hasPowerplay,\n      buildLink: url,\n      shipId: shipInfo.shipId,\n      author: '',\n      specializations: [],\n      engLevel,\n      isBeginner: false,\n      description: '',\n      isVariant: false,\n      variants: [],\n      related: [],\n      jsonBuild: event.target.value,\n    };\n    setBuildInfo(info);\n  };\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n\n    switch (event.target.id) {\n      case 'title':\n        setBuildInfo((info) => {\n          return { ...info, title: value };\n        });\n        break;\n      case 'description':\n        setBuildInfo((info) => {\n          return { ...info, description: value };\n        });\n        break;\n      case 'buildLink':\n        setBuildInfo((info) => {\n          return { ...info, buildLink: value };\n        });\n        break;\n      case 'author':\n        setBuildInfo((info) => {\n          return { ...info, author: value };\n        });\n        break;\n      case 'variants':\n        const variants = value.split(',').map((s) => s.trim());\n        setBuildInfo((info) => {\n          return { ...info, variants: variants };\n        });\n        break;\n      case 'related':\n        const related = value.split(',').map((s) => s.trim());\n        setBuildInfo((info) => {\n          return { ...info, related: related };\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value!.shipId;\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, shipId: ship };\n    });\n  };\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    engLevel: number\n  ) => {\n    setBuildInfo({ ...buildInfo, engLevel });\n  };\n  const handleOtherChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setBuildInfo({ ...buildInfo, [event.target.name]: event.target.checked });\n  };\n  const handleSubmit = async () => {\n    try {\n      await addBuild(buildInfo);\n      enqueueSnackbar('Build Successfully Submitted', { variant: 'success' });\n      setBuildInfo({ ...DEFAULTBUILD, _id: new ObjectId() });\n      setSpecialties([]);\n      setJsonBuild('');\n    } catch (e) {\n      enqueueSnackbar(`Submit Failed: ${e.message}`, { variant: 'error' });\n      console.error(e);\n    }\n  };\n\n  const textFields = [\n    {\n      id: 'json',\n      label: 'Exported JSON',\n      isMultiline: true,\n      value: jsonBuild,\n      onChange: handleJSONChange,\n    },\n    {\n      id: 'title',\n      label: 'Title',\n      isMultiline: false,\n      value: buildInfo.title,\n      onChange: handleTextChange,\n      disabled: true,\n    },\n    {\n      id: 'description',\n      label: 'More Information - Accepts markdown',\n      isMultiline: true,\n      value: buildInfo.description,\n      onChange: handleTextChange,\n    },\n    {\n      id: 'buildLink',\n      label: 'Build Link - Full',\n      isMultiline: false,\n      value: buildInfo.buildLink,\n      onChange: handleTextChange,\n      disabled: true,\n    },\n    // {\n    //   id: 'variant',\n    //   label: 'Variant Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.variants.join(','),\n    //   onChange: handleTextChange,\n    // },\n    // {\n    //   id: 'related',\n    //   label: 'Related Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.related.join(','),\n    //   onChange: handleTextChange,\n    // },\n    {\n      id: 'author',\n      label: 'Author',\n      isMultiline: false,\n      value: buildInfo.author,\n      onChange: handleTextChange,\n    },\n  ];\n\n  const checkFields = [\n    {\n      label: 'Guardian',\n      name: 'hasGuardian',\n      checked: buildInfo.hasGuardian,\n      disabled: true,\n    },\n    {\n      label: 'PowerPlay',\n      name: 'hasPowerplay',\n      checked: buildInfo.hasPowerplay,\n      disabled: true,\n    },\n    { label: 'Beginner', name: 'isBeginner', checked: buildInfo.isBeginner },\n  ];\n\n  return (\n    <div className={classes.root}>\n      <Button\n        to=\"/information/builds\"\n        component={NavLink}\n        color=\"secondary\"\n        variant=\"outlined\"\n      >\n        Return to builds\n      </Button>\n      {textFields.map((field) => (\n        <BuildAddText key={field.id} {...field} />\n      ))}\n      <ShipAutocomplete\n        shipType={buildInfo.shipId}\n        handleShipChange={handleShipChange}\n      />\n      <QuerySpecialization\n        selectedSpecialties={buildInfo.specializations}\n        setSpecialties={setSpecialties}\n      />\n      <EngToggleGroup\n        engLevel={buildInfo.engLevel}\n        handleEngLevelChange={handleEngLevelChange}\n      />\n      <FormGroup row>\n        {checkFields.map((check) => (\n          <BuildCheckBox\n            key={check.name}\n            {...check}\n            onChange={handleOtherChange}\n          />\n        ))}\n      </FormGroup>\n      <Button onClick={handleSubmit} variant=\"outlined\">\n        Submit Build\n      </Button>\n    </div>\n  );\n};\n\nconst DEFAULTBUILD: IBuildInfoInsert = {\n  _id: new ObjectId(),\n  shipId: 'adder',\n  title: '',\n  specializations: [],\n  buildLink: '',\n  engLevel: 0,\n  hasGuardian: false,\n  hasPowerplay: false,\n  isBeginner: false,\n  author: '',\n  isVariant: false,\n  variants: [],\n  related: [],\n  description: '',\n  jsonBuild: '',\n};\n","import { ICoriolisLoadout } from '../models/coriolis';\n\nexport const processJSONBuild = (\n  json: string\n): {\n  buildName: string;\n  shipName: string;\n  hasGuardian: boolean;\n  hasPowerplay: boolean;\n  engineering: boolean;\n  url: string;\n} => {\n  const build: ICoriolisLoadout = JSON.parse(json);\n\n  const buildName = build.name;\n  const shipName = build.ship;\n  const url = build.references[0].url ?? '';\n  let guardian = false;\n  let powerplay = false;\n  let engineering = false;\n\n  const components = build.components;\n  const core = components.standard;\n  const hardpoints = components.hardpoints;\n  const internals = components.internal;\n\n  // Check for Guardian\n  const ppName = (core.powerPlant.name as string) ?? '';\n  const pdName = (core.powerDistributor.name as string) ?? '';\n  const guardianHardPoints = hardpoints.find((x) =>\n    x?.group.toLowerCase().startsWith('guardian')\n  );\n  const guardianInternals = internals.find((x) =>\n    x?.group.toLowerCase().startsWith('guardian')\n  );\n  if (\n    guardian === false &&\n    (ppName.toLowerCase().startsWith('guardian') ||\n      pdName.toLowerCase().startsWith('guardian') ||\n      guardianHardPoints ||\n      guardianInternals)\n  ) {\n    guardian = true;\n  }\n\n  // Check for PowerPlay\n  const powerplayWeaponNames = [\n    'disruptor',\n    'imperial hammer',\n    'pack-hound',\n    'mining lance',\n    'enforcer',\n    'cytoscrambler',\n    'retributor',\n    'advanced plasma accelerator',\n    'pacifier',\n    'rocket propelled fsd disruptor',\n  ];\n  const powerplayInternals = internals.find((x) =>\n    x?.group.toLowerCase().startsWith('prismatic')\n  );\n  if (powerplay === false && powerplayInternals) {\n    powerplay = true;\n  }\n  powerplayWeaponNames.forEach((x) => {\n    if (powerplay === false) {\n      const powerplayHardpoint = hardpoints.find(\n        (hp) => hp?.name?.toLowerCase() === x.toLowerCase()\n      );\n      powerplay = powerplayHardpoint ? true : false;\n    }\n  });\n\n  // Check for engineering\n  const weaponEng = hardpoints.filter((hp) => hp?.blueprint);\n  const internalEng = internals.filter((i) => i?.blueprint);\n  const ppEng = core.powerPlant.blueprint;\n  const thrustEng = core.thrusters.blueprint;\n  const fsdEng = core.frameShiftDrive.blueprint;\n  const lifeEng = core.lifeSupport.blueprint;\n  const pdEng = core.powerDistributor.blueprint;\n  const sensorEng = core.sensors.blueprint;\n  if (\n    engineering === false &&\n    (weaponEng.length > 0 ||\n      internalEng.length > 0 ||\n      ppEng ||\n      thrustEng ||\n      fsdEng ||\n      lifeEng ||\n      pdEng ||\n      sensorEng)\n  ) {\n    engineering = true;\n  }\n\n  return {\n    buildName,\n    shipName,\n    hasGuardian: guardian,\n    hasPowerplay: powerplay,\n    engineering,\n    url,\n  };\n};\n","import engineerIcon from '../../assets/Engineer_icon.svg';\n\nexport const EngIcons = (props: { engLevel: number }) => {\n  let icons: JSX.Element[] = [];\n  if (props.engLevel > 3 || props.engLevel < 1) {\n    return (\n      <div className=\"engineering\">\n        <p>Engineering Level: None</p>\n      </div>\n    );\n  } else {\n    for (let i = 1; i <= props.engLevel; i++) {\n      icons = [\n        ...icons,\n        <img src={engineerIcon} key={i} alt=\"Engineering Icon\" />,\n      ];\n    }\n    return (\n      <div className=\"engineering\">\n        <p>\n          <span>Engineering Level:</span> {icons.map((icon) => icon)}\n        </p>\n      </div>\n    );\n  }\n};\n","import { Chip } from '@material-ui/core';\nimport { IBuildInfov2 } from '../../models';\n\nexport const TagGroup = (props: { build: IBuildInfov2 }) => {\n  const { build } = props;\n  return (\n    <div className=\"chips\">\n      {build.specializations.map((v) => (\n        <Chip label={v} key={v} />\n      ))}\n      {build.hasGuardian && <Chip label=\"Guardian\" key=\"guardian\" />}\n      {build.hasPowerplay && <Chip label=\"PowerPlay\" key=\"powerplay\" />}\n      {build.isBeginner && <Chip label=\"Beginner\" key=\"beginner\" />}\n    </div>\n  );\n};\n","import './buildCard.css';\nimport {\n  CardMedia,\n  Divider,\n  Typography,\n  Button,\n  CardActions,\n  CardContent,\n  Card,\n} from '@material-ui/core';\nimport { IBuildInfov2, ShipSize } from '../../models';\nimport { EngIcons } from './engIcons';\nimport { NavLink } from 'react-router-dom';\nimport { useShipIdfromMap } from '../../hooks/useShipMap';\nimport { TagGroup } from './tagGroup';\n\nexport const BuildCard = (props: { shipBuild: IBuildInfov2 | undefined }) => {\n  const { shipBuild } = props;\n  const shipInfo = useShipIdfromMap(shipBuild?.shipId);\n\n  return shipBuild && shipInfo ? (\n    <Card variant=\"outlined\" className=\"card\">\n      {shipInfo && (\n        <CardMedia\n          className=\"shipImg\"\n          image={shipInfo?.shipImg}\n          title={shipInfo?.name}\n        />\n      )}\n      <CardContent className=\"cardContent\">\n        <Typography>{shipBuild.title}</Typography>\n        <Divider />\n        <div className=\"shipName\">\n          <Typography>{shipInfo?.name} </Typography>\n          <div className=\"spacer\" />\n          {shipInfo && <Typography>{ShipSize[shipInfo.size]}</Typography>}\n        </div>\n        {shipInfo?.requires && (\n          <Typography>Requirement: {shipInfo.requires}</Typography>\n        )}\n        <TagGroup build={shipBuild} />\n        <Divider />\n        <EngIcons engLevel={shipBuild.engLevel} />\n        <Divider />\n        <Typography>Author: {shipBuild.author}</Typography>\n        {shipBuild.variants.length > 0 ? (\n          <Typography>Has Variants</Typography>\n        ) : null}\n        {shipBuild.related.length > 0 ? (\n          <Typography>Has Related Builds</Typography>\n        ) : null}\n        <div className=\"spacer\" />\n        <CardActions className=\"cardActions\">\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            href={shipBuild.buildLink}\n            target=\"_blank\"\n          >\n            View Build\n          </Button>{' '}\n          <Button\n            to={`/information/builds/detail/${\n              (shipBuild._id as unknown) as string\n            }`}\n            component={NavLink}\n            color=\"primary\"\n            variant=\"contained\"\n            target=\"_blank\"\n          >\n            View Details\n          </Button>\n        </CardActions>\n      </CardContent>\n    </Card>\n  ) : null;\n};\n","import { makeStyles, Typography } from '@material-ui/core';\nimport { Loading } from '../../../../components';\nimport { useShipBuilds } from '../../hooks/useShipBuilds';\nimport { BuildCard } from './buildCard';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '90%',\n    margin: 'auto',\n    marginBottom: 5,\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetailBuilds = (props: {\n  title: string;\n  buildIDs: string[];\n}) => {\n  const { title, buildIDs } = props;\n  const classes = useStyles();\n  const { loading, shipBuilds } = useShipBuilds();\n\n  return (\n    <div id=\"variants\" className={classes.textCenter}>\n      <Typography variant=\"h4\">{title}</Typography>\n      {loading ? (\n        <Loading />\n      ) : (\n        <div className={classes.paper}>\n          {buildIDs.map((id) => {\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            return <BuildCard shipBuild={build} key={id} />;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n","import {\n  Button,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loading, NotFound } from '../../../../components';\nimport { getShipInfofromID } from '../../functions/getShipInfo';\nimport { useShipBuilds } from '../../hooks/useShipBuilds';\nimport { IShipInfo, ShipSize } from '../../models';\nimport { BuildDetailBuilds } from './buildDetailBuilds';\nimport { TagGroup } from './tagGroup';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\n\ninterface RouteParams {\n  id: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '80%',\n    margin: 'auto',\n    padding: 10,\n    marginBottom: 5,\n  },\n  img: {\n    width: 300,\n    [theme.breakpoints.down('md')]: {\n      display: 'none',\n    },\n  },\n  flexDown: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  flexAcross: {\n    display: 'flex',\n    flexDirection: 'row',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column',\n      flexWrap: 'wrap',\n    },\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  gridDown: {\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n    gap: '5px',\n  },\n  margin: {\n    margin: 10,\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetail = () => {\n  const { loading, shipBuilds } = useShipBuilds();\n  let { id } = useParams<RouteParams>();\n  const classes = useStyles();\n  const [shipInfo, setShipInfo] = useState<IShipInfo>();\n\n  let foundBuild = useMemo(() => {\n    if (loading) {\n      return undefined;\n    }\n\n    let build = shipBuilds.find(\n      (x) => x._id && ((x._id as unknown) as string) === id\n    );\n    if (build) {\n      return build;\n    } else {\n      return null;\n    }\n  }, [id, loading, shipBuilds]);\n\n  useEffect(() => {\n    if (foundBuild) {\n      const info = getShipInfofromID(foundBuild.shipId);\n      setShipInfo(info);\n    }\n  }, [foundBuild]);\n\n  return (\n    <>\n      <Typography variant=\"h3\">Build Detail</Typography>\n      {loading ? (\n        <Loading />\n      ) : foundBuild === null ? (\n        <NotFound />\n      ) : (\n        <>\n          <Paper className={`${classes.paper} ${classes.flexAcross}`}>\n            {shipInfo && (\n              <div className={`${classes.flexDown} ${classes.margin}`}>\n                <img\n                  src={shipInfo.shipImg}\n                  alt={shipInfo.name}\n                  className={classes.img}\n                />\n                <div className={classes.flexAcross}>\n                  <Typography>{shipInfo.name}</Typography>\n                  <span className={classes.spacer} />\n                  <Typography>{ShipSize[shipInfo.size]}</Typography>\n                </div>\n                {shipInfo.requires && (\n                  <Typography>Requires: {shipInfo.requires}</Typography>\n                )}\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  href={shipInfo.shipReview}\n                  target=\"_blank\"\n                >\n                  Pilot Review\n                </Button>\n              </div>\n            )}\n            <Divider orientation=\"vertical\" flexItem />\n            <div\n              className={`${classes.flexDown} ${classes.spacer} ${classes.margin}`}\n            >\n              <Typography variant=\"h5\">{foundBuild?.title}</Typography>\n              <TagGroup build={foundBuild!} />\n              <Typography style={{ whiteSpace: 'pre-line' }}>\n                {foundBuild?.description}\n              </Typography>\n              {foundBuild?.description && (\n                <ReactMarkdown\n                  plugins={[gfm]}\n                  children={foundBuild.description}\n                />\n              )}\n            </div>\n            <div\n              className={`${classes.flexDown} ${classes.spacer} ${classes.textCenter}`}\n            >\n              <div className={classes.gridDown}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  href={foundBuild!.buildLink}\n                  target=\"_blank\"\n                >\n                  Open Coriolis\n                </Button>\n                {/* <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => alert('work in progress')}\n                >\n                  Add Variant\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={() => alert('work in progress')}\n                >\n                  Add Related\n                </Button> */}\n              </div>\n            </div>\n          </Paper>\n          {foundBuild && foundBuild.variants.length > 0 ? (\n            <BuildDetailBuilds\n              title=\"Build Variants\"\n              buildIDs={foundBuild.variants}\n            />\n          ) : null}\n          {foundBuild && foundBuild.related.length > 0 ? (\n            <BuildDetailBuilds\n              title=\"Related Builds\"\n              buildIDs={foundBuild.related}\n            />\n          ) : null}\n        </>\n      )}\n    </>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { Loading } from '../../../../components';\nimport { filterShipBuilds } from '../../functions/filterShipBuilds';\nimport { sortItems } from '../../functions/sort';\nimport { useShipBuilds } from '../../hooks/useShipBuilds';\nimport { IBuildInfov2, IQuery } from '../../models';\nimport { BuildCard } from './buildCard';\nimport './buildList.css';\n\nexport const BuildList = (props: { buildQuery: IQuery | undefined }) => {\n  const [queriedBuilds, setQueriedBuilds] = useState<IBuildInfov2[]>();\n  const { buildQuery } = props;\n  const { loading, shipBuilds } = useShipBuilds();\n\n  let filterBuilds = useCallback(() => {\n    if (loading) {\n      return;\n    }\n    console.log(shipBuilds);\n    const filtered = filterShipBuilds(shipBuilds, buildQuery);\n    const sorted = sortItems(filtered!, 'shipId');\n    setQueriedBuilds(sorted);\n  }, [loading, shipBuilds, buildQuery]);\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    filterBuilds();\n  }, [loading, filterBuilds]);\n\n  return (\n    <div className=\"builds\">\n      {loading ? (\n        <Loading />\n      ) : (\n        queriedBuilds?.map((ship) => {\n          return (\n            <BuildCard key={(ship._id as unknown) as string} shipBuild={ship} />\n          );\n        })\n      )}\n    </div>\n  );\n};\n","import { IBuildInfov2, IQuery } from '../models';\nimport { getShipInfofromID } from './getShipInfo';\n\nexport const filterShipBuilds = (\n  shipBuilds: IBuildInfov2[] | undefined,\n  query: IQuery | undefined\n) => {\n  if (shipBuilds && query) {\n    let newList = shipBuilds.filter((x) => x.isVariant === false);\n    // ship type\n    if (query.ship !== null) {\n      newList = newList.filter((build) => build.shipId === query.ship);\n    }\n    // ship size\n    if (query.size !== null) {\n      newList = newList.filter((build) => {\n        const shipInfo = getShipInfofromID(build.shipId);\n        if (shipInfo?.size === query.size) {\n          return build;\n        } else {\n          return undefined;\n        }\n      });\n    }\n    // Engineering\n    if (query.engLevel !== null) {\n      newList = newList.filter((build) => build.engLevel === query.engLevel);\n    }\n    // Specializations\n    if (query.specialties.length > 0) {\n      console.log(query.specialties);\n      let tempList: IBuildInfov2[] = [];\n      for (const specialty of query.specialties) {\n        if (tempList.length > 0) {\n          tempList = tempList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        } else {\n          tempList = newList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        }\n      }\n      newList = tempList;\n    }\n    // Guardian\n    if (query.other.guardian !== null) {\n      const val = query.other.guardian === 1 ? true : false;\n      newList = newList.filter((build) => build.hasGuardian === val);\n    }\n    // PowerPlay\n    if (query.other.powerplay !== null) {\n      const val = query.other.powerplay === 1 ? true : false;\n      newList = newList.filter((build) => build.hasPowerplay === val);\n    }\n    // Beginner\n    if (query.other.beginner !== null) {\n      const val = query.other.beginner === 1 ? true : false;\n      newList = newList.filter((build) => build.isBeginner === val);\n    }\n    return newList;\n  }\n};\n","import { Tooltip } from '@material-ui/core';\n\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { ChangeEvent } from 'react';\nimport { IShipInfo } from '../../models';\nimport { ShipAutocomplete } from '../shipAutocomplete';\n\nexport const QueryShip = (props: {\n  shipSize: number | null;\n  setShipSize: React.Dispatch<React.SetStateAction<number | null>>;\n  shipType: string | null;\n  setShipType: React.Dispatch<React.SetStateAction<string | null>>;\n}) => {\n  const { shipType, setShipType, shipSize, setShipSize } = props;\n\n  const handleShipSizeChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setShipType(null);\n    setShipSize(newValue);\n  };\n\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value?.shipId;\n    setShipType(ship ?? null);\n    setShipSize(null);\n  };\n\n  return (\n    <div className=\"shipQuery\">\n      <h3 className=\"queryHeader\">Ship Type and Size</h3>\n      <div className=\"shipQuerySection\">\n        <div className=\"shipTypeQuery\">\n          <ShipAutocomplete\n            shipType={shipType}\n            handleShipChange={handleShipChange}\n          />\n        </div>\n        <div className=\"shipSizeQuery\">\n          <Tooltip\n            title=\"What's the size of the ship you're looking for?\"\n            arrow\n          >\n            <ToggleButtonGroup\n              value={shipSize}\n              exclusive\n              onChange={handleShipSizeChange}\n            >\n              <ToggleButton value={1}>Small</ToggleButton>\n              <ToggleButton value={2}>Medium</ToggleButton>\n              <ToggleButton value={3}>Large</ToggleButton>\n            </ToggleButtonGroup>\n          </Tooltip>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Typography } from '@material-ui/core';\nimport { SetStateAction, MouseEvent } from 'react';\nimport { EngToggleGroup } from '../engToggleGroup';\n\nexport const QueryEngineering = (props: {\n  engLevel: number | null;\n  setEngLevel: React.Dispatch<SetStateAction<number | null>>;\n}) => {\n  const { engLevel, setEngLevel } = props;\n\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setEngLevel(newValue);\n  };\n\n  return (\n    <div className=\"engineeringQuery\">\n      <h3 className=\"queryHeader\">Ship Engineering Level</h3>\n      <Typography>\n        Select Engineering level ranging from None to Max Engineering.\n      </Typography>\n      <EngToggleGroup\n        engLevel={engLevel}\n        handleEngLevelChange={handleEngLevelChange}\n      />\n    </div>\n  );\n};\n","import { Tooltip } from '@material-ui/core';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\n\nimport { OtherFilters } from '../../models/otherFilters';\nimport BlockIcon from '@material-ui/icons/Block';\nimport CheckIcon from '@material-ui/icons/Check';\n\nexport const QueryOther = (props: {\n  other: OtherFilters;\n  setOther: React.Dispatch<React.SetStateAction<OtherFilters>>;\n}) => {\n  const { other, setOther } = props;\n\n  const handleGuardianChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther({ ...other, guardian: newValue });\n  };\n  const handlePowerPlayChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther({ ...other, powerplay: newValue });\n  };\n  const handleBeginnerChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther({ ...other, beginner: newValue });\n  };\n\n  return (\n    <div className=\"otherQuery\">\n      <h3 className=\"queryHeader\">Other Filters</h3>\n      <div className=\"otherButtons\">\n        <Tooltip title=\"Should the build have Guardian components?\" arrow>\n          <div className=\"guardian\">\n            <label>Guardian</label>\n            <ToggleButtonGroup\n              value={other.guardian}\n              exclusive\n              onChange={handleGuardianChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Does the build have Power Play modules?\" arrow>\n          <div className=\"powerplay\">\n            <label>Power Play</label>\n            <ToggleButtonGroup\n              value={other.powerplay}\n              exclusive\n              onChange={handlePowerPlayChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Is this build easy to achieve early-game?\">\n          <div className=\"beginner\">\n            <label>Beginner</label>\n            <ToggleButtonGroup\n              value={other.beginner}\n              exclusive\n              onChange={handleBeginnerChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { IQuery } from '../../models';\n\nimport './query.css';\n\nimport { Button, Paper } from '@material-ui/core';\nimport { QuerySpecialization } from './querySpecialities';\nimport { QueryShip } from './queryShip';\nimport { QueryEngineering } from './queryEngineering';\nimport { QueryOther } from './queryOther';\nimport { OtherFilters } from '../../models/otherFilters';\nimport { NavLink } from 'react-router-dom';\nimport { useUrlQuery } from '../../hooks/useURLQuery';\n\nexport const Query = (props: { queryUpdate: (query: IQuery) => void }) => {\n  const [shipType, setShipType] = useState<string | null>(null);\n  const [shipSize, setShipSize] = useState<number | null>(null);\n  const [engLevel, setEngLevel] = useState<number | null>(null);\n  const [selectedSpecialties, setSpecialties] = useState<string[]>([]);\n  const [other, setOther] = useState<OtherFilters>({\n    guardian: null,\n    powerplay: null,\n    beginner: null,\n  });\n  let query = useUrlQuery();\n\n  useEffect(() => {\n    const queryParam = query.get('beginner');\n    if (queryParam === 'true') {\n      setOther({ ...other, beginner: 1 });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const { queryUpdate } = props;\n    const query: IQuery = {\n      ship: shipType,\n      size: shipSize,\n      engLevel,\n      specialties: selectedSpecialties,\n      other,\n    };\n    queryUpdate(query);\n    // Disable eslint. Props is not missing from dependencies.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shipType, shipSize, engLevel, selectedSpecialties, other]);\n\n  const resetQueries = () => {\n    setShipType(null);\n    setShipSize(null);\n    setEngLevel(null);\n    setSpecialties([]);\n    setOther({\n      guardian: null,\n      powerplay: null,\n      beginner: null,\n    });\n  };\n\n  return (\n    <Paper className=\"query\">\n      <QuerySpecialization\n        selectedSpecialties={selectedSpecialties}\n        setSpecialties={setSpecialties}\n      />\n      <QueryShip\n        shipType={shipType}\n        setShipType={setShipType}\n        shipSize={shipSize}\n        setShipSize={setShipSize}\n      />\n      <QueryEngineering engLevel={engLevel} setEngLevel={setEngLevel} />\n      <QueryOther other={other} setOther={setOther} />\n      <div className=\"reset\">\n        <Button\n          onClick={resetQueries}\n          color=\"primary\"\n          variant=\"outlined\"\n          className=\"resetButton\"\n        >\n          Reset Selections\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          component={NavLink}\n          to=\"/information/builds/add\"\n        >\n          Add Build\n        </Button>\n      </div>\n    </Paper>\n  );\n};\n","import { useLocation } from 'react-router-dom';\n\nexport const useUrlQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n","import { Fab, Typography, useMediaQuery } from '@material-ui/core';\nimport { useRef, useState } from 'react';\nimport { BuildList } from './builds/buildList';\nimport { IQuery } from '../models';\nimport { Query } from './query/query';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport './queryandBuildList.css';\n\nexport const QueryandBuildList = (props: {}) => {\n  const [query, setQuery] = useState<IQuery>();\n  const buildRef = useRef<HTMLDivElement>(null);\n  const isMobile = useMediaQuery('(max-width:1000px)');\n\n  const handleQuery = (query: IQuery) => {\n    setQuery(query);\n  };\n  const handleFab = () => {\n    if (buildRef.current) {\n      buildRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n  return (\n    <section className=\"selection\">\n      <Typography variant=\"h3\">Ship Build Archive</Typography>\n      <Query queryUpdate={handleQuery} />\n      <div ref={buildRef}>\n        <BuildList buildQuery={query} />\n      </div>\n      {isMobile && (\n        <div className=\"fab\">\n          <Fab color=\"primary\" className=\"fab\" onClick={handleFab}>\n            <ArrowDownwardIcon />\n          </Fab>\n        </div>\n      )}\n    </section>\n  );\n};\n","import { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { BuildAdd } from './builds/buildAdd';\nimport { BuildDetail } from './builds/buildDetail';\nimport { QueryandBuildList } from './queryandBuildList';\n\nexport const USCBuildSystem = () => {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route path={`${path}/detail/:id`}>\n        <BuildDetail />\n      </Route>\n      <Route path={path} exact>\n        <QueryandBuildList />\n      </Route>\n      <Route path={`${path}/add`}>\n        <BuildAdd />\n      </Route>\n    </Switch>\n  );\n};\n"],"sourceRoot":""}