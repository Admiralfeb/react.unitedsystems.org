{"version":3,"sources":["app/information/ship-builds/models/shipSize.ts","app/information/ship-builds/models/index.ts","app/information/ship-builds/models/shipSpecialty.ts","app/information/ship-builds/assets/Engineer_icon.svg","app/information/ship-builds/functions/getShipInfo.ts","app/information/ship-builds/components/moreInfoDialog.tsx","app/information/ship-builds/components/buildItem.tsx","app/information/ship-builds/components/builds.tsx","app/information/ship-builds/functions/getShipBuilds.ts","app/information/ship-builds/functions/filterShipBuilds.ts","app/information/ship-builds/components/querySpecialities.tsx","app/information/ship-builds/components/queryShip.tsx","app/information/ship-builds/components/queryEngineering.tsx","app/information/ship-builds/components/queryOther.tsx","app/information/ship-builds/components/query.tsx","app/information/ship-builds/components/selection.tsx"],"names":["ShipSize","ShipSpecialty","getShipInfo","shipID","shipMap","find","x","id","Transition","React","forwardRef","props","ref","Slide","direction","MoreInfoDialog","content","open","setOpen","handleClose","Dialog","TransitionComponent","keepMounted","scroll","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","style","whiteSpace","DialogActions","Button","onClick","color","BuildItem","useState","shipInfo","setShipInfo","showDialog","setShowDialog","useEffect","Card","variant","className","CardMedia","image","shipImg","title","name","CardContent","Typography","description","Divider","size","requires","tags","specializations","guardian","powerplay","beginner","engLevel","author","CardActions","href","buildLink","target","moreInfo","EngIcons","icons","i","src","engineerIcon","alt","map","icon","TagGroup","v","Chip","label","Builds","builds","setBuilds","queriedBuilds","setQueriedBuilds","buildQuery","shipBuilds","ship","sortItems","getShipBuilds","query","newList","filter","build","specialties","length","console","log","tempList","specialty","includes","other","val","filterShipBuilds","QuerySpecialization","selectedSpecialties","setSpecialties","getSpecialties","special","ToggleButton","value","selected","onChange","newSpecials","handleSpecialties","speciality","QueryShip","shipType","setShipType","shipSize","setShipSize","Autocomplete","options","Ships","autoHighlight","getOptionLabel","option","renderOption","renderInput","params","TextField","inputProps","autocomplete","findShipName","_","Tooltip","arrow","ToggleButtonGroup","exclusive","newValue","QueryEngineering","setEngLevel","QueryOther","setOther","Query","queryUpdate","Paper","Selection","setQuery","buildRef","useRef","isMobile","useMediaQuery","Fab","current","scrollIntoView","behavior"],"mappings":"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","file":"static/js/4.fb7f73d5.chunk.js","sourcesContent":["export enum ShipSize {\r\n    'S' = 1,\r\n    'M',\r\n    'L'\r\n}\r\n","export * from './buildInfo';\r\nexport * from './query';\r\nexport * from './shipInfo';\r\nexport * from './shipSize';\r\nexport * from './tag';\r\n","export enum ShipSpecialty {\r\n    exp = 'Exploration',\r\n    jump = 'Jump Ship',\r\n    hge = 'HGE Farming',\r\n    cargo = 'Cargo',\r\n    mining = 'Miner',\r\n    pve = 'Combat - PvE',\r\n    pvp = 'Combat - PvP',\r\n    ax = 'Combat - Anti-Xeno',\r\n    racing = 'Racing',\r\n    multi = 'Multi-Purpose',\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Engineer_icon.f8ffd94f.svg\";","import shipMap from '../assets/shipMap.json';\r\nimport { IShipInfo } from '../models/shipInfo';\r\n\r\nexport const getShipInfo = (shipID: number): IShipInfo | undefined => {\r\n    const ship: IShipInfo | undefined = shipMap.find(x => x.id === shipID);\r\n    return ship;\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<unknown>\r\n) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nexport const MoreInfoDialog = (props: {\r\n  content: string;\r\n  open: boolean;\r\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n}) => {\r\n  const { content, open, setOpen } = props;\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        scroll='paper'\r\n        onClose={handleClose}\r\n        aria-labelledby='alert-dialog-slide-title'\r\n        aria-describedby='alert-dialog-slide-description'>\r\n        <DialogTitle id='alert-dialog-slide-title'>\r\n          {'More Info About the Build'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id='alert-dialog-slide-description'>\r\n            <div style={{ whiteSpace: 'pre-line' }}>{content}</div>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport engineerIcon from '../assets/Engineer_icon.svg';\r\nimport './buildItem.css';\r\nimport { Chip } from '@material-ui/core';\r\nimport { getShipInfo } from '../functions/getShipInfo';\r\nimport { IShipInfo } from '../models/shipInfo';\r\nimport { ShipSize } from '../models';\r\nimport { MoreInfoDialog } from './moreInfoDialog';\r\n\r\ninterface IBuildItemProps {\r\n  id: number;\r\n  author: string;\r\n  specializations: string[];\r\n  engLevel: number;\r\n  description: string;\r\n  buildLink: string;\r\n  guardian: boolean;\r\n  powerplay: boolean;\r\n  beginner: boolean;\r\n  moreInfo?: string;\r\n}\r\n\r\nexport const BuildItem = (props: IBuildItemProps) => {\r\n  const [shipInfo, setShipInfo] = useState<IShipInfo>();\r\n  const [showDialog, setShowDialog] = useState<boolean>(false);\r\n\r\n  useEffect(() => setShipInfo(getShipInfo(props.id)), [props.id]);\r\n\r\n  const handleShowDialog = () => {\r\n    setShowDialog(true);\r\n  };\r\n\r\n  return (\r\n    <Card variant='outlined' className='card'>\r\n      {shipInfo && (\r\n        <CardMedia\r\n          className='shipImg'\r\n          image={shipInfo?.shipImg}\r\n          title={shipInfo?.name}\r\n        />\r\n      )}\r\n      <CardContent className='cardContent'>\r\n        <Typography>{props.description}</Typography>\r\n        <Divider />\r\n        <div className='shipName'>\r\n          <Typography>{shipInfo?.name} </Typography>\r\n          <div className='spacer' />\r\n          {shipInfo && <Typography>{ShipSize[shipInfo.size]}</Typography>}\r\n        </div>\r\n        {shipInfo?.requires && (\r\n          <Typography>Requirement: {shipInfo.requires}</Typography>\r\n        )}\r\n        <TagGroup\r\n          tags={props.specializations}\r\n          guardian={props.guardian}\r\n          powerplay={props.powerplay}\r\n          beginner={props.beginner}\r\n        />\r\n        <Divider />\r\n        <EngIcons engLevel={props.engLevel} />\r\n        <Divider />\r\n        <Typography>Author: {props.author}</Typography>\r\n        <CardActions className='cardActions'>\r\n          <Button\r\n            variant='contained'\r\n            color='secondary'\r\n            href={props.buildLink}\r\n            target='_blank'>\r\n            View Build\r\n          </Button>{' '}\r\n          {props.moreInfo && (\r\n            <>\r\n              <Button\r\n                variant='contained'\r\n                color='primary'\r\n                onClick={handleShowDialog}>\r\n                More Info\r\n              </Button>\r\n              <MoreInfoDialog\r\n                content={props.moreInfo!}\r\n                open={showDialog}\r\n                setOpen={setShowDialog}\r\n              />\r\n            </>\r\n          )}\r\n        </CardActions>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst EngIcons = (props: { engLevel: number }) => {\r\n  let icons: JSX.Element[] = [];\r\n  if (props.engLevel > 3 || props.engLevel < 1) {\r\n    return (\r\n      <div className='engineering'>\r\n        <p>Engineering Level: None</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    for (let i = 1; i <= props.engLevel; i++) {\r\n      icons = [\r\n        ...icons,\r\n        <img src={engineerIcon} key={i} alt='Engineering Icon' />,\r\n      ];\r\n    }\r\n    return (\r\n      <div className='engineering'>\r\n        <p>\r\n          <span>Engineering Level:</span> {icons.map((icon) => icon)}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst TagGroup = (props: {\r\n  tags: string[];\r\n  guardian: boolean;\r\n  powerplay: boolean;\r\n  beginner: boolean;\r\n}) => {\r\n  return (\r\n    <div className='chips'>\r\n      {props.tags.map((v) => (\r\n        <Chip label={v} key={v} />\r\n      ))}\r\n      {props.guardian && <Chip label='Guardian' key='guardian' />}\r\n      {props.powerplay && <Chip label='PowerPlay' key='powerplay' />}\r\n      {props.beginner && <Chip label='Beginner' key='beginner' />}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { filterShipBuilds } from '../functions/filterShipBuilds';\r\nimport { getShipBuilds } from '../functions/getShipBuilds';\r\nimport { IBuildInfo, IQuery } from '../models';\r\nimport { BuildItem } from './buildItem';\r\nimport './builds.css';\r\n\r\nexport const Builds = (props: { buildQuery: IQuery | undefined }) => {\r\n  const [builds, setBuilds] = useState<IBuildInfo[]>();\r\n  const [queriedBuilds, setQueriedBuilds] = useState<IBuildInfo[]>();\r\n  const { buildQuery } = props;\r\n\r\n  useEffect(() => {\r\n    setBuilds(getShipBuilds());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setQueriedBuilds(filterShipBuilds(builds, buildQuery));\r\n  }, [builds, buildQuery]);\r\n\r\n  return (\r\n    <div className='builds'>\r\n      {queriedBuilds?.map((ship) => {\r\n        return (\r\n          <BuildItem\r\n            key={ship.id}\r\n            id={ship.ship}\r\n            author={ship.author}\r\n            specializations={ship.specializations}\r\n            engLevel={ship.engLevel}\r\n            description={ship.description}\r\n            buildLink={ship.buildLink}\r\n            guardian={ship.guardian}\r\n            powerplay={ship.powerplay}\r\n            beginner={ship.beginner}\r\n            moreInfo={ship.moreInfo}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import { IBuildInfo } from \"../models\";\r\nimport shipBuilds from '../assets/builds.json';\r\nimport { getShipInfo } from \"./getShipInfo\";\r\nimport { sortItems } from \"../functions/sort\";\r\n\r\nexport const getShipBuilds = (): IBuildInfo[] => {\r\n    let builds: IBuildInfo[] = [];\r\n    builds = shipBuilds.map((v) => {\r\n        const shipInfo = getShipInfo(v.ship)!;\r\n        const size = shipInfo?.size;\r\n        const newBuild: IBuildInfo = { ...v, size };\r\n        return newBuild;\r\n    });\r\n    builds = sortItems(builds, 'ship');\r\n    return builds;\r\n};\r\n","import { IBuildInfo, IQuery } from \"../models\";\r\n\r\nexport const filterShipBuilds = (\r\n    shipBuilds: IBuildInfo[] | undefined,\r\n    query: IQuery | undefined\r\n) => {\r\n    if (shipBuilds && query) {\r\n        let newList = shipBuilds;\r\n        // ship type\r\n        if (query.ship !== null) {\r\n            newList = newList.filter((build) => build.ship === query.ship);\r\n        }\r\n        // ship size\r\n        if (query.size !== null) {\r\n            newList = newList.filter((build) => build.size === query.size);\r\n        }\r\n        // Engineering\r\n        if (query.engLevel !== null) {\r\n            newList = newList.filter((build) => build.engLevel === query.engLevel);\r\n        }\r\n        // Specializations\r\n        if (query.specialties.length > 0) {\r\n            console.log(query.specialties);\r\n            let tempList: IBuildInfo[] = [];\r\n            for (const specialty of query.specialties) {\r\n                if (tempList.length > 0) {\r\n                    tempList = tempList.filter(build => build.specializations.includes(specialty));\r\n                } else {\r\n                    tempList = newList.filter(build => build.specializations.includes(specialty))\r\n                }\r\n            }\r\n            newList = tempList;\r\n        }\r\n        // Guardian\r\n        if (query.other.guardian !== null) {\r\n            const val = query.other.guardian === 1 ? true : false;\r\n            newList = newList.filter((build) => build.guardian === val);\r\n        }\r\n        // PowerPlay\r\n        if (query.other.powerplay !== null) {\r\n            const val = query.other.powerplay === 1 ? true : false;\r\n            newList = newList.filter((build) => build.powerplay === val);\r\n        }\r\n        // Beginner\r\n        if (query.other.beginner !== null) {\r\n            const val = query.other.beginner === 1 ? true : false;\r\n            newList = newList.filter((build) => build.beginner === val);\r\n        }\r\n        return newList;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { ToggleButton } from '@material-ui/lab';\r\nimport { ShipSpecialty } from '../models/shipSpecialty';\r\n\r\nexport const QuerySpecialization = (props: {\r\n  selectedSpecialties: string[];\r\n  setSpecialties: React.Dispatch<React.SetStateAction<string[]>>;\r\n}) => {\r\n  const { selectedSpecialties, setSpecialties } = props;\r\n\r\n  const handleSpecialties = (special: string) => {\r\n    let newSpecials: string[] = [];\r\n    if (selectedSpecialties.includes(special)) {\r\n      newSpecials = selectedSpecialties.filter((v) => v !== special);\r\n    } else {\r\n      newSpecials = [...selectedSpecialties, special];\r\n    }\r\n    setSpecialties(newSpecials);\r\n  };\r\n\r\n  return (\r\n    <div className='specializationQuery'>\r\n      <h3 className='queryHeader'>Ship Specializations</h3>\r\n\r\n      <Typography>\r\n        Select specializations that the ship should fulfill.\r\n      </Typography>\r\n\r\n      <div className='specialButtons'>\r\n        {getSpecialties().map((special) => (\r\n          <ToggleButton\r\n            value={special}\r\n            key={special}\r\n            selected={selectedSpecialties.includes(special)}\r\n            onChange={() => handleSpecialties(special)}>\r\n            {special}\r\n          </ToggleButton>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getSpecialties = (): string[] => {\r\n  let specialties: string[] = [];\r\n\r\n  for (const speciality in ShipSpecialty) {\r\n    specialties = [\r\n      ...specialties,\r\n      ShipSpecialty[speciality as keyof typeof ShipSpecialty],\r\n    ];\r\n  }\r\n  return specialties;\r\n};\r\n","import { TextField, Tooltip } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { sortItems } from '../functions/sort';\r\nimport Ships from '../assets/shipMap.json';\r\nimport {\r\n  Autocomplete,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n} from '@material-ui/lab';\r\n\r\nexport const QueryShip = (props: {\r\n  shipSize: number | null;\r\n  setShipSize: React.Dispatch<React.SetStateAction<number | null>>;\r\n  shipType: number | null;\r\n  setShipType: React.Dispatch<React.SetStateAction<number | null>>;\r\n}) => {\r\n  const { shipType, setShipType, shipSize, setShipSize } = props;\r\n\r\n  const handleShipSizeChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setShipType(null);\r\n    setShipSize(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className='shipQuery'>\r\n      <h3 className='queryHeader'>Ship Type and Size</h3>\r\n      <div className='shipQuerySection'>\r\n        <div className='shipTypeQuery'>\r\n          <Autocomplete\r\n            id='shipType'\r\n            options={sortItems(Ships, 'name')}\r\n            autoHighlight\r\n            getOptionLabel={(option) => option.name}\r\n            renderOption={(option) => (\r\n              <>\r\n                <span>{option.name}</span>\r\n              </>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label='Ship Type'\r\n                variant='outlined'\r\n                inputProps={{\r\n                  ...params.inputProps,\r\n                  autocomplete: 'new-password',\r\n                }}\r\n              />\r\n            )}\r\n            value={findShipName(shipType)}\r\n            onChange={(_, value) => setShipType(value!.id)}\r\n          />\r\n        </div>\r\n        <div className='shipSizeQuery'>\r\n          <Tooltip\r\n            title=\"What's the size of the ship you're looking for?\"\r\n            arrow>\r\n            <ToggleButtonGroup\r\n              value={shipSize}\r\n              exclusive\r\n              onChange={handleShipSizeChange}>\r\n              <ToggleButton value={1}>Small</ToggleButton>\r\n              <ToggleButton value={2}>Medium</ToggleButton>\r\n              <ToggleButton value={3}>Large</ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </Tooltip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst findShipName = (shipID: number | null) => {\r\n  if (shipID === null) {\r\n    return null;\r\n  }\r\n  const shipName = Ships.find((x) => x.id === shipID);\r\n  return shipName;\r\n};\r\n","import { Tooltip, Typography } from '@material-ui/core';\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\r\nimport BlockIcon from '@material-ui/icons/Block';\r\nimport engineerIcon from '../assets/Engineer_icon.svg';\r\n\r\nimport React, { SetStateAction } from 'react';\r\n\r\nexport const QueryEngineering = (props: {\r\n  engLevel: number | null;\r\n  setEngLevel: React.Dispatch<SetStateAction<number | null>>;\r\n}) => {\r\n  const { engLevel, setEngLevel } = props;\r\n\r\n  const handleEngLevelChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setEngLevel(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className='engineeringQuery'>\r\n      <h3 className='queryHeader'>Ship Engineering Level</h3>\r\n      <Typography>\r\n        Select Engineering level ranging from None to Max Engineering.\r\n      </Typography>\r\n      <ToggleButtonGroup\r\n        value={engLevel}\r\n        exclusive\r\n        onChange={handleEngLevelChange}>\r\n        <ToggleButton value={0}>\r\n          <Tooltip title='No Engineering' arrow>\r\n            <div className='engButton'>\r\n              <BlockIcon />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton value={1}>\r\n          <Tooltip title='Simple Engineering' arrow>\r\n            <div className='engButton'>\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton value={2}>\r\n          <Tooltip title='Moderate Engineering' arrow>\r\n            <div className='engButton'>\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton value={3}>\r\n          <Tooltip title='End-Game/Extreme Engineering' arrow>\r\n            <div className='engButton'>\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n    </div>\r\n  );\r\n};\r\n","import { Tooltip } from '@material-ui/core';\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\r\nimport React from 'react';\r\nimport { OtherFilters } from '../models/otherFilters';\r\nimport BlockIcon from '@material-ui/icons/Block';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\nexport const QueryOther = (props: {\r\n  other: OtherFilters;\r\n  setOther: React.Dispatch<React.SetStateAction<OtherFilters>>;\r\n}) => {\r\n  const { other, setOther } = props;\r\n\r\n  const handleGuardianChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setOther({ ...other, guardian: newValue });\r\n  };\r\n  const handlePowerPlayChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setOther({ ...other, powerplay: newValue });\r\n  };\r\n  const handleBeginnerChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setOther({ ...other, beginner: newValue });\r\n  };\r\n\r\n  return (\r\n    <div className='otherQuery'>\r\n      <h3 className='queryHeader'>Other Filters</h3>\r\n      <div className='otherButtons'>\r\n        <Tooltip title='Should the build have Guardian components?' arrow>\r\n          <div className='guardian'>\r\n            <label>Guardian</label>\r\n            <ToggleButtonGroup\r\n              value={other.guardian}\r\n              exclusive\r\n              onChange={handleGuardianChange}>\r\n              <ToggleButton value={1}>\r\n                <CheckIcon />\r\n              </ToggleButton>\r\n              <ToggleButton value={0}>\r\n                <BlockIcon />\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        </Tooltip>\r\n        <Tooltip title='Does the build have Power Play modules?' arrow>\r\n          <div className='powerplay'>\r\n            <label>Power Play</label>\r\n            <ToggleButtonGroup\r\n              value={other.powerplay}\r\n              exclusive\r\n              onChange={handlePowerPlayChange}>\r\n              <ToggleButton value={1}>\r\n                <CheckIcon />\r\n              </ToggleButton>\r\n              <ToggleButton value={0}>\r\n                <BlockIcon />\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        </Tooltip>\r\n        <Tooltip title='Is this build easy to achieve early-game?'>\r\n          <div className='beginner'>\r\n            <label>Beginner</label>\r\n            <ToggleButtonGroup\r\n              value={other.beginner}\r\n              exclusive\r\n              onChange={handleBeginnerChange}>\r\n              <ToggleButton value={1}>\r\n                <CheckIcon />\r\n              </ToggleButton>\r\n              <ToggleButton value={0}>\r\n                <BlockIcon />\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        </Tooltip>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { IQuery } from '../models';\r\n\r\nimport './query.css';\r\n\r\nimport { Button, Paper } from '@material-ui/core';\r\nimport { QuerySpecialization } from './querySpecialities';\r\nimport { QueryShip } from './queryShip';\r\nimport { QueryEngineering } from './queryEngineering';\r\nimport { QueryOther } from './queryOther';\r\nimport { OtherFilters } from '../models/otherFilters';\r\n\r\nexport const Query = (props: { queryUpdate: (query: IQuery) => void }) => {\r\n  const [shipType, setShipType] = useState<number | null>(null);\r\n  const [shipSize, setShipSize] = useState<number | null>(null);\r\n  const [engLevel, setEngLevel] = useState<number | null>(null);\r\n  const [selectedSpecialties, setSpecialties] = useState<string[]>([]);\r\n  const [other, setOther] = useState<OtherFilters>({\r\n    guardian: null,\r\n    powerplay: null,\r\n    beginner: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const { queryUpdate } = props;\r\n    const query: IQuery = {\r\n      ship: shipType,\r\n      size: shipSize,\r\n      engLevel,\r\n      specialties: selectedSpecialties,\r\n      other,\r\n    };\r\n    queryUpdate(query);\r\n    // Disable eslint. Props is not missing from dependencies.\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [shipType, shipSize, engLevel, selectedSpecialties, other]);\r\n\r\n  const resetQueries = () => {\r\n    setShipType(null);\r\n    setShipSize(null);\r\n    setEngLevel(null);\r\n    setSpecialties([]);\r\n    setOther({\r\n      guardian: null,\r\n      powerplay: null,\r\n      beginner: null,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper className='query'>\r\n      <QuerySpecialization\r\n        selectedSpecialties={selectedSpecialties}\r\n        setSpecialties={setSpecialties}\r\n      />\r\n      <QueryShip\r\n        shipType={shipType}\r\n        setShipType={setShipType}\r\n        shipSize={shipSize}\r\n        setShipSize={setShipSize}\r\n      />\r\n      <QueryEngineering engLevel={engLevel} setEngLevel={setEngLevel} />\r\n      <QueryOther other={other} setOther={setOther} />\r\n      <div className='reset'>\r\n        <Button\r\n          onClick={resetQueries}\r\n          color='primary'\r\n          variant='outlined'\r\n          className='resetButton'>\r\n          Reset Selections\r\n        </Button>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Fab, Typography, useMediaQuery } from '@material-ui/core';\r\nimport React, { useRef, useState } from 'react';\r\nimport { Builds } from '.';\r\nimport { IQuery } from '../models';\r\nimport { Query } from './query';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport './selection.css';\r\n\r\nexport const Selection = () => {\r\n  const [query, setQuery] = useState<IQuery>();\r\n  const buildRef = useRef<HTMLDivElement>(null);\r\n  const isMobile = useMediaQuery('(max-width:1000px)');\r\n\r\n  const handleQuery = (query: IQuery) => {\r\n    setQuery(query);\r\n  };\r\n  const handleFab = () => {\r\n    if (buildRef.current) {\r\n      buildRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className='selection'>\r\n      <Typography variant='h3'>Ship Build Archive</Typography>\r\n      <Query queryUpdate={handleQuery} />\r\n      <div ref={buildRef}>\r\n        <Builds buildQuery={query} />\r\n      </div>\r\n      {isMobile && (\r\n        <div className='fab'>\r\n          <Fab color='primary' className='fab' onClick={handleFab}>\r\n            <ArrowDownwardIcon />\r\n          </Fab>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n"],"sourceRoot":""}