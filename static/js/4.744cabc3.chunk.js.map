{"version":3,"sources":["models/shipBuilds/shipSpecialty.ts","models/shipBuilds/index.ts","models/shipBuilds/shipSize.ts","functions/shipBuilds/getShipInfo.ts","functions/shipBuilds/processJSONBuild.ts","components/shipBuilds/query/sharedStyles.ts","components/shipBuilds/query/querySpecialities.tsx","assets/shipBuilds/Engineer_icon.svg","components/shipBuilds/engToggleGroup.tsx","components/shipBuilds/builds/buildAddText.tsx","components/shipBuilds/shipAutocomplete.tsx","hooks/shipBuilds/useShipMap.ts","components/shipBuilds/builds/buildCheckBox.tsx","hooks/shipBuilds/useShipBuildMutations.ts","hooks/shipBuilds/useShipBuilds.ts","hooks/useURLQuery.ts","components/shipBuilds/builds/buildAdd.tsx","components/shipBuilds/builds/tagGroup.tsx","components/shipBuilds/builds/engIcons.tsx","components/shipBuilds/builds/buildDetailFull.tsx","components/shipBuilds/builds/buildDetailMobile.tsx","components/shipBuilds/builds/buildCard.tsx","components/shipBuilds/builds/buildDetailBuilds.tsx","components/shipBuilds/builds/buildDetail.tsx","hooks/shipBuilds/useShipBuildInfo.ts","components/shipBuilds/builds/buildList.tsx","functions/shipBuilds/filterShipBuilds.ts","components/shipBuilds/query/queryShip.tsx","components/shipBuilds/query/queryEngineering.tsx","components/shipBuilds/query/queryOther.tsx","components/shipBuilds/query/queryActions.tsx","components/shipBuilds/query/query.tsx","components/shipBuilds/queryandBuildList.tsx","routes/shipBuilds.routes.tsx"],"names":["ShipSpecialty","ShipSize","getShipInfofromID","shipID","shipMap","find","x","shipId","checkEngineering","hardpoints","internals","core","engineering","weaponEng","filter","hp","blueprint","internalEng","i","ppEng","powerPlant","thrustEng","thrusters","fsdEng","frameShiftDrive","lifeEng","lifeSupport","pdEng","powerDistributor","sensorEng","sensors","length","checkPowerplay","powerplay","powerplayInternals","group","toLowerCase","startsWith","forEach","powerplayHardpoint","name","checkGuardian","guardian","ppName","pdName","guardianHardPoints","guardianInternals","useSharedStyles","makeStyles","theme","querySection","width","minWidth","height","border","padding","borderRadius","margin","marginTop","spacing","marginBottom","textAlign","breakpoints","up","querySectionheader","queryExplanationText","color","useStyles","querySpecialtyButtons","display","gridTemplate","QuerySpecialization","props","selectedSpecialties","setSpecialties","sharedClasses","classes","className","Typography","getSpecialties","map","special","ToggleButton","value","selected","includes","onChange","newSpecials","v","handleSpecialties","specialties","speciality","engButton","EngToggleGroup","engLevel","handleEngLevelChange","ToggleButtonGroup","exclusive","Tooltip","title","arrow","src","engineerIcon","alt","BuildAddText","id","label","isMultiline","disabled","TextField","variant","multiline","rowsMax","findShipName","ships","ShipAutocomplete","shipType","handleShipChange","Ships","Autocomplete","options","sortItems","autoHighlight","getOptionLabel","option","renderOption","renderInput","params","inputProps","autocomplete","BuildCheckBox","checked","FormControlLabel","control","Checkbox","AddBuildMutation","ReplaceBuildMutation","UpdateBuildMutation","useShipBuildMutations","addBuild","useAddBuild","replaceBuild","useReplaceBuild","updateVariants","useUpdateVariantBuilds","updateRelated","useUpdateRelatedBuilds","useMutation","addBuildMutation","build","a","variables","addedBuild","updateBuildMutation","relatedBuilds","_id","input","related","updatedBuild","variantBuilds","variants","replaceBuildMutation","buildID","AllShipBuildsv2s","useShipBuilds","addRelated","useAddRelatedBuild","addVariant","useAddVariantBuild","useAllShipBuilds","shipBuilds","loading","useQuery","data","error","Error","message","shipBuildsv2s","currentID","buildtoInsert","currentBuild","tempBuild","console","log","insertOneShipBuildsv2","newRelated","parentID","parentBuild","isVariant","useUrlQuery","URLSearchParams","useLocation","search","root","rowGap","center","BuildAdd","enqueueSnackbar","useSnackbar","useState","jsonBuild","setJsonBuild","DEFAULTBUILD","buildInfo","setBuildInfo","urlQuery","useEffect","specializations","handleTextChange","event","target","info","description","buildLink","author","handleOtherChange","handleSubmit","addType","get","refID","ObjectId","textFields","json","JSON","parse","buildName","references","url","components","standard","internal","hasGuardian","hasPowerplay","processJSONBuild","isBeginner","checkFields","Paper","Button","to","component","NavLink","field","_","ship","FormGroup","row","check","onClick","chips","flexDirection","flexWrap","TagGroup","Chip","verticalAlign","EngIcons","icons","icon","paper","img","buttonGrid","flexDown","flexAcross","flexGrow","spacer","gridDown","textCenter","BuildDetailFull","blueprints","useLinks","shipInfo","foundBuild","shipImg","size","requires","href","shipReview","Divider","orientation","flexItem","plugins","gfm","renderers","paragraph","children","flexShrink","flexrow","gap","BuildDetailMobile","style","content","flexBasis","media","shipName","mediaAndActions","marginLeft","actions","gridTemplateRows","BuildCard","shipBuild","useShipIdfromMap","Fade","in","timeout","Card","CardMedia","image","CardContent","justifyContent","BuildDetailBuilds","buildIDs","BuildDetail","useMemo","undefined","useShipBuildInfo","useParams","useTheme","isMobile","useMediaQuery","down","BuildList","queriedBuilds","setQueriedBuilds","buildQuery","filterBuilds","useCallback","filtered","query","newList","other","showVariants","tempList","specialty","val","beginner","filterShipBuilds","shipQueries","shipTypeQuery","flex","shipSizeQuery","QueryShip","setShipType","shipSize","setShipSize","newValue","engineeringQuery","gridArea","QueryEngineering","setEngLevel","queryOtherButtons","queryOtherButtonGrids","QueryOtherBeginnerButtons","borderWidth","borderStyle","borderColor","palette","secondary","main","QueryOther","setOther","prevState","QueryActions","resetQueries","gridTemplateAreas","columnGap","Query","updateQuery","header","fab","position","bottom","right","QueryandBuildList","setQuery","buildRef","useRef","handleQuery","ref","Slide","direction","Fab","current","scrollIntoView","behavior","ShipBuildSystemRoutes","path","useRouteMatch","exact"],"mappings":"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","file":"static/js/4.744cabc3.chunk.js","sourcesContent":["export enum ShipSpecialty {\n  jump = 'Jump Ship',\n  hge = 'HGE Farming',\n  cargo = 'Cargo',\n  passenger = 'Passenger',\n  mining = 'Miner',\n  pve = 'Combat - PvE',\n  pvp = 'Combat - PvP',\n  ax = 'Combat - Anti-Xeno',\n  racing = 'Racing',\n  multi = 'Multi-Purpose',\n}\n","export * from './buildInfo';\nexport * from './buildInfoInsert';\nexport * from './otherFilters';\nexport * from './query';\nexport * from './shipInfo';\nexport * from './shipSize';\nexport * from './shipSpecialty';\n","export enum ShipSize {\n  'S' = 1,\n  'M',\n  'L',\n}\n","import shipMap from 'data/shipBuilds/shipMap.json';\nimport { IShipInfo } from 'models/shipBuilds/shipInfo';\n\nexport const getShipInfofromID = (shipID: string): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find((x) => x.shipId === shipID);\n  return ship;\n};\nexport const getShipInfofromName = (\n  shipName: string\n): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find(\n    (x) => x.name.toLowerCase() === shipName.toLowerCase()\n  );\n  return ship;\n};\n","import {\n  ICoriolisLoadout,\n  IShipCoreModules,\n  IShipHardpoints,\n  IShipInternalModules,\n} from 'models/shipBuilds/coriolis';\n\nexport const processJSONBuild = (\n  json: string\n): {\n  buildName: string;\n  shipID: string;\n  hasGuardian: boolean;\n  hasPowerplay: boolean;\n  engineering: boolean;\n  url: string;\n} => {\n  const build: ICoriolisLoadout = JSON.parse(json);\n\n  const buildName = build.name;\n  const shipID = build.references[0].shipId ?? '';\n  const url = build.references[0].url ?? '';\n\n  const components = build.components;\n  const core = components.standard;\n  const hardpoints = components.hardpoints;\n  const internals = components.internal;\n\n  // Check for Guardian\n  const guardian = checkGuardian(core, hardpoints, internals);\n\n  // Check for PowerPlay\n  const powerplay = checkPowerplay(internals, hardpoints);\n\n  // Check for engineering\n  const engineering = checkEngineering(hardpoints, internals, core);\n\n  return {\n    buildName,\n    shipID,\n    hasGuardian: guardian,\n    hasPowerplay: powerplay,\n    engineering,\n    url,\n  };\n};\n\n/**\n * Check for Engineered modules, except the armor\n * @param hardpoints\n * @param internals\n * @param core\n */\nconst checkEngineering = (\n  hardpoints: IShipHardpoints,\n  internals: IShipInternalModules,\n  core: IShipCoreModules\n) => {\n  let engineering = false;\n  const weaponEng = hardpoints.filter((hp) => hp?.blueprint);\n  const internalEng = internals.filter((i) => i?.blueprint);\n  const ppEng = core.powerPlant.blueprint;\n  const thrustEng = core.thrusters.blueprint;\n  const fsdEng = core.frameShiftDrive.blueprint;\n  const lifeEng = core.lifeSupport.blueprint;\n  const pdEng = core.powerDistributor.blueprint;\n  const sensorEng = core.sensors.blueprint;\n  if (\n    weaponEng.length > 0 ||\n    internalEng.length > 0 ||\n    ppEng ||\n    thrustEng ||\n    fsdEng ||\n    lifeEng ||\n    pdEng ||\n    sensorEng\n  ) {\n    engineering = true;\n  }\n  return engineering;\n};\n\n/**\n * Check for Powerplay modules\n * @param internals\n * @param hardpoints\n */\nconst checkPowerplay = (\n  internals: IShipInternalModules,\n  hardpoints: IShipHardpoints\n) => {\n  let powerplay = false;\n  const powerplayWeaponNames = [\n    'disruptor',\n    'imperial hammer',\n    'pack-hound',\n    'mining lance',\n    'enforcer',\n    'cytoscrambler',\n    'retributor',\n    'advanced plasma accelerator',\n    'pacifier',\n    'rocket propelled fsd disruptor',\n  ];\n  const powerplayInternals = internals.find((x) =>\n    x?.group?.toLowerCase().startsWith('prismatic')\n  );\n  if (powerplay === false && powerplayInternals) {\n    powerplay = true;\n  }\n  powerplayWeaponNames.forEach((x) => {\n    if (powerplay === false) {\n      const powerplayHardpoint = hardpoints.find(\n        (hp) => hp?.name?.toLowerCase() === x.toLowerCase()\n      );\n      powerplay = powerplayHardpoint ? true : false;\n    }\n  });\n  return powerplay;\n};\n\n/**\n * Check for Guardian modules/weapons\n * @param core\n * @param hardpoints\n * @param internals\n */\nconst checkGuardian = (\n  core: IShipCoreModules,\n  hardpoints: IShipHardpoints,\n  internals: IShipInternalModules\n) => {\n  let guardian = false;\n  const ppName = (core.powerPlant.name as string) ?? '';\n  const pdName = (core.powerDistributor.name as string) ?? '';\n  const guardianHardPoints = hardpoints.find((x) =>\n    x?.group?.toLowerCase().startsWith('guardian')\n  );\n  const guardianInternals = internals.find((x) =>\n    x?.group?.toLowerCase().startsWith('guardian')\n  );\n  if (\n    ppName.toLowerCase().startsWith('guardian') ||\n    pdName.toLowerCase().startsWith('guardian') ||\n    guardianHardPoints ||\n    guardianInternals\n  ) {\n    guardian = true;\n  }\n  return guardian;\n};\n","import { makeStyles } from '@material-ui/core';\n\nexport const useSharedStyles = makeStyles((theme) => ({\n  querySection: {\n    width: '90%',\n    minWidth: '90%',\n    height: '100%',\n    border: '2px solid gray',\n    padding: '5px',\n    borderRadius: '15px',\n    margin: 'auto',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    textAlign: 'center',\n    [theme.breakpoints.up('lg')]: {\n      width: '98%',\n    },\n  },\n  querySectionheader: {\n    marginTop: '5px',\n    textAlign: 'center',\n  },\n  queryExplanationText: {\n    color: 'rgba(255, 255, 255, 0.7)',\n  },\n}));\n","import { makeStyles, Typography } from '@material-ui/core';\nimport { ToggleButton } from '@material-ui/lab';\nimport { ShipSpecialty } from 'models/shipBuilds/shipSpecialty';\nimport { Dispatch, SetStateAction } from 'react';\nimport { useSharedStyles } from './sharedStyles';\n\nconst useStyles = makeStyles((theme) => ({\n  querySpecialtyButtons: {\n    display: 'grid',\n    gridTemplate: '1fr 1fr 1fr 1fr 1fr / 1fr 1fr',\n    '& button': {\n      margin: '3px',\n    },\n    [theme.breakpoints.up('lg')]: {\n      gridTemplate: '1fr 1fr / 1fr 1fr 1fr 1fr 1fr',\n    },\n  },\n}));\n\nexport const QuerySpecialization = (props: {\n  selectedSpecialties: string[];\n  setSpecialties: Dispatch<SetStateAction<string[]>>;\n}) => {\n  const { selectedSpecialties, setSpecialties } = props;\n  const sharedClasses = useSharedStyles();\n  const classes = useStyles();\n\n  const handleSpecialties = (special: string) => {\n    let newSpecials: string[] = [];\n    if (selectedSpecialties.includes(special)) {\n      newSpecials = selectedSpecialties.filter((v) => v !== special);\n    } else {\n      newSpecials = [...selectedSpecialties, special];\n    }\n    setSpecialties(newSpecials);\n  };\n\n  return (\n    <div className={sharedClasses.querySection}>\n      <h3 className={sharedClasses.querySectionheader}>Ship Specializations</h3>\n\n      <Typography className={sharedClasses.queryExplanationText}>\n        Select specializations that the ship should fulfill.\n      </Typography>\n\n      <div className={classes.querySpecialtyButtons}>\n        {getSpecialties().map((special) => (\n          <ToggleButton\n            value={special}\n            key={special}\n            selected={selectedSpecialties.includes(special)}\n            onChange={() => handleSpecialties(special)}\n          >\n            {special}\n          </ToggleButton>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst getSpecialties = (): string[] => {\n  let specialties: string[] = [];\n\n  for (const speciality in ShipSpecialty) {\n    specialties = [\n      ...specialties,\n      ShipSpecialty[speciality as keyof typeof ShipSpecialty],\n    ];\n  }\n  return specialties;\n};\n","export default __webpack_public_path__ + \"static/media/Engineer_icon.0eb84776.svg\";","import { MouseEvent } from 'react';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { makeStyles, Tooltip } from '@material-ui/core';\nimport BlockIcon from '@material-ui/icons/Block';\nimport engineerIcon from 'assets/shipBuilds/Engineer_icon.svg';\n\ninterface IEngToggleGroupProps {\n  handleEngLevelChange: (_: MouseEvent<HTMLElement>, newValue: number) => void;\n  engLevel: number | null;\n}\n\nconst useStyles = makeStyles({\n  engButton: {\n    display: 'flex',\n    '& img': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n});\n\nexport const EngToggleGroup = (props: IEngToggleGroupProps) => {\n  const { engLevel, handleEngLevelChange } = props;\n  const classes = useStyles();\n\n  return (\n    <ToggleButtonGroup\n      value={engLevel}\n      exclusive\n      onChange={handleEngLevelChange}\n    >\n      <ToggleButton value={0}>\n        <Tooltip title=\"No Engineering\" arrow>\n          <div className={classes.engButton}>\n            <BlockIcon />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={1}>\n        <Tooltip title=\"Simple Engineering\" arrow>\n          <div className={classes.engButton}>\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={2}>\n        <Tooltip title=\"Moderate Engineering\" arrow>\n          <div className={classes.engButton}>\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={3}>\n        <Tooltip title=\"End-Game/Extreme Engineering\" arrow>\n          <div className={classes.engButton}>\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n","import { TextField } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildAddText {\n  id: string;\n  label: string;\n  isMultiline: boolean;\n  value: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\n\n/**\n *\n */\nexport const BuildAddText = (props: IBuildAddText) => {\n  const { id, label, value, onChange, isMultiline, disabled } = props;\n  return (\n    <TextField\n      variant=\"outlined\"\n      id={id}\n      label={label}\n      multiline={isMultiline}\n      rowsMax={10}\n      value={value}\n      onChange={onChange}\n      disabled={disabled}\n    />\n  );\n};\n","import { Autocomplete } from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport { sortItems } from 'functions/sort';\nimport { ChangeEvent } from 'react';\nimport { IShipInfo } from 'models/shipBuilds';\nimport { useShipMap } from 'hooks/shipBuilds/useShipMap';\n\nconst findShipName = (ships: IShipInfo[], shipID: string | null) => {\n  if (shipID === null) {\n    return null;\n  }\n  const shipName = ships.find((x) => x.shipId === shipID);\n  return shipName;\n};\n\ninterface IShipAutocompleteProps {\n  shipType: string | null;\n  handleShipChange: (event: ChangeEvent<{}>, value: IShipInfo | null) => void;\n}\n\nexport const ShipAutocomplete = (props: IShipAutocompleteProps) => {\n  const { shipType, handleShipChange } = props;\n  const ships = useShipMap();\n\n  return (\n    <Autocomplete\n      id=\"shipType\"\n      options={sortItems(ships, 'name')}\n      autoHighlight\n      getOptionLabel={(option) => option.name}\n      renderOption={(option) => (\n        <>\n          <span>{option.name}</span>\n        </>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Ship Type\"\n          variant=\"outlined\"\n          inputProps={{\n            ...params.inputProps,\n            autocomplete: 'new-password',\n          }}\n        />\n      )}\n      value={findShipName(ships, shipType)}\n      onChange={handleShipChange}\n    />\n  );\n};\n","import Ships from 'data/shipBuilds/shipMap.json';\nimport { IShipInfo } from 'models/shipBuilds';\n\nexport const useShipMap = () => {\n  const ships: IShipInfo[] = Ships;\n  return ships;\n};\n\nexport const useShipIdfromMap = (shipId?: string) => {\n  if (shipId) {\n    const ships: IShipInfo[] = Ships;\n    const ship = ships.find((x) => x.shipId === shipId);\n    return ship;\n  }\n  return undefined;\n};\n","import { FormControlLabel, Checkbox } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildCheckBoxProps {\n  label: string;\n  name: string;\n  checked: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n  disabled?: boolean;\n}\nexport const BuildCheckBox = (props: IBuildCheckBoxProps) => {\n  const { label, name, checked, onChange, disabled } = props;\n  return (\n    <FormControlLabel\n      label={label}\n      control={\n        <Checkbox\n          name={name}\n          checked={checked}\n          onChange={onChange}\n          disabled={disabled}\n        />\n      }\n    />\n  );\n};\n","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { IBuildInfoInsert } from 'models/shipBuilds/buildInfoInsert';\n\nconst AddBuildMutation = loader('../../graphql/insertOneShipBuildsv2.gql');\nconst ReplaceBuildMutation = loader('../../graphql/replaceOneShipBuildsv2.gql');\nconst UpdateBuildMutation = loader(\n  '../../graphql/updateRelatedOneShipBuildsv2.gql'\n);\n\nexport const useShipBuildMutations = () => {\n  return {\n    addBuild: useAddBuild(),\n    replaceBuild: useReplaceBuild(),\n    updateVariants: useUpdateVariantBuilds(),\n    updateRelated: useUpdateRelatedBuilds(),\n  };\n};\n\nconst useAddBuild = () => {\n  const [addBuildMutation] = useMutation<{\n    insertOneShipBuildsv2: IBuildInfoInsert;\n  }>(AddBuildMutation);\n\n  const addShipBuild = async (build: IBuildInfoInsert) => {\n    const addedBuild = await addBuildMutation({\n      variables: {\n        build: {\n          ...build,\n        },\n      },\n    });\n    return addedBuild;\n  };\n\n  return addShipBuild;\n};\n\nconst useUpdateRelatedBuilds = () => {\n  const [updateBuildMutation] = useMutation(UpdateBuildMutation);\n\n  const updateRelatedBuilds = async (id: string, relatedBuilds: string[]) => {\n    const updatedBuild = await updateBuildMutation({\n      variables: {\n        build: {\n          _id: id,\n        },\n        input: {\n          related: relatedBuilds,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n  return updateRelatedBuilds;\n};\n\nconst useUpdateVariantBuilds = () => {\n  const [updateBuildMutation] = useMutation(UpdateBuildMutation);\n\n  const updateVariantBuilds = async (id: string, variantBuilds: string[]) => {\n    const updatedBuild = await updateBuildMutation({\n      variables: {\n        build: {\n          _id: id,\n        },\n        input: {\n          variants: variantBuilds,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n  return updateVariantBuilds;\n};\n\nconst useReplaceBuild = () => {\n  const [replaceBuildMutation] = useMutation<IBuildInfoInsert>(\n    ReplaceBuildMutation\n  );\n\n  const replaceShipBuild = async (build: IBuildInfoInsert) => {\n    const updatedBuild = await replaceBuildMutation({\n      variables: {\n        buildID: build._id,\n        build: {\n          ...build,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n\n  return replaceShipBuild;\n};\n","import { useQuery } from '@apollo/client';\nimport { IBuildInfov2 } from 'models/shipBuilds';\nimport { loader } from 'graphql.macro';\nimport { useShipBuildMutations } from './useShipBuildMutations';\nimport { IBuildInfoInsert } from 'models/shipBuilds/buildInfoInsert';\n\nconst AllShipBuildsv2s = loader('../../graphql/allShipBuildsv2s.gql');\n\nexport const useShipBuilds = () => {\n  const addRelated = useAddRelatedBuild();\n  const addVariant = useAddVariantBuild();\n  const { shipBuilds, loading } = useAllShipBuilds();\n  const { addBuild, replaceBuild } = useShipBuildMutations();\n  return {\n    loading,\n    shipBuilds,\n    addBuild,\n    addRelated,\n    addVariant,\n    replaceBuild,\n  };\n};\n\nexport const useAllShipBuilds = () => {\n  const { data, loading, error } = useQuery<{\n    shipBuildsv2s: IBuildInfov2[];\n  }>(AllShipBuildsv2s);\n  if (error) {\n    throw new Error(`Failed to fetch ship builds: ${error.message}`);\n  }\n  const shipBuilds = data?.shipBuildsv2s ?? [];\n\n  return { shipBuilds, loading };\n};\n\nconst useAddRelatedBuild = () => {\n  const { addBuild, updateRelated } = useShipBuildMutations();\n  const addRelatedBuild = async (\n    currentID: string,\n    shipBuilds: IBuildInfov2[],\n    buildtoInsert: IBuildInfoInsert\n  ) => {\n    const currentBuild = shipBuilds.find(\n      (x) => ((x._id as unknown) as string) === currentID\n    );\n    if (currentBuild) {\n      const relatedBuilds = currentBuild.related;\n\n      const tempBuild = buildtoInsert;\n      tempBuild.related = currentBuild.related;\n      tempBuild.related = [...tempBuild.related, currentID];\n      const addedBuild:\n        | { insertOneShipBuildsv2: IBuildInfov2 }\n        | undefined\n        | null = (await addBuild(tempBuild)).data;\n      console.log(addedBuild);\n      if (addedBuild) {\n        const buildID = (addedBuild.insertOneShipBuildsv2\n          ._id as unknown) as string;\n        if (buildID) {\n          await updateRelated(currentID, [...relatedBuilds, buildID]);\n          for (const id of relatedBuilds) {\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            if (build) {\n              const newRelated = [...build.related, buildID];\n              await updateRelated((build._id as unknown) as string, newRelated);\n            }\n          }\n        }\n      } else {\n        throw new Error('Reference build and related builds not updated');\n      }\n    } else {\n      throw new Error('Reference build cannot be found');\n    }\n  };\n  return addRelatedBuild;\n};\n\nconst useAddVariantBuild = () => {\n  const { addBuild, updateVariants, updateRelated } = useShipBuildMutations();\n  const addVariantBuild = async (\n    parentID: string,\n    shipBuilds: IBuildInfov2[],\n    buildtoInsert: IBuildInfoInsert\n  ) => {\n    const parentBuild = shipBuilds.find(\n      (x) => ((x._id as unknown) as string) === parentID\n    );\n    if (parentBuild) {\n      const variantBuilds = parentBuild.variants;\n\n      const tempBuild = buildtoInsert;\n      tempBuild.isVariant = true;\n      tempBuild.related = variantBuilds;\n      const addedBuild:\n        | { insertOneShipBuildsv2: IBuildInfov2 }\n        | undefined\n        | null = (await addBuild(tempBuild)).data;\n      if (addedBuild) {\n        const buildID = (addedBuild.insertOneShipBuildsv2\n          ._id as unknown) as string;\n        if (buildID) {\n          console.log(buildID);\n          await updateVariants(parentID, [...variantBuilds, buildID]);\n\n          for (const id of variantBuilds) {\n            console.log(id);\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            if (build) {\n              const newRelated = [...build.related, buildID];\n              await updateRelated((build._id as unknown) as string, newRelated);\n            }\n          }\n        }\n      } else {\n        throw new Error('Parent and related builds were not updated');\n      }\n    } else {\n      throw new Error('Parent cannot be found');\n    }\n  };\n  return addVariantBuild;\n};\n","import { useLocation } from 'react-router-dom';\n\nexport const useUrlQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n","import {\n  Button,\n  FormGroup,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { ObjectId } from 'bson';\nimport { ChangeEvent, MouseEvent, useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { processJSONBuild } from 'functions/shipBuilds';\nimport { IShipInfo, IBuildInfoInsert } from 'models/shipBuilds';\nimport { QuerySpecialization } from '../query/querySpecialities';\nimport { EngToggleGroup } from '../engToggleGroup';\nimport { BuildAddText } from './buildAddText';\nimport { ShipAutocomplete } from '../shipAutocomplete';\nimport { BuildCheckBox } from './buildCheckBox';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\nimport { useUrlQuery } from 'hooks/useURLQuery';\nimport { EDSpinner } from '@admiralfeb/react-components';\nimport { useSnackbar } from 'notistack';\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: 'center',\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n    rowGap: '10px',\n    width: '90%',\n    margin: 'auto',\n    padding: 10,\n  },\n  center: {\n    textAlign: 'center',\n    margin: '0 auto',\n  },\n});\n\n/**\n * Add Build Screen\n *\n * Used for all addition functions:\n *\n * - Normal Build\n * - Related Build\n * - Variant Build\n */\nexport const BuildAdd = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [jsonBuild, setJsonBuild] = useState('');\n  const [buildInfo, setBuildInfo] = useState<IBuildInfoInsert>(DEFAULTBUILD);\n  const [specialties, setSpecialties] = useState<string[]>([]);\n  const {\n    loading,\n    shipBuilds,\n    addBuild,\n    addRelated,\n    addVariant,\n  } = useShipBuilds();\n  const urlQuery = useUrlQuery();\n\n  useEffect(() => {\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, specializations: specialties };\n    });\n  }, [specialties]);\n\n  const handleJSONChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setJsonBuild(event.target.value);\n    const {\n      buildName,\n      shipID,\n      hasGuardian,\n      hasPowerplay,\n      engineering,\n      url,\n    } = processJSONBuild(event.target.value);\n    const engLevel = engineering ? 1 : 0;\n    const _id = buildInfo._id;\n    const info: IBuildInfoInsert = {\n      _id,\n      title: buildName,\n      hasGuardian,\n      hasPowerplay,\n      buildLink: url,\n      shipId: shipID,\n      author: '',\n      specializations: [],\n      engLevel,\n      isBeginner: false,\n      description: '',\n      isVariant: false,\n      variants: [],\n      related: [],\n      jsonBuild: event.target.value,\n    };\n    setBuildInfo(info);\n  };\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n\n    switch (event.target.id) {\n      case 'title':\n        setBuildInfo((info) => {\n          return { ...info, title: value };\n        });\n        break;\n      case 'description':\n        setBuildInfo((info) => {\n          return { ...info, description: value };\n        });\n        break;\n      case 'buildLink':\n        setBuildInfo((info) => {\n          return { ...info, buildLink: value };\n        });\n        break;\n      case 'author':\n        setBuildInfo((info) => {\n          return { ...info, author: value };\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value!.shipId;\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, shipId: ship };\n    });\n  };\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    engLevel: number\n  ) => {\n    setBuildInfo({ ...buildInfo, engLevel });\n  };\n  const handleOtherChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setBuildInfo({ ...buildInfo, [event.target.name]: event.target.checked });\n  };\n  const handleSubmit = async () => {\n    try {\n      if (buildInfo.jsonBuild === '') {\n        throw new Error(\n          'Exported JSON is blank. Verify you have pasted the JSON from Coriolis.'\n        );\n      }\n      if (buildInfo.specializations.length < 1) {\n        throw new Error(\n          'No specializations have been selected. Minimum is one.'\n        );\n      }\n      if (buildInfo.author === '') {\n        throw new Error('Author is blank.');\n      }\n      if (buildInfo.description === '') {\n        throw new Error('More Information is blank.');\n      }\n      if (buildInfo.title === '') {\n        throw new Error(\n          'Build Title is blank. Verify you have pasted the JSON from Coriolis.'\n        );\n      }\n      if (buildInfo.buildLink === '') {\n        throw new Error(\n          'Build Link is blank. Verify you have pasted the JSON from Coriolis.'\n        );\n      }\n      const addType = urlQuery.get('type');\n      console.log(addType);\n      const refID = urlQuery.get('refID');\n      try {\n        switch (addType) {\n          case 'variant':\n            if (refID) {\n              await addVariant(refID, shipBuilds, buildInfo);\n            } else {\n              throw new Error('Build reference ID missing from URL');\n            }\n            break;\n          case 'related':\n            if (refID) {\n              await addRelated(refID, shipBuilds, buildInfo);\n            } else {\n              throw new Error('Build reference ID missing from URL');\n            }\n            break;\n          default:\n            await addBuild(buildInfo);\n            break;\n        }\n        enqueueSnackbar('Build Successfully Submitted', {\n          variant: 'success',\n        });\n        setBuildInfo({ ...DEFAULTBUILD, _id: new ObjectId() });\n        setSpecialties([]);\n        setJsonBuild('');\n      } catch (e) {\n        enqueueSnackbar(`Submit Failed: ${e.message}`, { variant: 'error' });\n        console.error(e);\n      }\n    } catch (e) {\n      enqueueSnackbar(`Submit failed. ${e.message}`, { variant: 'error' });\n    }\n  };\n\n  const textFields = [\n    {\n      id: 'json',\n      label: 'Exported JSON',\n      isMultiline: true,\n      value: jsonBuild,\n      onChange: handleJSONChange,\n    },\n    {\n      id: 'title',\n      label: 'Title',\n      isMultiline: false,\n      value: buildInfo.title,\n      onChange: handleTextChange,\n      disabled: false,\n    },\n    {\n      id: 'description',\n      label: 'More Information - Accepts markdown',\n      isMultiline: true,\n      value: buildInfo.description,\n      onChange: handleTextChange,\n    },\n    {\n      id: 'buildLink',\n      label: 'Build Link - Full',\n      isMultiline: false,\n      value: buildInfo.buildLink,\n      onChange: handleTextChange,\n      disabled: true,\n    },\n    // {\n    //   id: 'variant',\n    //   label: 'Variant Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.variants.join(','),\n    //   onChange: handleTextChange,\n    // },\n    // {\n    //   id: 'related',\n    //   label: 'Related Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.related.join(','),\n    //   onChange: handleTextChange,\n    // },\n    {\n      id: 'author',\n      label: 'Author',\n      isMultiline: false,\n      value: buildInfo.author,\n      onChange: handleTextChange,\n    },\n  ];\n\n  const checkFields = [\n    {\n      label: 'Guardian',\n      name: 'hasGuardian',\n      checked: buildInfo.hasGuardian,\n      disabled: true,\n    },\n    {\n      label: 'PowerPlay',\n      name: 'hasPowerplay',\n      checked: buildInfo.hasPowerplay,\n      disabled: true,\n    },\n    { label: 'Beginner', name: 'isBeginner', checked: buildInfo.isBeginner },\n  ];\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <>\n      <Typography variant=\"h3\" className={classes.center}>\n        Add Build Form\n      </Typography>\n      <Paper className={classes.root}>\n        <Button\n          to=\"/information/builds\"\n          component={NavLink}\n          color=\"secondary\"\n          variant=\"outlined\"\n        >\n          Return to builds\n        </Button>\n        <Typography>\n          Save your build in Coriolis and choose Export. Paste the exported JSON\n          into the Exported JSON field.\n        </Typography>\n        <Typography>\n          Verify/enter remaining information and click Submit Build at the\n          bottom.\n        </Typography>\n        {textFields.map((field) => (\n          <BuildAddText key={field.id} {...field} />\n        ))}\n        <ShipAutocomplete\n          shipType={buildInfo.shipId}\n          handleShipChange={handleShipChange}\n        />\n        <QuerySpecialization\n          selectedSpecialties={buildInfo.specializations}\n          setSpecialties={setSpecialties}\n        />\n        <div className={classes.center}>\n          <EngToggleGroup\n            engLevel={buildInfo.engLevel}\n            handleEngLevelChange={handleEngLevelChange}\n          />\n        </div>\n        <FormGroup row className={classes.center}>\n          {checkFields.map((check) => (\n            <BuildCheckBox\n              key={check.name}\n              {...check}\n              onChange={handleOtherChange}\n            />\n          ))}\n        </FormGroup>\n        <Button onClick={handleSubmit} variant=\"outlined\">\n          Submit Build\n        </Button>\n      </Paper>\n    </>\n  );\n};\n\nconst DEFAULTBUILD: IBuildInfoInsert = {\n  _id: new ObjectId(),\n  shipId: 'adder',\n  title: '',\n  specializations: [],\n  buildLink: '',\n  engLevel: 0,\n  hasGuardian: false,\n  hasPowerplay: false,\n  isBeginner: false,\n  author: '',\n  isVariant: false,\n  variants: [],\n  related: [],\n  description: '',\n  jsonBuild: '',\n};\n","import { Chip, makeStyles } from '@material-ui/core';\nimport { IBuildInfov2 } from 'models/shipBuilds';\n\nconst useStyles = makeStyles({\n  chips: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    margin: '5px',\n    '& div': {\n      margin: '1px',\n    },\n  },\n});\n\nexport const TagGroup = (props: { build: IBuildInfov2 }) => {\n  const { build } = props;\n  const classes = useStyles();\n  return (\n    <div className={classes.chips}>\n      {build.specializations.map((v) => (\n        <Chip label={v} key={v} />\n      ))}\n      {build.hasGuardian && <Chip label=\"Guardian\" key=\"guardian\" />}\n      {build.hasPowerplay && <Chip label=\"PowerPlay\" key=\"powerplay\" />}\n      {build.isBeginner && <Chip label=\"Beginner\" key=\"beginner\" />}\n    </div>\n  );\n};\n","import { makeStyles } from '@material-ui/core';\nimport engineerIcon from 'assets/shipBuilds/Engineer_icon.svg';\n\nconst useStyles = makeStyles({\n  engineering: {\n    '& p': {\n      '& img': {\n        height: '20px',\n        width: '20px',\n        verticalAlign: 'middle',\n      },\n    },\n  },\n});\n\nexport const EngIcons = (props: { engLevel: number }) => {\n  const classes = useStyles();\n  let icons: JSX.Element[] = [];\n  if (props.engLevel > 3 || props.engLevel < 1) {\n    return (\n      <div className={classes.engineering}>\n        <p>Engineering Level: None</p>\n      </div>\n    );\n  } else {\n    for (let i = 1; i <= props.engLevel; i++) {\n      icons = [\n        ...icons,\n        <img src={engineerIcon} key={i} alt=\"Engineering Icon\" />,\n      ];\n    }\n    return (\n      <div className={classes.engineering}>\n        <p>\n          <span>Engineering Level:</span> {icons.map((icon) => icon)}\n        </p>\n      </div>\n    );\n  }\n};\n","import {\n  Button,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\nimport { IBuildInfov2, IShipInfo, ShipSize } from 'models/shipBuilds';\nimport { TagGroup } from './tagGroup';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport { useLinks } from 'hooks/useLinks';\nimport { EngIcons } from './engIcons';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '80%',\n    margin: 'auto',\n    padding: 10,\n    marginBottom: 5,\n  },\n  img: {\n    width: 300,\n  },\n  buttonGrid: {\n    display: 'grid',\n    gridTemplate: '1fr 1fr / 1fr 1fr',\n  },\n  flexDown: {\n    display: 'flex',\n    flexDirection: 'column',\n    '& a': {\n      margin: '5px',\n    },\n  },\n  flexAcross: {\n    display: 'flex',\n    flexDirection: 'row',\n    '& a': {\n      flexGrow: 1,\n    },\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  gridDown: {\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n  },\n  margin: {\n    margin: 10,\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetailFull = (props: {\n  foundBuild: IBuildInfov2;\n  shipInfo: IShipInfo | undefined;\n}) => {\n  const classes = useStyles();\n  const { blueprints } = useLinks();\n  const { shipInfo, foundBuild } = props;\n\n  return (\n    <>\n      <Paper className={classes.paper}>\n        <div className={classes.flexAcross}>\n          {shipInfo && (\n            <div className={`${classes.flexDown} ${classes.margin}`}>\n              <img\n                src={shipInfo.shipImg}\n                alt={shipInfo.name}\n                className={classes.img}\n              />\n              <div className={classes.flexAcross}>\n                <Typography>{shipInfo.name}</Typography>\n                <span className={classes.spacer} />\n                <Typography>{ShipSize[shipInfo.size]}</Typography>\n              </div>\n              {shipInfo.requires && (\n                <Typography>Requires: {shipInfo.requires}</Typography>\n              )}\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                href={foundBuild!.buildLink}\n                target=\"_blank\"\n              >\n                Show Build\n              </Button>\n              <div className={classes.buttonGrid}>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  href={shipInfo.shipReview}\n                  target=\"_blank\"\n                >\n                  Pilot's Review\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  href={`${blueprints}?s=${shipInfo.blueprint}`}\n                  target=\"_blank\"\n                >\n                  Ship Anatomy\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  to={`/information/builds/add?type=variant&refID=${\n                    (foundBuild!._id as unknown) as string\n                  }`}\n                  component={NavLink}\n                >\n                  Add Variant\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  to={`/information/builds/add?type=related&refID=${\n                    (foundBuild!._id as unknown) as string\n                  }`}\n                  component={NavLink}\n                >\n                  Add Related\n                </Button>\n              </div>\n            </div>\n          )}\n          <Divider orientation=\"vertical\" flexItem />\n          <div\n            className={`${classes.flexDown} ${classes.spacer} ${classes.margin}`}\n          >\n            <Typography variant=\"h5\">{foundBuild?.title}</Typography>\n            <Typography>Author: {foundBuild?.author}</Typography>\n            <EngIcons engLevel={foundBuild!.engLevel} />\n            <TagGroup build={foundBuild!} />\n            {foundBuild?.description && (\n              <ReactMarkdown\n                plugins={[gfm]}\n                renderers={{ paragraph: Typography }}\n                children={foundBuild.description}\n              />\n            )}\n          </div>\n        </div>\n      </Paper>\n    </>\n  );\n};\n","import {\n  Button,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { useLinks } from 'hooks/useLinks';\nimport { IBuildInfov2, IShipInfo, ShipSize } from 'models/shipBuilds';\nimport ReactMarkdown from 'react-markdown';\nimport { NavLink } from 'react-router-dom';\nimport gfm from 'remark-gfm';\nimport { EngIcons } from './engIcons';\nimport { TagGroup } from './tagGroup';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '90%',\n    margin: 'auto',\n    padding: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  img: {\n    width: 150,\n    flexShrink: 0,\n  },\n  flexrow: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  buttonGrid: {\n    display: 'grid',\n    gridTemplate: '1fr 1fr / 1fr 1fr',\n    gap: 5,\n    padding: 5,\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n}));\n\nexport const BuildDetailMobile = (props: {\n  foundBuild: IBuildInfov2;\n  shipInfo: IShipInfo | undefined;\n}) => {\n  const { blueprints } = useLinks();\n  const { foundBuild, shipInfo } = props;\n  const classes = useStyles();\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.flexrow}>\n        {shipInfo && (\n          <img\n            src={shipInfo!.shipImg}\n            alt={shipInfo!.name}\n            className={classes.img}\n          />\n        )}\n        <div>\n          <Typography variant=\"h5\">{foundBuild.title}</Typography>\n          <Typography>Author: {foundBuild.author}</Typography>\n          <div className={classes.flexrow}>\n            {shipInfo && (\n              <>\n                <Typography>{shipInfo.name}</Typography>\n                <div className={classes.spacer} />\n                <Typography>{ShipSize[shipInfo.size]}</Typography>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        href={foundBuild.buildLink}\n        target=\"_blank\"\n      >\n        Show Build\n      </Button>\n      <Divider style={{ marginTop: '10px' }} />\n      <TagGroup build={foundBuild!} />\n      <EngIcons engLevel={foundBuild!.engLevel} />\n      {foundBuild.description && (\n        <ReactMarkdown\n          plugins={[gfm]}\n          renderers={{ paragraph: Typography }}\n          children={foundBuild.description}\n        />\n      )}\n      <div className={classes.buttonGrid}>\n        {shipInfo && (\n          <>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              href={shipInfo.shipReview}\n              target=\"_blank\"\n            >\n              Pilot's Review\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              href={`${blueprints}?s=${shipInfo.blueprint}`}\n              target=\"_blank\"\n            >\n              Ship Anatomy\n            </Button>\n          </>\n        )}\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          to={`/information/builds/add?type=variant&refID=${\n            (foundBuild!._id as unknown) as string\n          }`}\n          component={NavLink}\n        >\n          Add Variant\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          to={`/information/builds/add?type=related&refID=${\n            (foundBuild!._id as unknown) as string\n          }`}\n          component={NavLink}\n        >\n          Add Related\n        </Button>\n      </div>\n    </Paper>\n  );\n};\n","import {\n  CardMedia,\n  Divider,\n  Typography,\n  Button,\n  CardContent,\n  Card,\n  Fade,\n  makeStyles,\n} from '@material-ui/core';\nimport { IBuildInfov2, ShipSize } from 'models/shipBuilds';\nimport { EngIcons } from './engIcons';\nimport { NavLink } from 'react-router-dom';\nimport { useShipIdfromMap } from 'hooks/shipBuilds/useShipMap';\nimport { TagGroup } from './tagGroup';\nimport { theme } from 'theme';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '400px',\n    minWidth: '400px',\n    margin: '5px',\n  },\n  content: {\n    flexGrow: 1,\n    flexBasis: 'auto',\n    flexWrap: 'wrap',\n  },\n  media: {\n    height: '100px',\n    width: '100px',\n    flexShrink: 0,\n    margin: 'auto',\n  },\n  shipName: {\n    display: 'flex',\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  mediaAndActions: {\n    marginLeft: theme.spacing(1),\n  },\n  actions: {\n    display: 'grid',\n    gridTemplateRows: 'auto',\n    '& a': {\n      minWidth: 121,\n      marginBottom: theme.spacing(1),\n    },\n  },\n});\n\nexport const BuildCard = (props: { shipBuild: IBuildInfov2 | undefined }) => {\n  const { shipBuild } = props;\n  const shipInfo = useShipIdfromMap(shipBuild?.shipId);\n  const classes = useStyles();\n\n  return shipBuild && shipInfo ? (\n    <Fade in={true} timeout={500}>\n      <Card variant=\"outlined\" className={classes.root}>\n        <div className={classes.mediaAndActions}>\n          <CardMedia\n            className={classes.media}\n            image={shipInfo.shipImg}\n            title={shipInfo.name}\n          />\n          <Typography>{ShipSize[shipInfo.size]}</Typography>\n          <div className={classes.actions}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              href={shipBuild.buildLink}\n              target=\"_blank\"\n            >\n              View Build\n            </Button>\n            <Button\n              to={`/builds/detail/${(shipBuild._id as unknown) as string}`}\n              component={NavLink}\n              color=\"primary\"\n              variant=\"contained\"\n              target=\"_blank\"\n            >\n              More Details\n            </Button>\n          </div>\n        </div>\n        <CardContent className={classes.content}>\n          <Typography>{shipBuild.title}</Typography>\n          <Divider />\n          <Typography>{shipInfo.name} </Typography>\n          {shipInfo.requires && (\n            <Typography>Requirement: {shipInfo.requires}</Typography>\n          )}\n          <TagGroup build={shipBuild} />\n          <Divider />\n          <EngIcons engLevel={shipBuild.engLevel} />\n          <Divider />\n          <Typography>Author: {shipBuild.author}</Typography>\n          {shipBuild.variants.length > 0 ? (\n            <Typography>Has Variants</Typography>\n          ) : null}\n          {shipBuild.related.length > 0 ? (\n            <Typography>Has Related Builds</Typography>\n          ) : null}\n          <div className={classes.spacer} />\n        </CardContent>\n      </Card>\n    </Fade>\n  ) : null;\n};\n","import { EDSpinner } from '@admiralfeb/react-components';\nimport { makeStyles, Typography } from '@material-ui/core';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\nimport { BuildCard } from './buildCard';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '90%',\n    margin: 'auto',\n    marginBottom: 5,\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetailBuilds = (props: {\n  title: string;\n  buildIDs: string[];\n}) => {\n  const { title, buildIDs } = props;\n  const classes = useStyles();\n  const { loading, shipBuilds } = useShipBuilds();\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <div className={classes.textCenter}>\n      <Typography variant=\"h4\">{title}</Typography>\n      <div className={classes.paper}>\n        {buildIDs.map((id) => {\n          const build = shipBuilds.find(\n            (x) => ((x._id as unknown) as string) === id\n          );\n          return <BuildCard shipBuild={build} key={id} />;\n        })}\n      </div>\n    </div>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { EDSpinner } from '@admiralfeb/react-components';\nimport { NotFound } from 'components';\nimport {\n  makeStyles,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport { BuildDetailFull } from './buildDetailFull';\nimport { BuildDetailMobile } from './buildDetailMobile';\nimport { BuildDetailBuilds } from './buildDetailBuilds';\nimport { useShipBuildInfo } from 'hooks/shipBuilds/useShipBuildInfo';\n\ninterface RouteParams {\n  id: string;\n}\n\nconst useStyles = makeStyles({\n  textCenter: {\n    textAlign: 'center',\n  },\n});\n\nexport const BuildDetail = () => {\n  let { id } = useParams<RouteParams>();\n  const { loading, shipInfo, foundBuild } = useShipBuildInfo(id);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const classes = useStyles();\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <>\n      <Typography variant=\"h3\" className={classes.textCenter}>\n        Build Detail\n      </Typography>\n      {foundBuild ? (\n        isMobile ? (\n          <BuildDetailMobile foundBuild={foundBuild} shipInfo={shipInfo} />\n        ) : (\n          <BuildDetailFull foundBuild={foundBuild} shipInfo={shipInfo} />\n        )\n      ) : (\n        <NotFound />\n      )}\n      {foundBuild && foundBuild.variants.length > 0 ? (\n        <BuildDetailBuilds\n          title=\"Build Variants\"\n          buildIDs={foundBuild.variants}\n        />\n      ) : null}\n      {foundBuild && foundBuild.related.length > 0 ? (\n        <BuildDetailBuilds\n          title=\"Related Builds\"\n          buildIDs={foundBuild.related}\n        />\n      ) : null}\n    </>\n  );\n};\n","import { getShipInfofromID } from 'functions/shipBuilds';\nimport { useMemo } from 'react';\nimport { useShipBuilds } from './useShipBuilds';\n\n/**\n * Returns the build and ship info for a build provided the id.\n * It also provides the ship builds and loading boolean.\n * @param id id of build\n */\nexport const useShipBuildInfo = (id?: string) => {\n  const { loading, shipBuilds } = useShipBuilds();\n\n  let foundBuild = useMemo(() => {\n    if (id === undefined) {\n      return undefined;\n    }\n    if (loading) {\n      return undefined;\n    }\n\n    let build = shipBuilds.find(\n      (x) => x._id && ((x._id as unknown) as string) === id\n    );\n    if (build) {\n      return build;\n    } else {\n      return null;\n    }\n  }, [id, loading, shipBuilds]);\n\n  let shipInfo = useMemo(() => {\n    if (foundBuild) {\n      return getShipInfofromID(foundBuild.shipId);\n    } else {\n      return undefined;\n    }\n  }, [foundBuild]);\n\n  return { loading, shipBuilds, foundBuild, shipInfo };\n};\n","import { EDSpinner } from '@admiralfeb/react-components';\nimport { useCallback, useEffect, useState } from 'react';\nimport { filterShipBuilds } from 'functions/shipBuilds/filterShipBuilds';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\nimport { IBuildInfov2, IQuery } from 'models/shipBuilds';\nimport { BuildCard } from './buildCard';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n});\n\nexport const BuildList = (props: { buildQuery: IQuery | undefined }) => {\n  const [queriedBuilds, setQueriedBuilds] = useState<IBuildInfov2[]>();\n  const { buildQuery } = props;\n  const { loading, shipBuilds } = useShipBuilds();\n  const classes = useStyles();\n\n  let filterBuilds = useCallback(() => {\n    if (loading) {\n      return;\n    }\n    console.log(shipBuilds);\n    const filtered = filterShipBuilds(shipBuilds, buildQuery);\n    setQueriedBuilds(filtered);\n  }, [loading, shipBuilds, buildQuery]);\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    filterBuilds();\n  }, [loading, filterBuilds]);\n\n  return (\n    <div className={classes.root}>\n      {loading ? (\n        <EDSpinner />\n      ) : (\n        queriedBuilds?.map((ship) => {\n          return (\n            <BuildCard key={(ship._id as unknown) as string} shipBuild={ship} />\n          );\n        })\n      )}\n    </div>\n  );\n};\n","import { IBuildInfov2, IQuery } from 'models/shipBuilds';\nimport { getShipInfofromID } from './getShipInfo';\n\nexport const filterShipBuilds = (\n  shipBuilds: IBuildInfov2[] | undefined,\n  query: IQuery | undefined\n) => {\n  if (shipBuilds && query) {\n    let newList = shipBuilds;\n    if (\n      query.other.showVariants === null ||\n      query.other.showVariants === false\n    ) {\n      newList = newList.filter((build) => build.isVariant === false);\n    }\n    // ship type\n    if (query.ship !== null) {\n      newList = newList.filter((build) => build.shipId === query.ship);\n    }\n    // ship size\n    if (query.size !== null) {\n      newList = newList.filter((build) => {\n        const shipInfo = getShipInfofromID(build.shipId);\n        if (shipInfo?.size === query.size) {\n          return build;\n        } else {\n          return undefined;\n        }\n      });\n    }\n    // Engineering\n    if (query.engLevel !== null) {\n      newList = newList.filter((build) => build.engLevel === query.engLevel);\n    }\n    // Specializations\n    if (query.specialties.length > 0) {\n      console.log(query.specialties);\n      let tempList: IBuildInfov2[] = [];\n      for (const specialty of query.specialties) {\n        if (tempList.length > 0) {\n          tempList = tempList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        } else {\n          tempList = newList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        }\n      }\n      newList = tempList;\n    }\n    // Guardian\n    if (query.other.guardian !== null) {\n      const val = query.other.guardian === 1 ? true : false;\n      newList = newList.filter((build) => build.hasGuardian === val);\n    }\n    // PowerPlay\n    if (query.other.powerplay !== null) {\n      const val = query.other.powerplay === 1 ? true : false;\n      newList = newList.filter((build) => build.hasPowerplay === val);\n    }\n    // Beginner\n    if (query.other.beginner !== null) {\n      const val = query.other.beginner === 1 ? true : false;\n      newList = newList.filter((build) => build.isBeginner === val);\n    }\n\n    return newList;\n  }\n};\n","import { makeStyles, Tooltip } from '@material-ui/core';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { ChangeEvent, Dispatch, MouseEvent, SetStateAction } from 'react';\nimport { IShipInfo } from 'models/shipBuilds';\nimport { ShipAutocomplete } from '../shipAutocomplete';\nimport { useSharedStyles } from './sharedStyles';\n\nconst useStyles = makeStyles((theme) => ({\n  shipQueries: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n  },\n  shipTypeQuery: {\n    [theme.breakpoints.up('lg')]: {\n      minWidth: '200px',\n      margin: '5px',\n      flex: '1 0',\n    },\n  },\n  shipSizeQuery: {\n    margin: 'auto',\n  },\n}));\n\nexport const QueryShip = (props: {\n  shipSize: number | null;\n  setShipSize: Dispatch<SetStateAction<number | null>>;\n  shipType: string | null;\n  setShipType: Dispatch<SetStateAction<string | null>>;\n}) => {\n  const { shipType, setShipType, shipSize, setShipSize } = props;\n  const sharedClasses = useSharedStyles();\n  const classes = useStyles();\n\n  const handleShipSizeChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setShipType(null);\n    setShipSize(newValue);\n  };\n\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value?.shipId;\n    setShipType(ship ?? null);\n    setShipSize(null);\n  };\n\n  return (\n    <div className={sharedClasses.querySection}>\n      <h3 className={sharedClasses.querySectionheader}>Ship Type and Size</h3>\n      <div className={classes.shipQueries}>\n        <div className={classes.shipTypeQuery}>\n          <ShipAutocomplete\n            shipType={shipType}\n            handleShipChange={handleShipChange}\n          />\n        </div>\n        <div className={classes.shipSizeQuery}>\n          <Tooltip\n            title=\"What's the size of the ship you're looking for?\"\n            arrow\n          >\n            <ToggleButtonGroup\n              value={shipSize}\n              exclusive\n              onChange={handleShipSizeChange}\n            >\n              <ToggleButton value={1}>Small</ToggleButton>\n              <ToggleButton value={2}>Medium</ToggleButton>\n              <ToggleButton value={3}>Large</ToggleButton>\n            </ToggleButtonGroup>\n          </Tooltip>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { makeStyles, Typography } from '@material-ui/core';\nimport { SetStateAction, MouseEvent, Dispatch } from 'react';\nimport { EngToggleGroup } from '../engToggleGroup';\nimport { useSharedStyles } from './sharedStyles';\n\nconst useStyles = makeStyles({\n  engineeringQuery: {\n    gridArea: 'engineering',\n  },\n});\n\nexport const QueryEngineering = (props: {\n  engLevel: number | null;\n  setEngLevel: Dispatch<SetStateAction<number | null>>;\n}) => {\n  const { engLevel, setEngLevel } = props;\n  const sharedClasses = useSharedStyles();\n  const classes = useStyles();\n\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setEngLevel(newValue);\n  };\n\n  return (\n    <div\n      className={`${sharedClasses.querySection} ${classes.engineeringQuery}`}\n    >\n      <h3 className={sharedClasses.querySectionheader}>\n        Ship Engineering Level\n      </h3>\n      <Typography className={sharedClasses.queryExplanationText}>\n        Select Engineering level ranging from None to Max Engineering.\n      </Typography>\n      <EngToggleGroup\n        engLevel={engLevel}\n        handleEngLevelChange={handleEngLevelChange}\n      />\n    </div>\n  );\n};\n","import { makeStyles, Tooltip } from '@material-ui/core';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\n\nimport { OtherFilters } from 'models/shipBuilds/otherFilters';\nimport BlockIcon from '@material-ui/icons/Block';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { Dispatch, MouseEvent, SetStateAction } from 'react';\nimport { useSharedStyles } from './sharedStyles';\n\nconst useStyles = makeStyles((theme) => ({\n  queryOtherButtons: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  queryOtherButtonGrids: {\n    display: 'grid',\n    gridTemplateRows: '0.5fr 1fr',\n    margin: '0 10px',\n    '& div': {\n      margin: 'auto',\n      padding: '5px',\n    },\n    '& label': {\n      height: '25px',\n      padding: '5px',\n    },\n  },\n  QueryOtherBeginnerButtons: {\n    borderWidth: '3px',\n    borderStyle: 'solid',\n    borderColor: theme.palette.secondary.main,\n    borderRadius: '5px',\n  },\n}));\n\nexport const QueryOther = (props: {\n  other: OtherFilters;\n  setOther: Dispatch<SetStateAction<OtherFilters>>;\n}) => {\n  const { other, setOther } = props;\n  const sharedClasses = useSharedStyles();\n  const classes = useStyles();\n\n  const handleGuardianChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther((prevState) => ({ ...prevState, guardian: newValue }));\n  };\n  const handlePowerPlayChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther((prevState) => ({ ...prevState, powerplay: newValue }));\n  };\n  const handleBeginnerChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther((prevState) => ({ ...prevState, beginner: newValue }));\n  };\n  const handleShowVariantsChange = (\n    _: MouseEvent<HTMLElement>,\n    checked: boolean\n  ) => {\n    setOther((prevState) => ({ ...prevState, showVariants: checked }));\n  };\n\n  return (\n    <div className={sharedClasses.querySection}>\n      <h3 className={sharedClasses.querySectionheader}>Other Filters</h3>\n      <div className={classes.queryOtherButtons}>\n        <Tooltip title=\"Show all builds, including variants\" arrow>\n          <div className={classes.queryOtherButtonGrids}>\n            <label>Show Variants</label>\n            <ToggleButtonGroup\n              value={other.showVariants}\n              exclusive\n              onChange={handleShowVariantsChange}\n            >\n              <ToggleButton value={true}>\n                <CheckIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Should the build have Guardian components?\" arrow>\n          <div className={classes.queryOtherButtonGrids}>\n            <label>Guardian</label>\n            <ToggleButtonGroup\n              value={other.guardian}\n              exclusive\n              onChange={handleGuardianChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Does the build have Power Play modules?\" arrow>\n          <div className={classes.queryOtherButtonGrids}>\n            <label>Power Play</label>\n            <ToggleButtonGroup\n              value={other.powerplay}\n              exclusive\n              onChange={handlePowerPlayChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Is this build easy to achieve early-game?\" arrow>\n          <div\n            className={`${classes.queryOtherButtonGrids} ${classes.QueryOtherBeginnerButtons}`}\n          >\n            <label>Beginner</label>\n            <ToggleButtonGroup\n              value={other.beginner}\n              exclusive\n              onChange={handleBeginnerChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import { Button, makeStyles } from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: 'center',\n    gridArea: 'buttons',\n    '& button': {\n      margin: '5px',\n    },\n  },\n});\n\nexport const QueryActions = (props: { resetQueries: () => void }) => {\n  const classes = useStyles();\n  const { resetQueries } = props;\n  return (\n    <div className={classes.root}>\n      <Button\n        onClick={resetQueries}\n        color=\"primary\"\n        variant=\"outlined\"\n        className=\"resetButton\"\n      >\n        Reset Selections\n      </Button>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        component={NavLink}\n        to=\"/builds/add\"\n      >\n        Add Build\n      </Button>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { IQuery, OtherFilters } from 'models/shipBuilds';\n\nimport { makeStyles, Paper } from '@material-ui/core';\nimport { QuerySpecialization } from './querySpecialities';\nimport { QueryShip } from './queryShip';\nimport { QueryEngineering } from './queryEngineering';\nimport { QueryOther } from './queryOther';\nimport { useUrlQuery } from 'hooks/useURLQuery';\nimport { QueryActions } from './queryActions';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'grid',\n    rowGap: '2px',\n    width: '99%',\n    gridTemplateAreas: `\n    'specializations'\n    'engineering'\n    'ship'\n    'other'\n    'buttons'`,\n    textAlign: 'center',\n    [theme.breakpoints.up('lg')]: {\n      gridTemplateAreas: `\n        'specializations    engineering'\n        'ship   other'\n        'buttons    buttons'`,\n      gridTemplateRows: '1fr 1fr 0.1fr',\n      rowGap: '5px',\n      columnGap: '5px',\n    },\n  },\n}));\n\nexport const Query = (props: { updateQuery: (query: IQuery) => void }) => {\n  const [shipType, setShipType] = useState<string | null>(null);\n  const [shipSize, setShipSize] = useState<number | null>(null);\n  const [engLevel, setEngLevel] = useState<number | null>(null);\n  const [selectedSpecialties, setSpecialties] = useState<string[]>([]);\n  const [other, setOther] = useState<OtherFilters>({\n    guardian: null,\n    powerplay: null,\n    beginner: null,\n    showVariants: null,\n  });\n  let urlQuery = useUrlQuery();\n  const { updateQuery } = props;\n  const classes = useStyles();\n\n  useEffect(() => {\n    const queryParam = urlQuery.get('beginner');\n    if (queryParam === 'true') {\n      setOther({ ...other, beginner: 1 });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const query: IQuery = {\n      ship: shipType,\n      size: shipSize,\n      engLevel,\n      specialties: selectedSpecialties,\n      other,\n    };\n    console.log(query);\n    updateQuery(query);\n  }, [shipType, shipSize, engLevel, selectedSpecialties, other, updateQuery]);\n\n  const resetQueries = () => {\n    setShipType(null);\n    setShipSize(null);\n    setEngLevel(null);\n    setSpecialties([]);\n    setOther({\n      guardian: null,\n      powerplay: null,\n      beginner: null,\n      showVariants: null,\n    });\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <QuerySpecialization\n        selectedSpecialties={selectedSpecialties}\n        setSpecialties={setSpecialties}\n      />\n      <QueryShip\n        shipType={shipType}\n        setShipType={setShipType}\n        shipSize={shipSize}\n        setShipSize={setShipSize}\n      />\n      <QueryEngineering engLevel={engLevel} setEngLevel={setEngLevel} />\n      <QueryOther other={other} setOther={setOther} />\n      <QueryActions resetQueries={resetQueries} />\n    </Paper>\n  );\n};\n","import {\n  Fab,\n  Fade,\n  makeStyles,\n  Slide,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport { useCallback, useRef, useState } from 'react';\nimport { BuildList } from './builds/buildList';\nimport { IQuery } from 'models/shipBuilds';\nimport { Query } from './query/query';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nconst useStyles = makeStyles({\n  root: {\n    '& p': {\n      textAlign: 'center',\n    },\n    width: '95%',\n    margin: 'auto',\n  },\n  header: { textAlign: 'center' },\n  fab: {\n    position: 'fixed',\n    bottom: '5px',\n    right: '10px',\n  },\n});\n\nexport const QueryandBuildList = () => {\n  const [query, setQuery] = useState<IQuery>();\n  const buildRef = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const classes = useStyles();\n\n  const handleQuery = useCallback((query: IQuery) => {\n    setQuery(query);\n  }, []);\n\n  const handleFab = () => {\n    if (buildRef.current) {\n      buildRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <Fade in={true}>\n      <div className={classes.root}>\n        <Typography variant=\"h3\" className={classes.header}>\n          Ship Build Archive\n        </Typography>\n        <Query updateQuery={handleQuery} />\n        <div ref={buildRef}>\n          <BuildList buildQuery={query} />\n        </div>\n        <Slide direction=\"left\" in={isMobile} timeout={1000}>\n          <div className={classes.fab}>\n            <Fab color=\"primary\" className=\"fab\" onClick={handleFab}>\n              <ArrowDownwardIcon />\n            </Fab>\n          </div>\n        </Slide>\n      </div>\n    </Fade>\n  );\n};\n","import { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { EDSpinner } from '@admiralfeb/react-components';\nimport {\n  QueryandBuildList,\n  BuildAdd,\n  BuildDetail,\n} from 'components/shipBuilds';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\n\nexport const ShipBuildSystemRoutes = () => {\n  const { path } = useRouteMatch();\n  const { loading } = useShipBuilds();\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <Switch>\n      <Route path={`${path}/detail/:id`}>\n        <BuildDetail />\n      </Route>\n      <Route path={path} exact>\n        <QueryandBuildList />\n      </Route>\n      <Route path={`${path}/add`}>\n        <BuildAdd />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default ShipBuildSystemRoutes;\n"],"sourceRoot":""}