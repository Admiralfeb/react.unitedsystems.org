{"version":3,"sources":["models/shipBuilds/shipSpecialty.ts","models/shipBuilds/index.ts","models/shipBuilds/shipSize.ts","functions/shipBuilds/getShipInfo.ts","functions/shipBuilds/processJSONBuild.ts","components/shipBuilds/query/sharedStyles.ts","components/shipBuilds/query/querySpecialities.tsx","assets/shipBuilds/Engineer_icon.svg","components/shipBuilds/engToggleGroup.tsx","components/shipBuilds/builds/buildAddText.tsx","components/shipBuilds/shipAutocomplete.tsx","hooks/shipBuilds/useShipMap.ts","components/shipBuilds/builds/buildCheckBox.tsx","gql/mutations/shipBuild.insert.ts","gql/mutations/shipBuild.replace.ts","gql/mutations/shipBuild.update.ts","hooks/shipBuilds/useShipBuildMutations.ts","gql/queries/shipBuilds.ts","hooks/shipBuilds/useShipBuilds.ts","components/shipBuilds/builds/buildAdd.tsx","components/shipBuilds/builds/tagGroup.tsx","components/shipBuilds/builds/engIcons.tsx","components/shipBuilds/builds/buildDetailFull.tsx","components/shipBuilds/builds/buildDetailMobile.tsx","components/shipBuilds/builds/buildCard.tsx","components/shipBuilds/builds/buildDetailBuilds.tsx","components/shipBuilds/builds/buildDetail.tsx","hooks/shipBuilds/useShipBuildInfo.ts","components/shipBuilds/builds/buildList.tsx","functions/shipBuilds/filterShipBuilds.ts","components/shipBuilds/query/queryShip.tsx","components/shipBuilds/query/queryEngineering.tsx","components/shipBuilds/query/queryOther.tsx","components/shipBuilds/query/queryActions.tsx","components/shipBuilds/query/query.tsx","components/shipBuilds/queryandBuildList.tsx","routes/shipBuilds.routes.tsx"],"names":["ShipSpecialty","ShipSize","getShipInfofromID","shipID","shipMap","find","x","shipId","checkEngineering","hardpoints","internals","core","engineering","weaponEng","filter","hp","blueprint","internalEng","i","ppEng","powerPlant","thrustEng","thrusters","fsdEng","frameShiftDrive","lifeEng","lifeSupport","pdEng","powerDistributor","sensorEng","sensors","length","checkPowerplay","powerplay","powerplayInternals","group","toLowerCase","startsWith","forEach","powerplayHardpoint","name","checkGuardian","guardian","ppName","pdName","guardianHardPoints","guardianInternals","useSharedStyles","makeStyles","theme","querySection","width","minWidth","height","border","padding","borderRadius","margin","marginTop","spacing","marginBottom","textAlign","breakpoints","up","querySectionheader","queryExplanationText","color","useStyles","querySpecialtyButtons","display","gridTemplate","marginRight","QuerySpecialization","props","selectedSpecialties","setSpecialties","sharedClasses","classes","className","Typography","getSpecialties","map","special","ToggleButton","value","selected","includes","onChange","newSpecials","v","handleSpecialties","specialties","speciality","engButton","EngToggleGroup","engLevel","handleEngLevelChange","ToggleButtonGroup","exclusive","Tooltip","title","arrow","src","engineerIcon","alt","BuildAddText","id","label","isMultiline","disabled","TextField","variant","multiline","rowsMax","findShipName","ships","ShipAutocomplete","shipType","handleShipChange","Ships","Autocomplete","options","sortItems","autoHighlight","getOptionLabel","option","renderOption","renderInput","params","inputProps","autocomplete","BuildCheckBox","checked","FormControlLabel","control","Checkbox","InsertShipBuild","gql","ReplaceShipBuild","UpdateRelatedShipBuilds","useShipBuildMutations","addBuild","useAddBuild","replaceBuild","useReplaceBuild","updateVariants","useUpdateVariantBuilds","updateRelated","useUpdateRelatedBuilds","useMutation","addBuildMutation","build","a","variables","addedBuild","updateBuildMutation","relatedBuilds","_id","input","related","updatedBuild","variantBuilds","variants","replaceBuildMutation","buildID","QueryAllShipBuilds","useShipBuilds","addRelated","useAddRelatedBuild","addVariant","useAddVariantBuild","useAllShipBuilds","shipBuilds","loading","error","useQuery","data","shipBuildsv2s","currentID","buildtoInsert","currentBuild","tempBuild","console","log","insertOneShipBuildsv2","newRelated","Error","parentID","parentBuild","isVariant","root","rowGap","center","BuildAdd","enqueueSnackbar","useSnackbar","useState","jsonBuild","setJsonBuild","DEFAULTBUILD","buildInfo","setBuildInfo","urlQuery","useUrlQuery","useEffect","specializations","handleTextChange","event","target","info","description","buildLink","author","handleOtherChange","handleSubmit","addType","get","refID","ObjectId","message","textFields","json","JSON","parse","buildName","references","url","components","standard","internal","hasGuardian","hasPowerplay","processJSONBuild","isBeginner","checkFields","Container","maxWidth","Paper","Button","to","component","NavLink","field","href","_","ship","FormGroup","row","check","onClick","chips","flexDirection","flexWrap","TagGroup","Chip","verticalAlign","EngIcons","icons","icon","paper","img","buttonGrid","flexDown","flexAcross","flexGrow","spacer","gridDown","textCenter","BuildDetailFull","blueprints","useLinks","shipInfo","foundBuild","shipImg","size","requires","shipReview","Divider","orientation","flexItem","plugins","gfm","renderers","paragraph","link","Link","children","flexShrink","flexrow","gap","BuildDetailMobile","style","content","flexBasis","media","shipName","mediaAndActions","marginLeft","actions","gridTemplateRows","BuildCard","shipBuild","useShipIdfromMap","Fade","in","timeout","Card","CardMedia","image","CardContent","justifyContent","BuildDetailBuilds","buildIDs","BuildDetail","useMemo","undefined","useShipBuildInfo","useParams","useTheme","isMobile","useMediaQuery","down","BuildList","queriedBuilds","setQueriedBuilds","buildQuery","filterBuilds","useCallback","filtered","query","newList","showVariants","tempList","specialty","val","beginner","filterShipBuilds","shipQueries","shipTypeQuery","flex","shipSizeQuery","QueryShip","setShipType","shipSize","setShipSize","newValue","engineeringQuery","gridArea","QueryEngineering","setEngLevel","queryOtherButtons","queryOtherButtonGrids","QueryOtherBeginnerButtons","borderWidth","borderStyle","borderColor","palette","secondary","main","QueryOther","other","setOther","prevState","QueryActions","resetQueries","gridTemplateAreas","columnGap","Query","history","useHistory","updateQuery","shipParam","sizeParam","sizeNumber","parseInt","e","engParam","engNumber","specialtiesParam","getAll","guardianParam","guardianValue","powerplayParam","powerplayValue","beginnerParam","variantValue","queryString","qs","stringify","push","header","fab","position","bottom","right","QueryandBuildList","setQuery","buildRef","useRef","handleQuery","ref","Slide","direction","Fab","current","scrollIntoView","behavior","ShipBuildSystemRoutes","path","useRouteMatch","exact"],"mappings":"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","file":"static/js/4.0b8eb05f.chunk.js","sourcesContent":["export enum ShipSpecialty {\n  jump = 'Jump Ship',\n  hge = 'HGE Farming',\n  cargo = 'Cargo',\n  passenger = 'Passenger',\n  mining = 'Miner',\n  pve = 'Combat - PvE',\n  pvp = 'Combat - PvP',\n  ax = 'Combat - Anti-Xeno',\n  racing = 'Racing',\n  multi = 'Multi-Purpose',\n}\n","export * from './buildInfo';\nexport * from './buildInfoInsert';\nexport * from './otherFilters';\nexport * from './query';\nexport * from './shipInfo';\nexport * from './shipSize';\nexport * from './shipSpecialty';\n","export enum ShipSize {\n  'S' = 1,\n  'M',\n  'L',\n}\n","import shipMap from 'data/shipBuilds/shipMap.json';\nimport { IShipInfo } from 'models/shipBuilds/shipInfo';\n\nexport const getShipInfofromID = (shipID: string): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find((x) => x.shipId === shipID);\n  return ship;\n};\nexport const getShipInfofromName = (\n  shipName: string\n): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find(\n    (x) => x.name.toLowerCase() === shipName.toLowerCase()\n  );\n  return ship;\n};\n","import {\n  ICoriolisLoadout,\n  IShipCoreModules,\n  IShipHardpoints,\n  IShipInternalModules,\n} from 'models/shipBuilds/coriolis';\n\nexport const processJSONBuild = (\n  json: string\n): {\n  buildName: string;\n  shipID: string;\n  hasGuardian: boolean;\n  hasPowerplay: boolean;\n  engineering: boolean;\n  url: string;\n} => {\n  const build: ICoriolisLoadout = JSON.parse(json);\n\n  const buildName = build.name;\n  const shipID = build.references[0].shipId ?? '';\n  const url = build.references[0].url ?? '';\n\n  const components = build.components;\n  const core = components.standard;\n  const hardpoints = components.hardpoints;\n  const internals = components.internal;\n\n  // Check for Guardian\n  const guardian = checkGuardian(core, hardpoints, internals);\n\n  // Check for PowerPlay\n  const powerplay = checkPowerplay(internals, hardpoints);\n\n  // Check for engineering\n  const engineering = checkEngineering(hardpoints, internals, core);\n\n  return {\n    buildName,\n    shipID,\n    hasGuardian: guardian,\n    hasPowerplay: powerplay,\n    engineering,\n    url,\n  };\n};\n\n/**\n * Check for Engineered modules, except the armor\n * @param hardpoints\n * @param internals\n * @param core\n */\nconst checkEngineering = (\n  hardpoints: IShipHardpoints,\n  internals: IShipInternalModules,\n  core: IShipCoreModules\n) => {\n  let engineering = false;\n  const weaponEng = hardpoints.filter((hp) => hp?.blueprint);\n  const internalEng = internals.filter((i) => i?.blueprint);\n  const ppEng = core.powerPlant.blueprint;\n  const thrustEng = core.thrusters.blueprint;\n  const fsdEng = core.frameShiftDrive.blueprint;\n  const lifeEng = core.lifeSupport.blueprint;\n  const pdEng = core.powerDistributor.blueprint;\n  const sensorEng = core.sensors.blueprint;\n  if (\n    weaponEng.length > 0 ||\n    internalEng.length > 0 ||\n    ppEng ||\n    thrustEng ||\n    fsdEng ||\n    lifeEng ||\n    pdEng ||\n    sensorEng\n  ) {\n    engineering = true;\n  }\n  return engineering;\n};\n\n/**\n * Check for Powerplay modules\n * @param internals\n * @param hardpoints\n */\nconst checkPowerplay = (\n  internals: IShipInternalModules,\n  hardpoints: IShipHardpoints\n) => {\n  let powerplay = false;\n  const powerplayWeaponNames = [\n    'disruptor',\n    'imperial hammer',\n    'pack-hound',\n    'mining lance',\n    'enforcer',\n    'cytoscrambler',\n    'retributor',\n    'advanced plasma accelerator',\n    'pacifier',\n    'rocket propelled fsd disruptor',\n  ];\n  const powerplayInternals = internals.find((x) =>\n    x?.group?.toLowerCase().startsWith('prismatic')\n  );\n  if (powerplay === false && powerplayInternals) {\n    powerplay = true;\n  }\n  powerplayWeaponNames.forEach((x) => {\n    if (powerplay === false) {\n      const powerplayHardpoint = hardpoints.find(\n        (hp) => hp?.name?.toLowerCase() === x.toLowerCase()\n      );\n      powerplay = powerplayHardpoint ? true : false;\n    }\n  });\n  return powerplay;\n};\n\n/**\n * Check for Guardian modules/weapons\n * @param core\n * @param hardpoints\n * @param internals\n */\nconst checkGuardian = (\n  core: IShipCoreModules,\n  hardpoints: IShipHardpoints,\n  internals: IShipInternalModules\n) => {\n  let guardian = false;\n  const ppName = (core.powerPlant.name as string) ?? '';\n  const pdName = (core.powerDistributor.name as string) ?? '';\n  const guardianHardPoints = hardpoints.find((x) =>\n    x?.group?.toLowerCase().startsWith('guardian')\n  );\n  const guardianInternals = internals.find((x) =>\n    x?.group?.toLowerCase().startsWith('guardian')\n  );\n  if (\n    ppName.toLowerCase().startsWith('guardian') ||\n    pdName.toLowerCase().startsWith('guardian') ||\n    guardianHardPoints ||\n    guardianInternals\n  ) {\n    guardian = true;\n  }\n  return guardian;\n};\n","import { makeStyles } from '@material-ui/core';\n\nexport const useSharedStyles = makeStyles((theme) => ({\n  querySection: {\n    width: '90%',\n    minWidth: '90%',\n    height: '100%',\n    border: '2px solid gray',\n    padding: '5px',\n    borderRadius: '15px',\n    margin: 'auto',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    textAlign: 'center',\n    [theme.breakpoints.up('lg')]: {\n      width: '98%',\n    },\n  },\n  querySectionheader: {\n    marginTop: '5px',\n    textAlign: 'center',\n  },\n  queryExplanationText: {\n    color: 'rgba(255, 255, 255, 0.7)',\n  },\n}));\n","import { makeStyles, Typography } from '@material-ui/core';\nimport { ToggleButton } from '@material-ui/lab';\nimport { ShipSpecialty } from 'models/shipBuilds/shipSpecialty';\nimport { Dispatch, SetStateAction } from 'react';\nimport { useSharedStyles } from './sharedStyles';\n\nconst useStyles = makeStyles((theme) => ({\n  querySpecialtyButtons: {\n    display: 'grid',\n    gridTemplate: 'repeat(5, 1fr) / repeat(2, 1fr)',\n    '& button': {\n      marginRight: theme.spacing(1),\n      marginTop: theme.spacing(1),\n    },\n    [theme.breakpoints.up('lg')]: {\n      gridTemplate: 'repeat(2, 1fr) / repeat(5, 1fr)',\n    },\n  },\n}));\n\nexport const QuerySpecialization = (props: {\n  selectedSpecialties: string[];\n  setSpecialties: Dispatch<SetStateAction<string[]>>;\n}) => {\n  const { selectedSpecialties, setSpecialties } = props;\n  const sharedClasses = useSharedStyles();\n  const classes = useStyles();\n\n  const handleSpecialties = (special: string) => {\n    let newSpecials: string[] = [];\n    if (selectedSpecialties.includes(special)) {\n      newSpecials = selectedSpecialties.filter((v) => v !== special);\n    } else {\n      newSpecials = [...selectedSpecialties, special];\n    }\n    setSpecialties(newSpecials);\n  };\n\n  return (\n    <div className={sharedClasses.querySection}>\n      <h3 className={sharedClasses.querySectionheader}>Ship Specializations</h3>\n\n      <Typography className={sharedClasses.queryExplanationText}>\n        Select specializations that the ship should fulfill.\n      </Typography>\n\n      <div className={classes.querySpecialtyButtons}>\n        {getSpecialties().map((special) => (\n          <ToggleButton\n            value={special}\n            key={special}\n            selected={selectedSpecialties.includes(special)}\n            onChange={() => handleSpecialties(special)}\n          >\n            {special}\n          </ToggleButton>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst getSpecialties = (): string[] => {\n  let specialties: string[] = [];\n\n  for (const speciality in ShipSpecialty) {\n    specialties = [\n      ...specialties,\n      ShipSpecialty[speciality as keyof typeof ShipSpecialty],\n    ];\n  }\n  return specialties;\n};\n","export default __webpack_public_path__ + \"static/media/Engineer_icon.0eb84776.svg\";","import { MouseEvent } from 'react';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { makeStyles, Tooltip } from '@material-ui/core';\nimport BlockIcon from '@material-ui/icons/Block';\nimport engineerIcon from 'assets/shipBuilds/Engineer_icon.svg';\n\ninterface IEngToggleGroupProps {\n  handleEngLevelChange: (_: MouseEvent<HTMLElement>, newValue: number) => void;\n  engLevel: number | null;\n}\n\nconst useStyles = makeStyles({\n  engButton: {\n    display: 'flex',\n    '& img': {\n      height: '20px',\n      width: '20px',\n    },\n  },\n});\n\nexport const EngToggleGroup = (props: IEngToggleGroupProps) => {\n  const { engLevel, handleEngLevelChange } = props;\n  const classes = useStyles();\n\n  return (\n    <ToggleButtonGroup\n      value={engLevel}\n      exclusive\n      onChange={handleEngLevelChange}\n    >\n      <ToggleButton value={0}>\n        <Tooltip title=\"No Engineering\" arrow>\n          <div className={classes.engButton}>\n            <BlockIcon />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={1}>\n        <Tooltip title=\"Simple Engineering\" arrow>\n          <div className={classes.engButton}>\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={2}>\n        <Tooltip title=\"Moderate Engineering\" arrow>\n          <div className={classes.engButton}>\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={3}>\n        <Tooltip title=\"End-Game/Extreme Engineering\" arrow>\n          <div className={classes.engButton}>\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n","import { TextField } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildAddText {\n  id: string;\n  label: string;\n  isMultiline: boolean;\n  value: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\n\n/**\n *\n */\nexport const BuildAddText = (props: IBuildAddText) => {\n  const { id, label, value, onChange, isMultiline, disabled } = props;\n  return (\n    <TextField\n      variant=\"outlined\"\n      id={id}\n      label={label}\n      multiline={isMultiline}\n      rowsMax={10}\n      value={value}\n      onChange={onChange}\n      disabled={disabled}\n    />\n  );\n};\n","import { Autocomplete } from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport { sortItems } from 'functions/sort';\nimport { ChangeEvent } from 'react';\nimport { IShipInfo } from 'models/shipBuilds';\nimport { useShipMap } from 'hooks/shipBuilds/useShipMap';\n\nconst findShipName = (ships: IShipInfo[], shipID: string | null) => {\n  if (shipID === null) {\n    return null;\n  }\n  const shipName = ships.find((x) => x.shipId === shipID);\n  return shipName;\n};\n\ninterface IShipAutocompleteProps {\n  shipType: string | null;\n  handleShipChange: (event: ChangeEvent<{}>, value: IShipInfo | null) => void;\n}\n\nexport const ShipAutocomplete = (props: IShipAutocompleteProps) => {\n  const { shipType, handleShipChange } = props;\n  const ships = useShipMap();\n\n  return (\n    <Autocomplete\n      id=\"shipType\"\n      options={sortItems(ships, 'name')}\n      autoHighlight\n      getOptionLabel={(option) => option.name}\n      renderOption={(option) => (\n        <>\n          <span>{option.name}</span>\n        </>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Ship Type\"\n          variant=\"outlined\"\n          inputProps={{\n            ...params.inputProps,\n            autocomplete: 'new-password',\n          }}\n        />\n      )}\n      value={findShipName(ships, shipType)}\n      onChange={handleShipChange}\n    />\n  );\n};\n","import Ships from 'data/shipBuilds/shipMap.json';\nimport { IShipInfo } from 'models/shipBuilds';\n\nexport const useShipMap = () => {\n  const ships: IShipInfo[] = Ships;\n  return ships;\n};\n\nexport const useShipIdfromMap = (shipId?: string) => {\n  if (shipId) {\n    const ships: IShipInfo[] = Ships;\n    const ship = ships.find((x) => x.shipId === shipId);\n    return ship;\n  }\n  return undefined;\n};\n","import { FormControlLabel, Checkbox } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildCheckBoxProps {\n  label: string;\n  name: string;\n  checked: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n  disabled?: boolean;\n}\nexport const BuildCheckBox = (props: IBuildCheckBoxProps) => {\n  const { label, name, checked, onChange, disabled } = props;\n  return (\n    <FormControlLabel\n      label={label}\n      control={\n        <Checkbox\n          name={name}\n          checked={checked}\n          onChange={onChange}\n          disabled={disabled}\n        />\n      }\n    />\n  );\n};\n","import { gql } from '@apollo/client';\n\nexport const InsertShipBuild = gql`\n  mutation AddBuild($build: ShipBuildsv2InsertInput!) {\n    insertOneShipBuildsv2(data: $build) {\n      _id\n      shipId\n      specializations\n      title\n      buildLink\n      engLevel\n      hasGuardian\n      hasPowerplay\n      isBeginner\n      author\n      isVariant\n      variants\n      related\n      description\n      jsonBuild\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const ReplaceShipBuild = gql`\n  mutation ReplaceBuild($build: ShipBuildsv2InsertInput!) {\n    replaceOneShipBuildsv2(query: { _id: $buildID }, data: $build) {\n      _id\n      shipId\n      specializations\n      title\n      buildLink\n      engLevel\n      hasGuardian\n      hasPowerplay\n      isBeginner\n      author\n      isVariant\n      variants\n      related\n      description\n      jsonBuild\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const UpdateRelatedShipBuilds = gql`\n  mutation UpdateRelatedOneShipBuildsv2(\n    $build: ShipBuildsv2QueryInput\n    $input: ShipBuildsv2UpdateInput!\n  ) {\n    updateOneShipBuildsv2(query: $build, set: $input) {\n      _id\n      related\n      variants\n    }\n  }\n`;\n","import { useMutation } from '@apollo/client';\nimport { IBuildInfoInsert } from 'models/shipBuilds/buildInfoInsert';\nimport { InsertShipBuild } from 'gql/mutations/shipBuild.insert';\nimport { ReplaceShipBuild } from 'gql/mutations/shipBuild.replace';\nimport { UpdateRelatedShipBuilds } from 'gql/mutations/shipBuild.update';\n\nexport const useShipBuildMutations = () => {\n  return {\n    addBuild: useAddBuild(),\n    replaceBuild: useReplaceBuild(),\n    updateVariants: useUpdateVariantBuilds(),\n    updateRelated: useUpdateRelatedBuilds(),\n  };\n};\n\nconst useAddBuild = () => {\n  const [addBuildMutation] = useMutation<{\n    insertOneShipBuildsv2: IBuildInfoInsert;\n  }>(InsertShipBuild);\n\n  const addShipBuild = async (build: IBuildInfoInsert) => {\n    const addedBuild = await addBuildMutation({\n      variables: {\n        build: {\n          ...build,\n        },\n      },\n    });\n    return addedBuild;\n  };\n\n  return addShipBuild;\n};\n\nconst useUpdateRelatedBuilds = () => {\n  const [updateBuildMutation] = useMutation(UpdateRelatedShipBuilds);\n\n  const updateRelatedBuilds = async (id: string, relatedBuilds: string[]) => {\n    const updatedBuild = await updateBuildMutation({\n      variables: {\n        build: {\n          _id: id,\n        },\n        input: {\n          related: relatedBuilds,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n  return updateRelatedBuilds;\n};\n\nconst useUpdateVariantBuilds = () => {\n  const [updateBuildMutation] = useMutation(UpdateRelatedShipBuilds);\n\n  const updateVariantBuilds = async (id: string, variantBuilds: string[]) => {\n    const updatedBuild = await updateBuildMutation({\n      variables: {\n        build: {\n          _id: id,\n        },\n        input: {\n          variants: variantBuilds,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n  return updateVariantBuilds;\n};\n\nconst useReplaceBuild = () => {\n  const [replaceBuildMutation] = useMutation<IBuildInfoInsert>(\n    ReplaceShipBuild\n  );\n\n  const replaceShipBuild = async (build: IBuildInfoInsert) => {\n    const updatedBuild = await replaceBuildMutation({\n      variables: {\n        buildID: build._id,\n        build: {\n          ...build,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n\n  return replaceShipBuild;\n};\n","import { gql } from '@apollo/client';\n\nexport const QueryAllShipBuilds = gql`\n  query AllShipBuildsv2s {\n    shipBuildsv2s(sortBy: SHIPID_ASC) {\n      _id\n      shipId\n      specializations\n      title\n      buildLink\n      engLevel\n      hasGuardian\n      hasPowerplay\n      isBeginner\n      author\n      isVariant\n      variants\n      related\n      description\n      jsonBuild\n    }\n  }\n`;\n","import { useQuery } from '@apollo/client';\nimport { IBuildInfov2 } from 'models/shipBuilds';\nimport { useShipBuildMutations } from './useShipBuildMutations';\nimport { IBuildInfoInsert } from 'models/shipBuilds/buildInfoInsert';\nimport { QueryAllShipBuilds } from 'gql/queries/shipBuilds';\n\nexport const useShipBuilds = () => {\n  const addRelated = useAddRelatedBuild();\n  const addVariant = useAddVariantBuild();\n  const { shipBuilds, loading, error } = useAllShipBuilds();\n  const { addBuild, replaceBuild } = useShipBuildMutations();\n  return {\n    loading,\n    shipBuilds,\n    error,\n    addBuild,\n    addRelated,\n    addVariant,\n    replaceBuild,\n  };\n};\n\nexport const useAllShipBuilds = () => {\n  const { data, loading, error } = useQuery<{\n    shipBuildsv2s: IBuildInfov2[];\n  }>(QueryAllShipBuilds);\n  const shipBuilds = data?.shipBuildsv2s ?? [];\n\n  return { shipBuilds, loading, error };\n};\n\nconst useAddRelatedBuild = () => {\n  const { addBuild, updateRelated } = useShipBuildMutations();\n  const addRelatedBuild = async (\n    currentID: string,\n    shipBuilds: IBuildInfov2[],\n    buildtoInsert: IBuildInfoInsert\n  ) => {\n    const currentBuild = shipBuilds.find(\n      (x) => ((x._id as unknown) as string) === currentID\n    );\n    if (currentBuild) {\n      const relatedBuilds = currentBuild.related;\n\n      const tempBuild = buildtoInsert;\n      tempBuild.related = currentBuild.related;\n      tempBuild.related = [...tempBuild.related, currentID];\n      const addedBuild:\n        | { insertOneShipBuildsv2: IBuildInfov2 }\n        | undefined\n        | null = (await addBuild(tempBuild)).data;\n      console.log(addedBuild);\n      if (addedBuild) {\n        const buildID = (addedBuild.insertOneShipBuildsv2\n          ._id as unknown) as string;\n        if (buildID) {\n          await updateRelated(currentID, [...relatedBuilds, buildID]);\n          for (const id of relatedBuilds) {\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            if (build) {\n              const newRelated = [...build.related, buildID];\n              await updateRelated((build._id as unknown) as string, newRelated);\n            }\n          }\n        }\n      } else {\n        throw new Error('Reference build and related builds not updated');\n      }\n    } else {\n      throw new Error('Reference build cannot be found');\n    }\n  };\n  return addRelatedBuild;\n};\n\nconst useAddVariantBuild = () => {\n  const { addBuild, updateVariants, updateRelated } = useShipBuildMutations();\n  const addVariantBuild = async (\n    parentID: string,\n    shipBuilds: IBuildInfov2[],\n    buildtoInsert: IBuildInfoInsert\n  ) => {\n    const parentBuild = shipBuilds.find(\n      (x) => ((x._id as unknown) as string) === parentID\n    );\n    if (parentBuild) {\n      const variantBuilds = parentBuild.variants;\n\n      const tempBuild = buildtoInsert;\n      tempBuild.isVariant = true;\n      tempBuild.related = variantBuilds;\n      const addedBuild:\n        | { insertOneShipBuildsv2: IBuildInfov2 }\n        | undefined\n        | null = (await addBuild(tempBuild)).data;\n      if (addedBuild) {\n        const buildID = (addedBuild.insertOneShipBuildsv2\n          ._id as unknown) as string;\n        if (buildID) {\n          console.log(buildID);\n          await updateVariants(parentID, [...variantBuilds, buildID]);\n\n          for (const id of variantBuilds) {\n            console.log(id);\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            if (build) {\n              const newRelated = [...build.related, buildID];\n              await updateRelated((build._id as unknown) as string, newRelated);\n            }\n          }\n        }\n      } else {\n        throw new Error('Parent and related builds were not updated');\n      }\n    } else {\n      throw new Error('Parent cannot be found');\n    }\n  };\n  return addVariantBuild;\n};\n","import {\n  Button,\n  Container,\n  FormGroup,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { ObjectId } from 'bson';\nimport { ChangeEvent, Fragment, MouseEvent, useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { processJSONBuild } from 'functions/shipBuilds';\nimport { IShipInfo, IBuildInfoInsert } from 'models/shipBuilds';\nimport { QuerySpecialization } from '../query/querySpecialities';\nimport { EngToggleGroup } from '../engToggleGroup';\nimport { BuildAddText } from './buildAddText';\nimport { ShipAutocomplete } from '../shipAutocomplete';\nimport { BuildCheckBox } from './buildCheckBox';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\nimport { useUrlQuery } from 'hooks/useURLQuery';\nimport { EDSpinner } from '@admiralfeb/react-components';\nimport { useSnackbar } from 'notistack';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: 'center',\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n    rowGap: '10px',\n    padding: theme.spacing(1),\n  },\n  center: {\n    textAlign: 'center',\n    margin: '0 auto',\n  },\n}));\n\n/**\n * Add Build Screen\n *\n * Used for all addition functions:\n *\n * - Normal Build\n * - Related Build\n * - Variant Build\n */\nexport const BuildAdd = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [jsonBuild, setJsonBuild] = useState('');\n  const [buildInfo, setBuildInfo] = useState<IBuildInfoInsert>(DEFAULTBUILD);\n  const [specialties, setSpecialties] = useState<string[]>([]);\n  const {\n    loading,\n    shipBuilds,\n    addBuild,\n    addRelated,\n    addVariant,\n  } = useShipBuilds();\n  const urlQuery = useUrlQuery();\n\n  useEffect(() => {\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, specializations: specialties };\n    });\n  }, [specialties]);\n\n  const handleJSONChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setJsonBuild(event.target.value);\n    const {\n      buildName,\n      shipID,\n      hasGuardian,\n      hasPowerplay,\n      engineering,\n      url,\n    } = processJSONBuild(event.target.value);\n    const engLevel = engineering ? 1 : 0;\n    const _id = buildInfo._id;\n    const info: IBuildInfoInsert = {\n      _id,\n      title: buildName,\n      hasGuardian,\n      hasPowerplay,\n      buildLink: url,\n      shipId: shipID,\n      author: '',\n      specializations: [],\n      engLevel,\n      isBeginner: false,\n      description: '',\n      isVariant: false,\n      variants: [],\n      related: [],\n      jsonBuild: event.target.value,\n    };\n    setBuildInfo(info);\n  };\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n\n    switch (event.target.id) {\n      case 'title':\n        setBuildInfo((info) => {\n          return { ...info, title: value };\n        });\n        break;\n      case 'description':\n        setBuildInfo((info) => {\n          return { ...info, description: value };\n        });\n        break;\n      case 'buildLink':\n        setBuildInfo((info) => {\n          return { ...info, buildLink: value };\n        });\n        break;\n      case 'author':\n        setBuildInfo((info) => {\n          return { ...info, author: value };\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value!.shipId;\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, shipId: ship };\n    });\n  };\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    engLevel: number\n  ) => {\n    setBuildInfo({ ...buildInfo, engLevel });\n  };\n  const handleOtherChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setBuildInfo({ ...buildInfo, [event.target.name]: event.target.checked });\n  };\n  const handleSubmit = async () => {\n    try {\n      if (buildInfo.jsonBuild === '') {\n        throw new Error(\n          'Exported JSON is blank. Verify you have pasted the JSON from Coriolis.'\n        );\n      }\n      if (buildInfo.specializations.length < 1) {\n        throw new Error(\n          'No specializations have been selected. Minimum is one.'\n        );\n      }\n      if (buildInfo.author === '') {\n        throw new Error('Author is blank.');\n      }\n      if (buildInfo.description === '') {\n        throw new Error('More Information is blank.');\n      }\n      if (buildInfo.title === '') {\n        throw new Error(\n          'Build Title is blank. Verify you have pasted the JSON from Coriolis.'\n        );\n      }\n      if (buildInfo.buildLink === '') {\n        throw new Error(\n          'Build Link is blank. Verify you have pasted the JSON from Coriolis.'\n        );\n      }\n      const addType = urlQuery.get('type');\n      console.log(addType);\n      const refID = urlQuery.get('refID');\n      try {\n        switch (addType) {\n          case 'variant':\n            if (refID) {\n              await addVariant(refID, shipBuilds, buildInfo);\n            } else {\n              throw new Error('Build reference ID missing from URL');\n            }\n            break;\n          case 'related':\n            if (refID) {\n              await addRelated(refID, shipBuilds, buildInfo);\n            } else {\n              throw new Error('Build reference ID missing from URL');\n            }\n            break;\n          default:\n            await addBuild(buildInfo);\n            break;\n        }\n        enqueueSnackbar('Build Successfully Submitted', {\n          variant: 'success',\n        });\n        setBuildInfo({ ...DEFAULTBUILD, _id: new ObjectId() });\n        setSpecialties([]);\n        setJsonBuild('');\n      } catch (e) {\n        enqueueSnackbar(`Submit Failed: ${e.message}`, { variant: 'error' });\n        console.error(e);\n      }\n    } catch (e) {\n      enqueueSnackbar(`Submit failed. ${e.message}`, { variant: 'error' });\n    }\n  };\n\n  const textFields = [\n    {\n      id: 'json',\n      label: 'Exported JSON',\n      isMultiline: true,\n      value: jsonBuild,\n      onChange: handleJSONChange,\n    },\n    {\n      id: 'title',\n      label: 'Title',\n      isMultiline: false,\n      value: buildInfo.title,\n      onChange: handleTextChange,\n      disabled: false,\n    },\n    {\n      id: 'description',\n      label: 'More Information - Accepts markdown',\n      isMultiline: true,\n      value: buildInfo.description,\n      onChange: handleTextChange,\n    },\n    {\n      id: 'buildLink',\n      label: 'Build Link - Full',\n      isMultiline: false,\n      value: buildInfo.buildLink,\n      onChange: handleTextChange,\n      disabled: true,\n    },\n    // {\n    //   id: 'variant',\n    //   label: 'Variant Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.variants.join(','),\n    //   onChange: handleTextChange,\n    // },\n    // {\n    //   id: 'related',\n    //   label: 'Related Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.related.join(','),\n    //   onChange: handleTextChange,\n    // },\n    {\n      id: 'author',\n      label: 'Author',\n      isMultiline: false,\n      value: buildInfo.author,\n      onChange: handleTextChange,\n    },\n  ];\n\n  const checkFields = [\n    {\n      label: 'Guardian',\n      name: 'hasGuardian',\n      checked: buildInfo.hasGuardian,\n      disabled: true,\n    },\n    {\n      label: 'PowerPlay',\n      name: 'hasPowerplay',\n      checked: buildInfo.hasPowerplay,\n      disabled: true,\n    },\n    { label: 'Beginner', name: 'isBeginner', checked: buildInfo.isBeginner },\n  ];\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Typography variant=\"h3\" className={classes.center}>\n        Add Build Form\n      </Typography>\n      <Paper className={classes.root}>\n        <Button\n          to=\"/builds\"\n          component={NavLink}\n          color=\"secondary\"\n          variant=\"outlined\"\n        >\n          Return to builds\n        </Button>\n        <Typography>\n          Save your build in Coriolis and choose Export. Paste the exported JSON\n          into the Exported JSON field.\n        </Typography>\n        <Typography>\n          Verify/enter remaining information and click Submit Build at the\n          bottom.\n        </Typography>\n        {textFields.map((field) => (\n          <Fragment key={field.id}>\n            <BuildAddText {...field} />\n            {field.id === 'description' && (\n              <Button\n                href=\"https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf\"\n                target=\"_blank\"\n                color=\"primary\"\n              >\n                Markdown Cheatsheet - Opens a new tab\n              </Button>\n            )}\n          </Fragment>\n        ))}\n        <ShipAutocomplete\n          shipType={buildInfo.shipId}\n          handleShipChange={handleShipChange}\n        />\n        <QuerySpecialization\n          selectedSpecialties={buildInfo.specializations}\n          setSpecialties={setSpecialties}\n        />\n        <div className={classes.center}>\n          <EngToggleGroup\n            engLevel={buildInfo.engLevel}\n            handleEngLevelChange={handleEngLevelChange}\n          />\n        </div>\n        <FormGroup row className={classes.center}>\n          {checkFields.map((check) => (\n            <BuildCheckBox\n              key={check.name}\n              {...check}\n              onChange={handleOtherChange}\n            />\n          ))}\n        </FormGroup>\n        <Button onClick={handleSubmit} variant=\"outlined\">\n          Submit Build\n        </Button>\n      </Paper>\n    </Container>\n  );\n};\n\nconst DEFAULTBUILD: IBuildInfoInsert = {\n  _id: new ObjectId(),\n  shipId: 'adder',\n  title: '',\n  specializations: [],\n  buildLink: '',\n  engLevel: 0,\n  hasGuardian: false,\n  hasPowerplay: false,\n  isBeginner: false,\n  author: '',\n  isVariant: false,\n  variants: [],\n  related: [],\n  description: '',\n  jsonBuild: '',\n};\n","import { Chip, makeStyles } from '@material-ui/core';\nimport { IBuildInfov2 } from 'models/shipBuilds';\n\nconst useStyles = makeStyles((theme) => ({\n  chips: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    margin: theme.spacing(1),\n    '& div': {\n      marginRight: theme.spacing(1),\n    },\n  },\n}));\n\nexport const TagGroup = (props: { build: IBuildInfov2 }) => {\n  const { build } = props;\n  const classes = useStyles();\n  return (\n    <div className={classes.chips}>\n      {build.specializations.map((v) => (\n        <Chip label={v} key={v} />\n      ))}\n      {build.hasGuardian && <Chip label=\"Guardian\" key=\"guardian\" />}\n      {build.hasPowerplay && <Chip label=\"PowerPlay\" key=\"powerplay\" />}\n      {build.isBeginner && <Chip label=\"Beginner\" key=\"beginner\" />}\n    </div>\n  );\n};\n","import { makeStyles } from '@material-ui/core';\nimport engineerIcon from 'assets/shipBuilds/Engineer_icon.svg';\n\nconst useStyles = makeStyles({\n  engineering: {\n    '& p': {\n      '& img': {\n        height: '20px',\n        width: '20px',\n        verticalAlign: 'middle',\n      },\n    },\n  },\n});\n\nexport const EngIcons = (props: { engLevel: number }) => {\n  const classes = useStyles();\n  let icons: JSX.Element[] = [];\n  if (props.engLevel > 3 || props.engLevel < 1) {\n    return (\n      <div className={classes.engineering}>\n        <p>Engineering Level: None</p>\n      </div>\n    );\n  } else {\n    for (let i = 1; i <= props.engLevel; i++) {\n      icons = [\n        ...icons,\n        <img src={engineerIcon} key={i} alt=\"Engineering Icon\" />,\n      ];\n    }\n    return (\n      <div className={classes.engineering}>\n        <p>\n          <span>Engineering Level:</span> {icons.map((icon) => icon)}\n        </p>\n      </div>\n    );\n  }\n};\n","import {\n  Button,\n  Divider,\n  Link,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\nimport { IBuildInfov2, IShipInfo, ShipSize } from 'models/shipBuilds';\nimport { TagGroup } from './tagGroup';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport { useLinks } from 'hooks/useLinks';\nimport { EngIcons } from './engIcons';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  img: {\n    width: 300,\n  },\n  buttonGrid: {\n    display: 'grid',\n    gridTemplate: '1fr 1fr / 1fr 1fr',\n  },\n  flexDown: {\n    display: 'flex',\n    flexDirection: 'column',\n    '& a': {\n      margin: theme.spacing(1),\n    },\n  },\n  flexAcross: {\n    display: 'flex',\n    flexDirection: 'row',\n    '& a': {\n      flexGrow: 1,\n    },\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  gridDown: {\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetailFull = (props: {\n  foundBuild: IBuildInfov2;\n  shipInfo: IShipInfo | undefined;\n}) => {\n  const classes = useStyles();\n  const { blueprints } = useLinks();\n  const { shipInfo, foundBuild } = props;\n\n  return (\n    <>\n      <Paper className={classes.paper}>\n        <div className={classes.flexAcross}>\n          {shipInfo && (\n            <div className={`${classes.flexDown} ${classes.margin}`}>\n              <img\n                src={shipInfo.shipImg}\n                alt={shipInfo.name}\n                className={classes.img}\n              />\n              <div className={classes.flexAcross}>\n                <Typography>{shipInfo.name}</Typography>\n                <span className={classes.spacer} />\n                <Typography>{ShipSize[shipInfo.size]}</Typography>\n              </div>\n              {shipInfo.requires && (\n                <Typography>Requires: {shipInfo.requires}</Typography>\n              )}\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                href={foundBuild!.buildLink}\n                target=\"_blank\"\n              >\n                Show Build\n              </Button>\n              <div className={classes.buttonGrid}>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  href={shipInfo.shipReview}\n                  target=\"_blank\"\n                >\n                  Pilot's Review\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  href={`${blueprints}?s=${shipInfo.blueprint}`}\n                  target=\"_blank\"\n                >\n                  Ship Anatomy\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  to={`/builds/add?type=variant&refID=${\n                    (foundBuild!._id as unknown) as string\n                  }`}\n                  component={NavLink}\n                >\n                  Add Variant\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  to={`/builds/add?type=related&refID=${\n                    (foundBuild!._id as unknown) as string\n                  }`}\n                  component={NavLink}\n                >\n                  Add Related\n                </Button>\n              </div>\n            </div>\n          )}\n          <Divider orientation=\"vertical\" flexItem />\n          <div\n            className={`${classes.flexDown} ${classes.spacer} ${classes.margin}`}\n          >\n            <Typography variant=\"h5\">{foundBuild?.title}</Typography>\n            <Typography>Author: {foundBuild?.author}</Typography>\n            <EngIcons engLevel={foundBuild!.engLevel} />\n            <TagGroup build={foundBuild!} />\n            {foundBuild?.description && (\n              <ReactMarkdown\n                plugins={[gfm]}\n                renderers={{ paragraph: Typography, link: Link }}\n                children={foundBuild.description}\n              />\n            )}\n          </div>\n        </div>\n      </Paper>\n    </>\n  );\n};\n","import {\n  Button,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n  Link,\n} from '@material-ui/core';\nimport { useLinks } from 'hooks/useLinks';\nimport { IBuildInfov2, IShipInfo, ShipSize } from 'models/shipBuilds';\nimport ReactMarkdown from 'react-markdown';\nimport { NavLink } from 'react-router-dom';\nimport gfm from 'remark-gfm';\nimport { EngIcons } from './engIcons';\nimport { TagGroup } from './tagGroup';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(1),\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  img: {\n    width: 150,\n    flexShrink: 0,\n  },\n  flexrow: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  buttonGrid: {\n    display: 'grid',\n    gridTemplate: '1fr 1fr / 1fr 1fr',\n    gap: 5,\n    padding: theme.spacing(1),\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n}));\n\nexport const BuildDetailMobile = (props: {\n  foundBuild: IBuildInfov2;\n  shipInfo: IShipInfo | undefined;\n}) => {\n  const { blueprints } = useLinks();\n  const { foundBuild, shipInfo } = props;\n  const classes = useStyles();\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.flexrow}>\n        {shipInfo && (\n          <img\n            src={shipInfo!.shipImg}\n            alt={shipInfo!.name}\n            className={classes.img}\n          />\n        )}\n        <div>\n          <Typography variant=\"h5\">{foundBuild.title}</Typography>\n          <Typography>Author: {foundBuild.author}</Typography>\n          <div className={classes.flexrow}>\n            {shipInfo && (\n              <>\n                <Typography>{shipInfo.name}</Typography>\n                <div className={classes.spacer} />\n                <Typography>{ShipSize[shipInfo.size]}</Typography>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        href={foundBuild.buildLink}\n        target=\"_blank\"\n      >\n        Show Build\n      </Button>\n      <Divider style={{ marginTop: '10px' }} />\n      <TagGroup build={foundBuild!} />\n      <EngIcons engLevel={foundBuild!.engLevel} />\n      {foundBuild.description && (\n        <ReactMarkdown\n          plugins={[gfm]}\n          renderers={{ paragraph: Typography, link: Link }}\n          children={foundBuild.description}\n        />\n      )}\n      <div className={classes.buttonGrid}>\n        {shipInfo && (\n          <>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              href={shipInfo.shipReview}\n              target=\"_blank\"\n            >\n              Pilot's Review\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              href={`${blueprints}?s=${shipInfo.blueprint}`}\n              target=\"_blank\"\n            >\n              Ship Anatomy\n            </Button>\n          </>\n        )}\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          to={`/builds/add?type=variant&refID=${\n            (foundBuild!._id as unknown) as string\n          }`}\n          component={NavLink}\n        >\n          Add Variant\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          to={`/builds/add?type=related&refID=${\n            (foundBuild!._id as unknown) as string\n          }`}\n          component={NavLink}\n        >\n          Add Related\n        </Button>\n      </div>\n    </Paper>\n  );\n};\n","import {\n  CardMedia,\n  Divider,\n  Typography,\n  Button,\n  CardContent,\n  Card,\n  Fade,\n  makeStyles,\n} from '@material-ui/core';\nimport { IBuildInfov2, ShipSize } from 'models/shipBuilds';\nimport { EngIcons } from './engIcons';\nimport { NavLink } from 'react-router-dom';\nimport { useShipIdfromMap } from 'hooks/shipBuilds/useShipMap';\nimport { TagGroup } from './tagGroup';\nimport { theme } from 'theme';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '400px',\n    minWidth: '400px',\n    margin: '5px',\n  },\n  content: {\n    flexGrow: 1,\n    flexBasis: 'auto',\n    flexWrap: 'wrap',\n  },\n  media: {\n    height: '100px',\n    width: '100px',\n    flexShrink: 0,\n    margin: 'auto',\n  },\n  shipName: {\n    display: 'flex',\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  mediaAndActions: {\n    marginLeft: theme.spacing(1),\n  },\n  actions: {\n    display: 'grid',\n    gridTemplateRows: 'auto',\n    '& a': {\n      minWidth: 121,\n      marginBottom: theme.spacing(1),\n    },\n  },\n});\n\nexport const BuildCard = (props: { shipBuild: IBuildInfov2 | undefined }) => {\n  const { shipBuild } = props;\n  const shipInfo = useShipIdfromMap(shipBuild?.shipId);\n  const classes = useStyles();\n\n  return shipBuild && shipInfo ? (\n    <Fade in={true} timeout={500}>\n      <Card variant=\"outlined\" className={classes.root}>\n        <div className={classes.mediaAndActions}>\n          <CardMedia\n            className={classes.media}\n            image={shipInfo.shipImg}\n            title={shipInfo.name}\n          />\n          <Typography>{ShipSize[shipInfo.size]}</Typography>\n          <div className={classes.actions}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              href={shipBuild.buildLink}\n              target=\"_blank\"\n            >\n              View Build\n            </Button>\n            <Button\n              to={`/builds/detail/${(shipBuild._id as unknown) as string}`}\n              component={NavLink}\n              color=\"primary\"\n              variant=\"contained\"\n            >\n              More Details\n            </Button>\n          </div>\n        </div>\n        <CardContent className={classes.content}>\n          <Typography>{shipBuild.title}</Typography>\n          <Divider />\n          <Typography>{shipInfo.name} </Typography>\n          {shipInfo.requires && (\n            <Typography>Requirement: {shipInfo.requires}</Typography>\n          )}\n          <TagGroup build={shipBuild} />\n          <Divider />\n          <EngIcons engLevel={shipBuild.engLevel} />\n          <Divider />\n          <Typography>Author: {shipBuild.author}</Typography>\n          {shipBuild.variants.length > 0 ? (\n            <Typography>Has Variants</Typography>\n          ) : null}\n          {shipBuild.related.length > 0 ? (\n            <Typography>Has Related Builds</Typography>\n          ) : null}\n          <div className={classes.spacer} />\n        </CardContent>\n      </Card>\n    </Fade>\n  ) : null;\n};\n","import { EDSpinner } from '@admiralfeb/react-components';\nimport { makeStyles, Typography } from '@material-ui/core';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\nimport { BuildCard } from './buildCard';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginBottom: 5,\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetailBuilds = (props: {\n  title: string;\n  buildIDs: string[];\n}) => {\n  const { title, buildIDs } = props;\n  const classes = useStyles();\n  const { loading, shipBuilds } = useShipBuilds();\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <div className={classes.textCenter}>\n      <Typography variant=\"h4\">{title}</Typography>\n      <div className={classes.paper}>\n        {buildIDs.map((id) => {\n          const build = shipBuilds.find(\n            (x) => ((x._id as unknown) as string) === id\n          );\n          return <BuildCard shipBuild={build} key={id} />;\n        })}\n      </div>\n    </div>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { EDSpinner } from '@admiralfeb/react-components';\nimport { NotFound } from 'components';\nimport {\n  Container,\n  makeStyles,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport { BuildDetailFull } from './buildDetailFull';\nimport { BuildDetailMobile } from './buildDetailMobile';\nimport { BuildDetailBuilds } from './buildDetailBuilds';\nimport { useShipBuildInfo } from 'hooks/shipBuilds/useShipBuildInfo';\n\ninterface RouteParams {\n  id: string;\n}\n\nconst useStyles = makeStyles({\n  textCenter: {\n    textAlign: 'center',\n  },\n});\n\nexport const BuildDetail = () => {\n  let { id } = useParams<RouteParams>();\n  const { loading, shipInfo, foundBuild } = useShipBuildInfo(id);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const classes = useStyles();\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Typography variant=\"h3\" className={classes.textCenter}>\n        Build Detail\n      </Typography>\n      {foundBuild ? (\n        isMobile ? (\n          <BuildDetailMobile foundBuild={foundBuild} shipInfo={shipInfo} />\n        ) : (\n          <BuildDetailFull foundBuild={foundBuild} shipInfo={shipInfo} />\n        )\n      ) : (\n        <NotFound />\n      )}\n      {foundBuild && foundBuild.variants.length > 0 ? (\n        <BuildDetailBuilds\n          title=\"Build Variants\"\n          buildIDs={foundBuild.variants}\n        />\n      ) : null}\n      {foundBuild && foundBuild.related.length > 0 ? (\n        <BuildDetailBuilds\n          title=\"Related Builds\"\n          buildIDs={foundBuild.related}\n        />\n      ) : null}\n    </Container>\n  );\n};\n","import { getShipInfofromID } from 'functions/shipBuilds';\nimport { useMemo } from 'react';\nimport { useShipBuilds } from './useShipBuilds';\n\n/**\n * Returns the build and ship info for a build provided the id.\n * It also provides the ship builds and loading boolean.\n * @param id id of build\n */\nexport const useShipBuildInfo = (id?: string) => {\n  const { loading, shipBuilds } = useShipBuilds();\n\n  let foundBuild = useMemo(() => {\n    if (id === undefined) {\n      return undefined;\n    }\n    if (loading) {\n      return undefined;\n    }\n\n    let build = shipBuilds.find(\n      (x) => x._id && ((x._id as unknown) as string) === id\n    );\n    if (build) {\n      return build;\n    } else {\n      return null;\n    }\n  }, [id, loading, shipBuilds]);\n\n  let shipInfo = useMemo(() => {\n    if (foundBuild) {\n      return getShipInfofromID(foundBuild.shipId);\n    } else {\n      return undefined;\n    }\n  }, [foundBuild]);\n\n  return { loading, shipBuilds, foundBuild, shipInfo };\n};\n","import { EDSpinner } from '@admiralfeb/react-components';\nimport { useCallback, useEffect, useState } from 'react';\nimport { filterShipBuilds } from 'functions/shipBuilds/filterShipBuilds';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\nimport { IBuildInfov2, IQuery } from 'models/shipBuilds';\nimport { BuildCard } from './buildCard';\nimport { makeStyles } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n});\n\nexport const BuildList = (props: { buildQuery: IQuery | undefined }) => {\n  const [queriedBuilds, setQueriedBuilds] = useState<IBuildInfov2[]>();\n  const { buildQuery } = props;\n  const { loading, shipBuilds, error } = useShipBuilds();\n  const { enqueueSnackbar } = useSnackbar();\n  const classes = useStyles();\n\n  let filterBuilds = useCallback(() => {\n    if (loading || error) {\n      return;\n    }\n    console.log(shipBuilds);\n    const filtered = filterShipBuilds(shipBuilds, buildQuery);\n    setQueriedBuilds(filtered);\n  }, [loading, shipBuilds, buildQuery, error]);\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    if (error) {\n      enqueueSnackbar(`Failed to retrieve builds. ${error.message}`, {\n        variant: 'error',\n      });\n    }\n    filterBuilds();\n  }, [loading, filterBuilds, error, enqueueSnackbar]);\n\n  return (\n    <div className={classes.root}>\n      {loading ? (\n        <EDSpinner />\n      ) : (\n        queriedBuilds?.map((ship) => {\n          return (\n            <BuildCard key={(ship._id as unknown) as string} shipBuild={ship} />\n          );\n        })\n      )}\n    </div>\n  );\n};\n","import { IBuildInfov2, IQuery } from 'models/shipBuilds';\nimport { getShipInfofromID } from './getShipInfo';\n\nexport const filterShipBuilds = (\n  shipBuilds: IBuildInfov2[] | undefined,\n  query: IQuery | undefined\n) => {\n  if (shipBuilds && query) {\n    let newList = shipBuilds;\n    if (query.showVariants === null || query.showVariants === false) {\n      newList = newList.filter((build) => build.isVariant === false);\n    }\n    // ship type\n    if (query.ship !== null) {\n      newList = newList.filter((build) => build.shipId === query.ship);\n    }\n    // ship size\n    if (query.size !== null) {\n      newList = newList.filter((build) => {\n        const shipInfo = getShipInfofromID(build.shipId);\n        if (shipInfo?.size === query.size) {\n          return build;\n        } else {\n          return undefined;\n        }\n      });\n    }\n    // Engineering\n    if (query.engLevel !== null) {\n      newList = newList.filter((build) => build.engLevel === query.engLevel);\n    }\n    // Specializations\n    if (query.specialties.length > 0) {\n      console.log(query.specialties);\n      let tempList: IBuildInfov2[] = [];\n      for (const specialty of query.specialties) {\n        if (tempList.length > 0) {\n          tempList = tempList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        } else {\n          tempList = newList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        }\n      }\n      newList = tempList;\n    }\n    // Guardian\n    if (query.guardian !== null) {\n      const val = query.guardian === 1 ? true : false;\n      newList = newList.filter((build) => build.hasGuardian === val);\n    }\n    // PowerPlay\n    if (query.powerplay !== null) {\n      const val = query.powerplay === 1 ? true : false;\n      newList = newList.filter((build) => build.hasPowerplay === val);\n    }\n    // Beginner\n    if (query.beginner !== null) {\n      const val = query.beginner === 1 ? true : false;\n      newList = newList.filter((build) => build.isBeginner === val);\n    }\n\n    return newList;\n  }\n};\n","import { makeStyles, Tooltip } from '@material-ui/core';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { ChangeEvent, Dispatch, MouseEvent, SetStateAction } from 'react';\nimport { IShipInfo } from 'models/shipBuilds';\nimport { ShipAutocomplete } from '../shipAutocomplete';\nimport { useSharedStyles } from './sharedStyles';\n\nconst useStyles = makeStyles((theme) => ({\n  shipQueries: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n  },\n  shipTypeQuery: {\n    [theme.breakpoints.up('lg')]: {\n      minWidth: 200,\n      margin: theme.spacing(1),\n      flex: '1 0',\n    },\n  },\n  shipSizeQuery: {\n    margin: 'auto',\n  },\n}));\n\nexport const QueryShip = (props: {\n  shipSize: number | null;\n  setShipSize: Dispatch<SetStateAction<number | null>>;\n  shipType: string | null;\n  setShipType: Dispatch<SetStateAction<string | null>>;\n}) => {\n  const { shipType, setShipType, shipSize, setShipSize } = props;\n  const sharedClasses = useSharedStyles();\n  const classes = useStyles();\n\n  const handleShipSizeChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setShipType(null);\n    setShipSize(newValue);\n  };\n\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value?.shipId;\n    setShipType(ship ?? null);\n    setShipSize(null);\n  };\n\n  return (\n    <div className={sharedClasses.querySection}>\n      <h3 className={sharedClasses.querySectionheader}>Ship Type and Size</h3>\n      <div className={classes.shipQueries}>\n        <div className={classes.shipTypeQuery}>\n          <ShipAutocomplete\n            shipType={shipType}\n            handleShipChange={handleShipChange}\n          />\n        </div>\n        <div className={classes.shipSizeQuery}>\n          <Tooltip\n            title=\"What's the size of the ship you're looking for?\"\n            arrow\n          >\n            <ToggleButtonGroup\n              value={shipSize}\n              exclusive\n              onChange={handleShipSizeChange}\n            >\n              <ToggleButton value={1}>Small</ToggleButton>\n              <ToggleButton value={2}>Medium</ToggleButton>\n              <ToggleButton value={3}>Large</ToggleButton>\n            </ToggleButtonGroup>\n          </Tooltip>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { makeStyles, Typography } from '@material-ui/core';\nimport { SetStateAction, MouseEvent, Dispatch } from 'react';\nimport { EngToggleGroup } from '../engToggleGroup';\nimport { useSharedStyles } from './sharedStyles';\n\nconst useStyles = makeStyles({\n  engineeringQuery: {\n    gridArea: 'engineering',\n  },\n});\n\nexport const QueryEngineering = (props: {\n  engLevel: number | null;\n  setEngLevel: Dispatch<SetStateAction<number | null>>;\n}) => {\n  const { engLevel, setEngLevel } = props;\n  const sharedClasses = useSharedStyles();\n  const classes = useStyles();\n\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setEngLevel(newValue);\n  };\n\n  return (\n    <div\n      className={`${sharedClasses.querySection} ${classes.engineeringQuery}`}\n    >\n      <h3 className={sharedClasses.querySectionheader}>\n        Ship Engineering Level\n      </h3>\n      <Typography className={sharedClasses.queryExplanationText}>\n        Select Engineering level ranging from None to Max Engineering.\n      </Typography>\n      <EngToggleGroup\n        engLevel={engLevel}\n        handleEngLevelChange={handleEngLevelChange}\n      />\n    </div>\n  );\n};\n","import { makeStyles, Tooltip } from '@material-ui/core';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\n\nimport { OtherFilters } from 'models/shipBuilds/otherFilters';\nimport BlockIcon from '@material-ui/icons/Block';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { Dispatch, MouseEvent, SetStateAction } from 'react';\nimport { useSharedStyles } from './sharedStyles';\n\nconst useStyles = makeStyles((theme) => ({\n  queryOtherButtons: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  queryOtherButtonGrids: {\n    display: 'grid',\n    gridTemplateRows: '0.5fr 1fr',\n    margin: theme.spacing(0, 1),\n    '& div': {\n      margin: 'auto',\n      padding: theme.spacing(1),\n    },\n    '& label': {\n      height: '25px',\n      padding: theme.spacing(1),\n    },\n  },\n  QueryOtherBeginnerButtons: {\n    borderWidth: '3px',\n    borderStyle: 'solid',\n    borderColor: theme.palette.secondary.main,\n    borderRadius: '5px',\n  },\n}));\n\nexport const QueryOther = (props: {\n  other: OtherFilters;\n  setOther: Dispatch<SetStateAction<OtherFilters>>;\n}) => {\n  const { other, setOther } = props;\n  const sharedClasses = useSharedStyles();\n  const classes = useStyles();\n\n  const handleGuardianChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther((prevState) => ({ ...prevState, guardian: newValue }));\n  };\n  const handlePowerPlayChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther((prevState) => ({ ...prevState, powerplay: newValue }));\n  };\n  const handleBeginnerChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther((prevState) => ({ ...prevState, beginner: newValue }));\n  };\n  const handleShowVariantsChange = (\n    _: MouseEvent<HTMLElement>,\n    checked: boolean\n  ) => {\n    setOther((prevState) => ({ ...prevState, showVariants: checked }));\n  };\n\n  return (\n    <div className={sharedClasses.querySection}>\n      <h3 className={sharedClasses.querySectionheader}>Other Filters</h3>\n      <div className={classes.queryOtherButtons}>\n        <Tooltip title=\"Show all builds, including variants\" arrow>\n          <div className={classes.queryOtherButtonGrids}>\n            <label>Show Variants</label>\n            <ToggleButtonGroup\n              value={other.showVariants}\n              exclusive\n              onChange={handleShowVariantsChange}\n            >\n              <ToggleButton value={true}>\n                <CheckIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Should the build have Guardian components?\" arrow>\n          <div className={classes.queryOtherButtonGrids}>\n            <label>Guardian</label>\n            <ToggleButtonGroup\n              value={other.guardian}\n              exclusive\n              onChange={handleGuardianChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Does the build have Power Play modules?\" arrow>\n          <div className={classes.queryOtherButtonGrids}>\n            <label>Power Play</label>\n            <ToggleButtonGroup\n              value={other.powerplay}\n              exclusive\n              onChange={handlePowerPlayChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Is this build easy to achieve early-game?\" arrow>\n          <div\n            className={`${classes.queryOtherButtonGrids} ${classes.QueryOtherBeginnerButtons}`}\n          >\n            <label>Beginner</label>\n            <ToggleButtonGroup\n              value={other.beginner}\n              exclusive\n              onChange={handleBeginnerChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import { Button, makeStyles } from '@material-ui/core';\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: 'center',\n    gridArea: 'buttons',\n    '& button': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport const QueryActions = (props: { resetQueries: () => void }) => {\n  const classes = useStyles();\n  const { resetQueries } = props;\n  return (\n    <div className={classes.root}>\n      <Button\n        onClick={resetQueries}\n        color=\"primary\"\n        variant=\"outlined\"\n        className=\"resetButton\"\n      >\n        Reset Selections\n      </Button>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        component={NavLink}\n        to=\"/builds/add\"\n      >\n        Add Build\n      </Button>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { IQuery, OtherFilters } from 'models/shipBuilds';\n\nimport { makeStyles, Paper } from '@material-ui/core';\nimport { QuerySpecialization } from './querySpecialities';\nimport { QueryShip } from './queryShip';\nimport { QueryEngineering } from './queryEngineering';\nimport { QueryOther } from './queryOther';\nimport { useUrlQuery } from 'hooks/useURLQuery';\nimport { QueryActions } from './queryActions';\nimport qs from 'query-string';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'grid',\n    rowGap: '2px',\n    gridTemplateAreas: `\n    'specializations'\n    'engineering'\n    'ship'\n    'other'\n    'buttons'`,\n    textAlign: 'center',\n    [theme.breakpoints.up('lg')]: {\n      gridTemplateAreas: `\n        'specializations    engineering'\n        'ship   other'\n        'buttons    buttons'`,\n      gridTemplateRows: '1fr 1fr 0.1fr',\n      rowGap: '5px',\n      columnGap: '5px',\n    },\n  },\n}));\n\nexport const Query = (props: { updateQuery: (query: IQuery) => void }) => {\n  const [shipType, setShipType] = useState<string | null>(null);\n  const [shipSize, setShipSize] = useState<number | null>(null);\n  const [engLevel, setEngLevel] = useState<number | null>(null);\n  const [selectedSpecialties, setSpecialties] = useState<string[]>([]);\n  const [other, setOther] = useState<OtherFilters>({\n    guardian: null,\n    powerplay: null,\n    beginner: null,\n    showVariants: null,\n  });\n  const urlQuery = useUrlQuery();\n  const history = useHistory();\n  const { updateQuery } = props;\n  const classes = useStyles();\n\n  useEffect(() => {\n    const shipParam = urlQuery.get('ship');\n    if (shipParam) {\n      setShipType(shipParam);\n    }\n\n    const sizeParam = urlQuery.get('size');\n    if (sizeParam) {\n      try {\n        const sizeNumber = parseInt(sizeParam);\n        setShipSize(sizeNumber);\n      } catch (e) {\n        // do nothing\n      }\n    }\n\n    const engParam = urlQuery.get('engLevel');\n    if (engParam) {\n      try {\n        const engNumber = parseInt(engParam);\n        setEngLevel(engNumber);\n      } catch (e) {\n        // do nothing\n      }\n    }\n    const specialtiesParam = urlQuery.getAll('specialties');\n    if (specialtiesParam && specialtiesParam.length > 0) {\n      setSpecialties(specialtiesParam);\n    }\n    const guardianParam = urlQuery.get('guardian');\n    const guardianValue =\n      guardianParam === '1' ? 1 : guardianParam === '0' ? 0 : null;\n    setOther((other) => ({ ...other, guardian: guardianValue }));\n\n    const powerplayParam = urlQuery.get('powerplay');\n    const powerplayValue =\n      powerplayParam === '1' ? 1 : powerplayParam === '0' ? 0 : null;\n    setOther((other) => ({ ...other, powerplay: powerplayValue }));\n\n    const beginnerParam = urlQuery.get('beginner');\n    if (beginnerParam === 'true' || beginnerParam === '1') {\n      setOther((other) => ({ ...other, beginner: 1 }));\n    } else if (beginnerParam === '0') {\n      setOther((other) => ({ ...other, beginner: 0 }));\n    }\n\n    const variantsParam = urlQuery.get('showVariants');\n    const variantValue = variantsParam === 'true' ? true : false;\n    setOther((other) => ({ ...other, showVariants: variantValue }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const query: IQuery = {\n      ship: shipType,\n      size: shipSize,\n      engLevel,\n      specialties: selectedSpecialties,\n      ...other,\n    };\n    const queryString = qs.stringify(query);\n    history.push(`/builds/?${queryString}`);\n    updateQuery(query);\n  }, [\n    shipType,\n    shipSize,\n    engLevel,\n    selectedSpecialties,\n    other,\n    updateQuery,\n    history,\n  ]);\n\n  const resetQueries = () => {\n    setShipType(null);\n    setShipSize(null);\n    setEngLevel(null);\n    setSpecialties([]);\n    setOther({\n      guardian: null,\n      powerplay: null,\n      beginner: null,\n      showVariants: null,\n    });\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <QuerySpecialization\n        selectedSpecialties={selectedSpecialties}\n        setSpecialties={setSpecialties}\n      />\n      <QueryShip\n        shipType={shipType}\n        setShipType={setShipType}\n        shipSize={shipSize}\n        setShipSize={setShipSize}\n      />\n      <QueryEngineering engLevel={engLevel} setEngLevel={setEngLevel} />\n      <QueryOther other={other} setOther={setOther} />\n      <QueryActions resetQueries={resetQueries} />\n    </Paper>\n  );\n};\n","import {\n  Container,\n  Fab,\n  Fade,\n  makeStyles,\n  Slide,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport { useCallback, useRef, useState } from 'react';\nimport { BuildList } from './builds/buildList';\nimport { IQuery } from 'models/shipBuilds';\nimport { Query } from './query/query';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\nconst useStyles = makeStyles({\n  root: {\n    '& p': {\n      textAlign: 'center',\n    },\n  },\n  header: { textAlign: 'center' },\n  fab: {\n    position: 'fixed',\n    bottom: '5px',\n    right: '10px',\n  },\n});\n\nexport const QueryandBuildList = () => {\n  const [query, setQuery] = useState<IQuery>();\n  const buildRef = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const classes = useStyles();\n\n  const handleQuery = useCallback((query: IQuery) => {\n    setQuery(query);\n  }, []);\n\n  const handleFab = () => {\n    if (buildRef.current) {\n      buildRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <Fade in={true}>\n      <Container maxWidth=\"xl\" className={classes.root}>\n        <Typography variant=\"h3\" className={classes.header}>\n          Ship Build Archive\n        </Typography>\n        <Query updateQuery={handleQuery} />\n        <div ref={buildRef}>\n          <BuildList buildQuery={query} />\n        </div>\n        <Slide direction=\"left\" in={isMobile} timeout={1000}>\n          <div className={classes.fab}>\n            <Fab color=\"primary\" className=\"fab\" onClick={handleFab}>\n              <ArrowDownwardIcon />\n            </Fab>\n          </div>\n        </Slide>\n      </Container>\n    </Fade>\n  );\n};\n","import { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { EDSpinner } from '@admiralfeb/react-components';\nimport {\n  QueryandBuildList,\n  BuildAdd,\n  BuildDetail,\n} from 'components/shipBuilds';\nimport { useShipBuilds } from 'hooks/shipBuilds/useShipBuilds';\n\nexport const ShipBuildSystemRoutes = () => {\n  const { path } = useRouteMatch();\n  const { loading } = useShipBuilds();\n\n  if (loading) {\n    return <EDSpinner />;\n  }\n\n  return (\n    <Switch>\n      <Route path={`${path}/detail/:id`}>\n        <BuildDetail />\n      </Route>\n      <Route path={path} exact>\n        <QueryandBuildList />\n      </Route>\n      <Route path={`${path}/add`}>\n        <BuildAdd />\n      </Route>\n    </Switch>\n  );\n};\n\nexport default ShipBuildSystemRoutes;\n"],"sourceRoot":""}