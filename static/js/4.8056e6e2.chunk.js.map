{"version":3,"sources":["app/information/ship-builds/models/shipSize.ts","app/information/ship-builds/models/index.ts","app/information/ship-builds/assets/Engineer_icon.svg","app/information/ship-builds/functions/getShipInfo.ts","app/information/ship-builds/components/moreInfoDialog.tsx","app/information/ship-builds/components/buildItem.tsx","app/information/ship-builds/hooks/useShipBuilds.ts","app/information/ship-builds/models/shipSpecialty.ts","app/information/ship-builds/components/builds.tsx","app/information/ship-builds/functions/filterShipBuilds.ts","app/information/ship-builds/components/querySpecialities.tsx","app/information/ship-builds/components/queryShip.tsx","app/information/ship-builds/components/queryEngineering.tsx","app/information/ship-builds/components/queryOther.tsx","app/information/ship-builds/components/query.tsx","app/information/ship-builds/hooks/useAddBuild.ts","app/information/ship-builds/components/addBuilds.tsx","app/information/ship-builds/functions/processJSONBuild.ts","app/information/ship-builds/components/selection.tsx"],"names":["ShipSize","getShipInfofromID","shipID","shipMap","find","x","id","Transition","React","forwardRef","props","ref","Slide","direction","MoreInfoDialog","content","open","setOpen","handleClose","Dialog","TransitionComponent","keepMounted","scroll","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","style","whiteSpace","DialogActions","Button","onClick","color","BuildItem","useState","shipInfo","setShipInfo","showDialog","setShowDialog","useEffect","Card","variant","className","CardMedia","image","shipImg","title","name","CardContent","Typography","description","Divider","size","requires","tags","specializations","guardian","powerplay","beginner","engLevel","author","CardActions","href","buildLink","target","moreInfo","EngIcons","icons","i","src","engineerIcon","alt","map","icon","TagGroup","v","Chip","label","ShipSpecialty","Builds","queriedBuilds","setQueriedBuilds","buildQuery","useQuery","gql","data","loading","error","Error","message","shipBuilds","useShipBuilds","filterBuilds","useCallback","filtered","query","newList","ship","filter","build","specialties","length","console","log","tempList","specialty","includes","other","val","filterShipBuilds","sorted","sortItems","_id","QuerySpecialization","selectedSpecialties","setSpecialties","getSpecialties","special","ToggleButton","value","selected","onChange","newSpecials","handleSpecialties","speciality","QueryShip","shipType","setShipType","shipSize","setShipSize","Autocomplete","options","Ships","autoHighlight","getOptionLabel","option","renderOption","renderInput","params","TextField","inputProps","autocomplete","findShipName","_","Tooltip","arrow","ToggleButtonGroup","exclusive","newValue","QueryEngineering","setEngLevel","QueryOther","setOther","Query","URLSearchParams","useLocation","search","get","queryUpdate","Paper","component","NavLink","to","AddBuildMutation","ShipBuildFieldsFragment","useStyles","makeStyles","root","textAlign","display","gridTemplate","rowGap","width","margin","AddBuild","classes","jsonBuild","setJsonBuild","ObjectId","buildInfo","setBuildInfo","addBuild","useMutation","update","cache","modify","fields","existingShipBuilds","writeFragment","fragment","addBuildMutation","a","variables","addedBuild","useAddBuild","handleTextChange","event","handleOtherChange","checked","multiline","json","JSON","parse","buildName","shipName","url","references","engineering","components","core","standard","hardpoints","internals","internal","ppName","powerPlant","pdName","powerDistributor","guardianHardPoints","group","toLowerCase","startsWith","guardianInternals","powerplayInternals","forEach","powerplayHardpoint","hp","weaponEng","blueprint","internalEng","ppEng","thrustEng","thrusters","fsdEng","frameShiftDrive","lifeEng","lifeSupport","pdEng","sensorEng","sensors","processJSONBuild","getShipInfofromName","info","FormControlLabel","control","Checkbox","result","Selection","path","useRouteMatch","setQuery","buildRef","useRef","isMobile","useMediaQuery","exact","Fab","current","scrollIntoView","behavior"],"mappings":"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","file":"static/js/4.8056e6e2.chunk.js","sourcesContent":["export enum ShipSize {\r\n    'S' = 1,\r\n    'M',\r\n    'L'\r\n}\r\n","export * from './buildInfo';\r\nexport * from './query';\r\nexport * from './shipInfo';\r\nexport * from './shipSize';\r\nexport * from './tag';\r\n","export default __webpack_public_path__ + \"static/media/Engineer_icon.f8ffd94f.svg\";","import shipMap from '../assets/shipMap.json';\r\nimport { IShipInfo } from '../models/shipInfo';\r\n\r\nexport const getShipInfofromID = (shipID: number): IShipInfo | undefined => {\r\n    const ship: IShipInfo | undefined = shipMap.find(x => x.id === shipID);\r\n    return ship;\r\n}\r\nexport const getShipInfofromName = (shipName: string): IShipInfo | undefined => {\r\n    const ship: IShipInfo | undefined = shipMap.find(x => x.name.toLowerCase() === shipName.toLowerCase());\r\n    return ship;\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n  ref: React.Ref<unknown>\r\n) {\r\n  return <Slide direction='up' ref={ref} {...props} />;\r\n});\r\n\r\nexport const MoreInfoDialog = (props: {\r\n  content: string;\r\n  open: boolean;\r\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n}) => {\r\n  const { content, open, setOpen } = props;\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        scroll='paper'\r\n        onClose={handleClose}\r\n        aria-labelledby='alert-dialog-slide-title'\r\n        aria-describedby='alert-dialog-slide-description'>\r\n        <DialogTitle id='alert-dialog-slide-title'>\r\n          {'More Info About the Build'}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText\r\n            id='alert-dialog-slide-description'\r\n            style={{ whiteSpace: 'pre-line' }}>\r\n            {content}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            OK\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport engineerIcon from '../assets/Engineer_icon.svg';\r\nimport './buildItem.css';\r\nimport { Chip } from '@material-ui/core';\r\nimport { getShipInfofromID } from '../functions/getShipInfo';\r\nimport { IShipInfo } from '../models/shipInfo';\r\nimport { ShipSize } from '../models';\r\nimport { MoreInfoDialog } from './moreInfoDialog';\r\n\r\ninterface IBuildItemProps {\r\n  id: number;\r\n  author: string;\r\n  specializations: string[];\r\n  engLevel: number;\r\n  description: string;\r\n  buildLink: string;\r\n  guardian: boolean;\r\n  powerplay: boolean;\r\n  beginner: boolean;\r\n  moreInfo?: string;\r\n}\r\n\r\nexport const BuildItem = (props: IBuildItemProps) => {\r\n  const [shipInfo, setShipInfo] = useState<IShipInfo>();\r\n  const [showDialog, setShowDialog] = useState<boolean>(false);\r\n\r\n  useEffect(() => setShipInfo(getShipInfofromID(props.id)), [props.id]);\r\n\r\n  const handleShowDialog = () => {\r\n    setShowDialog(true);\r\n  };\r\n\r\n  return (\r\n    <Card variant='outlined' className='card'>\r\n      {shipInfo && (\r\n        <CardMedia\r\n          className='shipImg'\r\n          image={shipInfo?.shipImg}\r\n          title={shipInfo?.name}\r\n        />\r\n      )}\r\n      <CardContent className='cardContent'>\r\n        <Typography>{props.description}</Typography>\r\n        <Divider />\r\n        <div className='shipName'>\r\n          <Typography>{shipInfo?.name} </Typography>\r\n          <div className='spacer' />\r\n          {shipInfo && <Typography>{ShipSize[shipInfo.size]}</Typography>}\r\n        </div>\r\n        {shipInfo?.requires && (\r\n          <Typography>Requirement: {shipInfo.requires}</Typography>\r\n        )}\r\n        <TagGroup\r\n          tags={props.specializations}\r\n          guardian={props.guardian}\r\n          powerplay={props.powerplay}\r\n          beginner={props.beginner}\r\n        />\r\n        <Divider />\r\n        <EngIcons engLevel={props.engLevel} />\r\n        <Divider />\r\n        <Typography>Author: {props.author}</Typography>\r\n        <CardActions className='cardActions'>\r\n          <Button\r\n            variant='contained'\r\n            color='secondary'\r\n            href={props.buildLink}\r\n            target='_blank'>\r\n            View Build\r\n          </Button>{' '}\r\n          {props.moreInfo && (\r\n            <>\r\n              <Button\r\n                variant='contained'\r\n                color='primary'\r\n                onClick={handleShowDialog}>\r\n                More Info\r\n              </Button>\r\n              <MoreInfoDialog\r\n                content={props.moreInfo!}\r\n                open={showDialog}\r\n                setOpen={setShowDialog}\r\n              />\r\n            </>\r\n          )}\r\n        </CardActions>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst EngIcons = (props: { engLevel: number }) => {\r\n  let icons: JSX.Element[] = [];\r\n  if (props.engLevel > 3 || props.engLevel < 1) {\r\n    return (\r\n      <div className='engineering'>\r\n        <p>Engineering Level: None</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    for (let i = 1; i <= props.engLevel; i++) {\r\n      icons = [\r\n        ...icons,\r\n        <img src={engineerIcon} key={i} alt='Engineering Icon' />,\r\n      ];\r\n    }\r\n    return (\r\n      <div className='engineering'>\r\n        <p>\r\n          <span>Engineering Level:</span> {icons.map((icon) => icon)}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst TagGroup = (props: {\r\n  tags: string[];\r\n  guardian: boolean;\r\n  powerplay: boolean;\r\n  beginner: boolean;\r\n}) => {\r\n  return (\r\n    <div className='chips'>\r\n      {props.tags.map((v) => (\r\n        <Chip label={v} key={v} />\r\n      ))}\r\n      {props.guardian && <Chip label='Guardian' key='guardian' />}\r\n      {props.powerplay && <Chip label='PowerPlay' key='powerplay' />}\r\n      {props.beginner && <Chip label='Beginner' key='beginner' />}\r\n    </div>\r\n  );\r\n};\r\n","import { gql, useQuery } from '@apollo/client';\r\nimport { IBuildInfo } from '../models';\r\n\r\nexport const useShipBuilds = () => {\r\n\r\n    const { data, loading, error } = useQuery<{ shipBuilds: IBuildInfo[] }>(gql`\r\n        query AllShipBuilds {\r\n            shipBuilds {\r\n                _id\r\n                author\r\n                beginner\r\n                buildLink\r\n                description\r\n                engLevel\r\n                guardian\r\n                moreInfo\r\n                powerplay\r\n                ship\r\n                specializations\r\n            }\r\n        }`\r\n    );\r\n    if (error) {\r\n        throw new Error(`Failed to fetch ship builds: ${error.message}`);\r\n    }\r\n\r\n    const shipBuilds = data?.shipBuilds ?? [];\r\n\r\n    return { shipBuilds, loading };\r\n}\r\n","export enum ShipSpecialty {\r\n    exp = 'Exploration',\r\n    jump = 'Jump Ship',\r\n    hge = 'HGE Farming',\r\n    cargo = 'Cargo',\r\n    mining = 'Miner',\r\n    pve = 'Combat - PvE',\r\n    pvp = 'Combat - PvP',\r\n    ax = 'Combat - Anti-Xeno',\r\n    racing = 'Racing',\r\n    multi = 'Multi-Purpose',\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Loading } from '../../../components';\r\nimport { filterShipBuilds } from '../functions/filterShipBuilds';\r\nimport { getShipInfofromID } from '../functions/getShipInfo';\r\nimport { sortItems } from '../functions/sort';\r\nimport { useShipBuilds } from '../hooks/useShipBuilds';\r\nimport { IBuildInfo, IQuery } from '../models';\r\nimport { BuildItem } from './buildItem';\r\nimport './builds.css';\r\n\r\nexport const Builds = (props: { buildQuery: IQuery | undefined }) => {\r\n  const [queriedBuilds, setQueriedBuilds] = useState<IBuildInfo[]>();\r\n  const { buildQuery } = props;\r\n  const { loading, shipBuilds } = useShipBuilds();\r\n\r\n  let filterBuilds = useCallback(() => {\r\n    if (loading) {\r\n      return;\r\n    }\r\n    const mappedBuilds = shipBuilds?.map((v) => {\r\n      const shipInfo = getShipInfofromID(v.ship)!;\r\n      const size = shipInfo?.size;\r\n      const newBuild: IBuildInfo = { ...v, size };\r\n      return newBuild;\r\n    });\r\n\r\n    const filtered = filterShipBuilds(mappedBuilds, buildQuery);\r\n    const sorted = sortItems(filtered!, 'ship');\r\n    setQueriedBuilds(sorted);\r\n  }, [loading, shipBuilds, buildQuery]);\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      return;\r\n    }\r\n    filterBuilds();\r\n  }, [loading, filterBuilds]);\r\n\r\n  return (\r\n    <div className='builds'>\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        queriedBuilds?.map((ship) => {\r\n          return (\r\n            <BuildItem\r\n              key={ship._id}\r\n              id={ship.ship}\r\n              author={ship.author}\r\n              specializations={ship.specializations}\r\n              engLevel={ship.engLevel}\r\n              description={ship.description}\r\n              buildLink={ship.buildLink}\r\n              guardian={ship.guardian}\r\n              powerplay={ship.powerplay}\r\n              beginner={ship.beginner}\r\n              moreInfo={ship.moreInfo}\r\n            />\r\n          );\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { IBuildInfo, IQuery } from \"../models\";\r\n\r\nexport const filterShipBuilds = (\r\n    shipBuilds: IBuildInfo[] | undefined,\r\n    query: IQuery | undefined\r\n) => {\r\n    if (shipBuilds && query) {\r\n        let newList = shipBuilds;\r\n        // ship type\r\n        if (query.ship !== null) {\r\n            newList = newList.filter((build) => build.ship === query.ship);\r\n        }\r\n        // ship size\r\n        if (query.size !== null) {\r\n            newList = newList.filter((build) => build.size === query.size);\r\n        }\r\n        // Engineering\r\n        if (query.engLevel !== null) {\r\n            newList = newList.filter((build) => build.engLevel === query.engLevel);\r\n        }\r\n        // Specializations\r\n        if (query.specialties.length > 0) {\r\n            console.log(query.specialties);\r\n            let tempList: IBuildInfo[] = [];\r\n            for (const specialty of query.specialties) {\r\n                if (tempList.length > 0) {\r\n                    tempList = tempList.filter(build => build.specializations.includes(specialty));\r\n                } else {\r\n                    tempList = newList.filter(build => build.specializations.includes(specialty))\r\n                }\r\n            }\r\n            newList = tempList;\r\n        }\r\n        // Guardian\r\n        if (query.other.guardian !== null) {\r\n            const val = query.other.guardian === 1 ? true : false;\r\n            newList = newList.filter((build) => build.guardian === val);\r\n        }\r\n        // PowerPlay\r\n        if (query.other.powerplay !== null) {\r\n            const val = query.other.powerplay === 1 ? true : false;\r\n            newList = newList.filter((build) => build.powerplay === val);\r\n        }\r\n        // Beginner\r\n        if (query.other.beginner !== null) {\r\n            const val = query.other.beginner === 1 ? true : false;\r\n            newList = newList.filter((build) => build.beginner === val);\r\n        }\r\n        return newList;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { ToggleButton } from '@material-ui/lab';\r\nimport { ShipSpecialty } from '../models/shipSpecialty';\r\n\r\nexport const QuerySpecialization = (props: {\r\n  selectedSpecialties: string[];\r\n  setSpecialties: React.Dispatch<React.SetStateAction<string[]>>;\r\n}) => {\r\n  const { selectedSpecialties, setSpecialties } = props;\r\n\r\n  const handleSpecialties = (special: string) => {\r\n    let newSpecials: string[] = [];\r\n    if (selectedSpecialties.includes(special)) {\r\n      newSpecials = selectedSpecialties.filter((v) => v !== special);\r\n    } else {\r\n      newSpecials = [...selectedSpecialties, special];\r\n    }\r\n    setSpecialties(newSpecials);\r\n  };\r\n\r\n  return (\r\n    <div className='specializationQuery'>\r\n      <h3 className='queryHeader'>Ship Specializations</h3>\r\n\r\n      <Typography>\r\n        Select specializations that the ship should fulfill.\r\n      </Typography>\r\n\r\n      <div className='specialButtons'>\r\n        {getSpecialties().map((special) => (\r\n          <ToggleButton\r\n            value={special}\r\n            key={special}\r\n            selected={selectedSpecialties.includes(special)}\r\n            onChange={() => handleSpecialties(special)}>\r\n            {special}\r\n          </ToggleButton>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getSpecialties = (): string[] => {\r\n  let specialties: string[] = [];\r\n\r\n  for (const speciality in ShipSpecialty) {\r\n    specialties = [\r\n      ...specialties,\r\n      ShipSpecialty[speciality as keyof typeof ShipSpecialty],\r\n    ];\r\n  }\r\n  return specialties;\r\n};\r\n","import { TextField, Tooltip } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { sortItems } from '../functions/sort';\r\nimport Ships from '../assets/shipMap.json';\r\nimport {\r\n  Autocomplete,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n} from '@material-ui/lab';\r\n\r\nexport const QueryShip = (props: {\r\n  shipSize: number | null;\r\n  setShipSize: React.Dispatch<React.SetStateAction<number | null>>;\r\n  shipType: number | null;\r\n  setShipType: React.Dispatch<React.SetStateAction<number | null>>;\r\n}) => {\r\n  const { shipType, setShipType, shipSize, setShipSize } = props;\r\n\r\n  const handleShipSizeChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setShipType(null);\r\n    setShipSize(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className='shipQuery'>\r\n      <h3 className='queryHeader'>Ship Type and Size</h3>\r\n      <div className='shipQuerySection'>\r\n        <div className='shipTypeQuery'>\r\n          <Autocomplete\r\n            id='shipType'\r\n            options={sortItems(Ships, 'name')}\r\n            autoHighlight\r\n            getOptionLabel={(option) => option.name}\r\n            renderOption={(option) => (\r\n              <>\r\n                <span>{option.name}</span>\r\n              </>\r\n            )}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label='Ship Type'\r\n                variant='outlined'\r\n                inputProps={{\r\n                  ...params.inputProps,\r\n                  autocomplete: 'new-password',\r\n                }}\r\n              />\r\n            )}\r\n            value={findShipName(shipType)}\r\n            onChange={(_, value) => setShipType(value!.id)}\r\n          />\r\n        </div>\r\n        <div className='shipSizeQuery'>\r\n          <Tooltip\r\n            title=\"What's the size of the ship you're looking for?\"\r\n            arrow>\r\n            <ToggleButtonGroup\r\n              value={shipSize}\r\n              exclusive\r\n              onChange={handleShipSizeChange}>\r\n              <ToggleButton value={1}>Small</ToggleButton>\r\n              <ToggleButton value={2}>Medium</ToggleButton>\r\n              <ToggleButton value={3}>Large</ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </Tooltip>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst findShipName = (shipID: number | null) => {\r\n  if (shipID === null) {\r\n    return null;\r\n  }\r\n  const shipName = Ships.find((x) => x.id === shipID);\r\n  return shipName;\r\n};\r\n","import { Tooltip, Typography } from '@material-ui/core';\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\r\nimport BlockIcon from '@material-ui/icons/Block';\r\nimport engineerIcon from '../assets/Engineer_icon.svg';\r\n\r\nimport React, { SetStateAction } from 'react';\r\n\r\nexport const QueryEngineering = (props: {\r\n  engLevel: number | null;\r\n  setEngLevel: React.Dispatch<SetStateAction<number | null>>;\r\n}) => {\r\n  const { engLevel, setEngLevel } = props;\r\n\r\n  const handleEngLevelChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setEngLevel(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className='engineeringQuery'>\r\n      <h3 className='queryHeader'>Ship Engineering Level</h3>\r\n      <Typography>\r\n        Select Engineering level ranging from None to Max Engineering.\r\n      </Typography>\r\n      <ToggleButtonGroup\r\n        value={engLevel}\r\n        exclusive\r\n        onChange={handleEngLevelChange}>\r\n        <ToggleButton value={0}>\r\n          <Tooltip title='No Engineering' arrow>\r\n            <div className='engButton'>\r\n              <BlockIcon />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton value={1}>\r\n          <Tooltip title='Simple Engineering' arrow>\r\n            <div className='engButton'>\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton value={2}>\r\n          <Tooltip title='Moderate Engineering' arrow>\r\n            <div className='engButton'>\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton value={3}>\r\n          <Tooltip title='End-Game/Extreme Engineering' arrow>\r\n            <div className='engButton'>\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n    </div>\r\n  );\r\n};\r\n","import { Tooltip } from '@material-ui/core';\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\r\nimport React from 'react';\r\nimport { OtherFilters } from '../models/otherFilters';\r\nimport BlockIcon from '@material-ui/icons/Block';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\nexport const QueryOther = (props: {\r\n  other: OtherFilters;\r\n  setOther: React.Dispatch<React.SetStateAction<OtherFilters>>;\r\n}) => {\r\n  const { other, setOther } = props;\r\n\r\n  const handleGuardianChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setOther({ ...other, guardian: newValue });\r\n  };\r\n  const handlePowerPlayChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setOther({ ...other, powerplay: newValue });\r\n  };\r\n  const handleBeginnerChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    newValue: number\r\n  ) => {\r\n    setOther({ ...other, beginner: newValue });\r\n  };\r\n\r\n  return (\r\n    <div className='otherQuery'>\r\n      <h3 className='queryHeader'>Other Filters</h3>\r\n      <div className='otherButtons'>\r\n        <Tooltip title='Should the build have Guardian components?' arrow>\r\n          <div className='guardian'>\r\n            <label>Guardian</label>\r\n            <ToggleButtonGroup\r\n              value={other.guardian}\r\n              exclusive\r\n              onChange={handleGuardianChange}>\r\n              <ToggleButton value={1}>\r\n                <CheckIcon />\r\n              </ToggleButton>\r\n              <ToggleButton value={0}>\r\n                <BlockIcon />\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        </Tooltip>\r\n        <Tooltip title='Does the build have Power Play modules?' arrow>\r\n          <div className='powerplay'>\r\n            <label>Power Play</label>\r\n            <ToggleButtonGroup\r\n              value={other.powerplay}\r\n              exclusive\r\n              onChange={handlePowerPlayChange}>\r\n              <ToggleButton value={1}>\r\n                <CheckIcon />\r\n              </ToggleButton>\r\n              <ToggleButton value={0}>\r\n                <BlockIcon />\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        </Tooltip>\r\n        <Tooltip title='Is this build easy to achieve early-game?'>\r\n          <div className='beginner'>\r\n            <label>Beginner</label>\r\n            <ToggleButtonGroup\r\n              value={other.beginner}\r\n              exclusive\r\n              onChange={handleBeginnerChange}>\r\n              <ToggleButton value={1}>\r\n                <CheckIcon />\r\n              </ToggleButton>\r\n              <ToggleButton value={0}>\r\n                <BlockIcon />\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        </Tooltip>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { IQuery } from '../models';\r\n\r\nimport './query.css';\r\n\r\nimport { Button, Paper } from '@material-ui/core';\r\nimport { QuerySpecialization } from './querySpecialities';\r\nimport { QueryShip } from './queryShip';\r\nimport { QueryEngineering } from './queryEngineering';\r\nimport { QueryOther } from './queryOther';\r\nimport { OtherFilters } from '../models/otherFilters';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\n\r\nconst useUrlQuery = () => {\r\n  return new URLSearchParams(useLocation().search);\r\n};\r\nexport const Query = (props: { queryUpdate: (query: IQuery) => void }) => {\r\n  const [shipType, setShipType] = useState<number | null>(null);\r\n  const [shipSize, setShipSize] = useState<number | null>(null);\r\n  const [engLevel, setEngLevel] = useState<number | null>(null);\r\n  const [selectedSpecialties, setSpecialties] = useState<string[]>([]);\r\n  const [other, setOther] = useState<OtherFilters>({\r\n    guardian: null,\r\n    powerplay: null,\r\n    beginner: null,\r\n  });\r\n  let query = useUrlQuery();\r\n\r\n  useEffect(() => {\r\n    const queryParam = query.get('beginner');\r\n    if (queryParam === 'true') {\r\n      setOther({ ...other, beginner: 1 });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const { queryUpdate } = props;\r\n    const query: IQuery = {\r\n      ship: shipType,\r\n      size: shipSize,\r\n      engLevel,\r\n      specialties: selectedSpecialties,\r\n      other,\r\n    };\r\n    queryUpdate(query);\r\n    // Disable eslint. Props is not missing from dependencies.\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [shipType, shipSize, engLevel, selectedSpecialties, other]);\r\n\r\n  const resetQueries = () => {\r\n    setShipType(null);\r\n    setShipSize(null);\r\n    setEngLevel(null);\r\n    setSpecialties([]);\r\n    setOther({\r\n      guardian: null,\r\n      powerplay: null,\r\n      beginner: null,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Paper className='query'>\r\n      <QuerySpecialization\r\n        selectedSpecialties={selectedSpecialties}\r\n        setSpecialties={setSpecialties}\r\n      />\r\n      <QueryShip\r\n        shipType={shipType}\r\n        setShipType={setShipType}\r\n        shipSize={shipSize}\r\n        setShipSize={setShipSize}\r\n      />\r\n      <QueryEngineering engLevel={engLevel} setEngLevel={setEngLevel} />\r\n      <QueryOther other={other} setOther={setOther} />\r\n      <div className='reset'>\r\n        <Button\r\n          onClick={resetQueries}\r\n          color='primary'\r\n          variant='outlined'\r\n          className='resetButton'>\r\n          Reset Selections\r\n        </Button>\r\n        <Button\r\n          variant='outlined'\r\n          color='secondary'\r\n          component={NavLink}\r\n          to='/information/builds/add'>\r\n          Add Build\r\n        </Button>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n","import { gql, useMutation } from \"@apollo/client\"\r\nimport { IBuildInfoInsert } from \"../models/buildInfoInsert\";\r\n\r\nconst AddBuildMutation = gql`\r\n    mutation AddBuild($build: ShipBuildInsertInput!) {\r\n        addedBuild: insertOneShipBuild(data: $build) {\r\n            _id\r\n            author\r\n            beginner\r\n            buildLink\r\n            description\r\n            engLevel\r\n            guardian\r\n            moreInfo\r\n            powerplay\r\n            ship\r\n            specializations\r\n            id\r\n        }\r\n}`;\r\n\r\nconst ShipBuildFieldsFragment = gql`\r\n    fragment ShipBuildFields on shipBuilds {\r\n        _id\r\n    }`;\r\n\r\nexport const useAddBuild = () => {\r\n    const [addBuildMutation] = useMutation<IBuildInfoInsert>(AddBuildMutation, {\r\n        update: (cache, { data }) => {\r\n            cache.modify({\r\n                fields: {\r\n                    shipBuilds: (existingShipBuilds = []) => [\r\n                        ...existingShipBuilds,\r\n                        cache.writeFragment({\r\n                            data,\r\n                            fragment: ShipBuildFieldsFragment,\r\n                        })\r\n                    ]\r\n                }\r\n            })\r\n        }\r\n    });\r\n\r\n    const addShipBuild = async (build: IBuildInfoInsert) => {\r\n        const addedBuild = await addBuildMutation({\r\n            variables: {\r\n                build: {\r\n                    ...build\r\n                }\r\n            }\r\n        });\r\n        return addedBuild;\r\n    }\r\n\r\n    return addShipBuild;\r\n}\r\n","import {\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  makeStyles,\r\n  TextField,\r\n  Tooltip,\r\n} from '@material-ui/core';\r\nimport React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { processJSONBuild } from '../functions/processJSONBuild';\r\nimport { getShipInfofromName } from '../functions/getShipInfo';\r\nimport { sortItems } from '../functions/sort';\r\nimport Ships from '../assets/shipMap.json';\r\nimport {\r\n  Autocomplete,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n} from '@material-ui/lab';\r\nimport BlockIcon from '@material-ui/icons/Block';\r\nimport engineerIcon from '../assets/Engineer_icon.svg';\r\nimport { useAddBuild } from '../hooks/useAddBuild';\r\nimport { IBuildInfoInsert } from '../models/buildInfoInsert';\r\nimport { ObjectId } from 'bson';\r\nimport { QuerySpecialization } from './querySpecialities';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    textAlign: 'center',\r\n    display: 'grid',\r\n    gridTemplate: 'auto / 1fr',\r\n    rowGap: '10px',\r\n    width: '90%',\r\n    margin: 'auto',\r\n  },\r\n});\r\n\r\nexport const AddBuild = () => {\r\n  const classes = useStyles();\r\n  const [jsonBuild, setJsonBuild] = useState('');\r\n  const [buildInfo, setBuildInfo] = useState<IBuildInfoInsert>({\r\n    description: '',\r\n    guardian: false,\r\n    powerplay: false,\r\n    buildLink: '',\r\n    ship: 0,\r\n    moreInfo: '',\r\n    _id: new ObjectId(),\r\n    id: 0,\r\n    author: '',\r\n    specializations: [],\r\n    engLevel: 0,\r\n    beginner: false,\r\n  });\r\n  const [specialties, setSpecialties] = useState<string[]>([]);\r\n  const addBuild = useAddBuild();\r\n\r\n  useEffect(() => {\r\n    setBuildInfo((buildInfo) => {\r\n      return { ...buildInfo, specializations: specialties };\r\n    });\r\n  }, [specialties]);\r\n\r\n  const handleJSONChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setJsonBuild(event.target.value);\r\n    const {\r\n      buildName,\r\n      shipName,\r\n      guardian,\r\n      powerplay,\r\n      engineering,\r\n      url,\r\n    } = processJSONBuild(event.target.value);\r\n    const engLevel = engineering ? 1 : 0;\r\n    const shipInfo = getShipInfofromName(shipName)!;\r\n    const _id = buildInfo._id;\r\n    const info: IBuildInfoInsert = {\r\n      _id,\r\n      id: 0,\r\n      description: buildName,\r\n      guardian,\r\n      powerplay,\r\n      buildLink: url,\r\n      ship: shipInfo.id,\r\n      author: '',\r\n      specializations: [],\r\n      engLevel,\r\n      beginner: false,\r\n      moreInfo: '',\r\n    };\r\n    console.log(info);\r\n    setBuildInfo(info);\r\n  };\r\n\r\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n\r\n    switch (event.target.id) {\r\n      case 'description':\r\n        setBuildInfo({ ...buildInfo, description: value });\r\n        break;\r\n      case 'moreInfo':\r\n        setBuildInfo({ ...buildInfo, moreInfo: value });\r\n        break;\r\n      case 'buildLink':\r\n        setBuildInfo({ ...buildInfo, buildLink: value });\r\n        break;\r\n      case 'author':\r\n        setBuildInfo({ ...buildInfo, author: value });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleEngLevelChange = (\r\n    _: React.MouseEvent<HTMLElement>,\r\n    engLevel: number\r\n  ) => {\r\n    setBuildInfo({ ...buildInfo, engLevel });\r\n  };\r\n  const handleOtherChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setBuildInfo({ ...buildInfo, [event.target.name]: event.target.checked });\r\n  };\r\n  const handleSubmit = () => {\r\n    const result = addBuild(buildInfo);\r\n    console.log(result);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Button\r\n        to='/information/builds'\r\n        component={NavLink}\r\n        color='secondary'\r\n        variant='outlined'>\r\n        Return to builds\r\n      </Button>\r\n      {jsonBuild === '' && (\r\n        <TextField\r\n          label='Exported JSON'\r\n          multiline\r\n          value={jsonBuild}\r\n          onChange={handleJSONChange}\r\n        />\r\n      )}\r\n      <TextField\r\n        id='description'\r\n        label='Title/Description'\r\n        value={buildInfo.description}\r\n        onChange={handleTextChange}\r\n      />\r\n      <TextField\r\n        id='moreInfo'\r\n        label='More Information'\r\n        multiline\r\n        value={buildInfo.moreInfo}\r\n        onChange={handleTextChange}\r\n      />\r\n      <TextField\r\n        id='buildLink'\r\n        label='Build Link - Full Link'\r\n        value={buildInfo.buildLink}\r\n        onChange={handleTextChange}\r\n      />\r\n      <TextField\r\n        id='author'\r\n        label='Author'\r\n        value={buildInfo.author}\r\n        onChange={handleTextChange}\r\n      />\r\n      <Autocomplete\r\n        id='shipType'\r\n        options={sortItems(Ships, 'name')}\r\n        autoHighlight\r\n        getOptionLabel={(option) => option.name}\r\n        renderOption={(option) => (\r\n          <>\r\n            <span>{option.name}</span>\r\n          </>\r\n        )}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label='Ship Type'\r\n            variant='outlined'\r\n            inputProps={{\r\n              ...params.inputProps,\r\n              autocomplete: 'new-password',\r\n            }}\r\n          />\r\n        )}\r\n        value={findShipName(buildInfo.ship)}\r\n        onChange={(_, value) => {\r\n          const ship = value!.id;\r\n          setBuildInfo({ ...buildInfo, ship });\r\n        }}\r\n      />\r\n      <QuerySpecialization\r\n        selectedSpecialties={specialties}\r\n        setSpecialties={setSpecialties}\r\n      />\r\n      <ToggleButtonGroup\r\n        value={buildInfo.engLevel}\r\n        exclusive\r\n        onChange={handleEngLevelChange}>\r\n        <ToggleButton value={0}>\r\n          <Tooltip title='No Engineering' arrow>\r\n            <div className='engButton'>\r\n              <BlockIcon />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton value={1}>\r\n          <Tooltip title='Simple Engineering' arrow>\r\n            <div className='engButton'>\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton value={2}>\r\n          <Tooltip title='Moderate Engineering' arrow>\r\n            <div className='engButton'>\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n        <ToggleButton value={3}>\r\n          <Tooltip title='End-Game/Extreme Engineering' arrow>\r\n            <div className='engButton'>\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n              <img src={engineerIcon} alt='engineeringIcon' />\r\n            </div>\r\n          </Tooltip>\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n      <FormControlLabel\r\n        label='Guardian'\r\n        control={\r\n          <Checkbox\r\n            name='guardian'\r\n            checked={buildInfo.guardian}\r\n            onChange={handleOtherChange}\r\n          />\r\n        }\r\n      />\r\n      <FormControlLabel\r\n        label='Powerplay'\r\n        control={\r\n          <Checkbox\r\n            name='powerplay'\r\n            checked={buildInfo.powerplay}\r\n            onChange={handleOtherChange}\r\n          />\r\n        }\r\n      />\r\n      <FormControlLabel\r\n        label='Beginner'\r\n        control={\r\n          <Checkbox\r\n            name='beginner'\r\n            checked={buildInfo.beginner}\r\n            onChange={handleOtherChange}\r\n          />\r\n        }\r\n      />\r\n      <Button onClick={handleSubmit}>Submit Build</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst findShipName = (shipID: number | null) => {\r\n  if (shipID === null) {\r\n    return null;\r\n  }\r\n  const shipName = Ships.find((x) => x.id === shipID);\r\n  return shipName;\r\n};\r\n","import { ICoriolisLoadout } from '../models/coriolis';\r\n\r\nexport const processJSONBuild = (\r\n    json: string\r\n): {\r\n    buildName: string;\r\n    shipName: string;\r\n    guardian: boolean;\r\n    powerplay: boolean;\r\n    engineering: boolean;\r\n    url: string;\r\n} => {\r\n    const build: ICoriolisLoadout = JSON.parse(json);\r\n\r\n    const buildName = build.name;\r\n    const shipName = build.ship;\r\n    const url = build.references[0].url ?? '';\r\n    let guardian = false;\r\n    let powerplay = false;\r\n    let engineering = false;\r\n\r\n    const components = build.components;\r\n    const core = components.standard;\r\n    const hardpoints = components.hardpoints;\r\n    const internals = components.internal;\r\n\r\n    // Check for Guardian\r\n    const ppName = (core.powerPlant.name as string) ?? '';\r\n    const pdName = (core.powerDistributor.name as string) ?? '';\r\n    const guardianHardPoints = hardpoints.find((x) =>\r\n        x?.group.toLowerCase().startsWith('guardian')\r\n    );\r\n    const guardianInternals = internals.find((x) =>\r\n        x?.group.toLowerCase().startsWith('guardian')\r\n    );\r\n    if (\r\n        guardian === false &&\r\n        (ppName.toLowerCase().startsWith('guardian') ||\r\n            pdName.toLowerCase().startsWith('guardian') ||\r\n            guardianHardPoints ||\r\n            guardianInternals)\r\n    ) {\r\n        guardian = true;\r\n    }\r\n\r\n    // Check for PowerPlay\r\n    const powerplayWeaponNames = [\r\n        'disruptor',\r\n        'imperial hammer',\r\n        'pack-hound',\r\n        'mining lance',\r\n        'enforcer',\r\n        'cytoscrambler',\r\n        'retributor',\r\n        'advanced plasma accelerator',\r\n        'pacifier',\r\n        'rocket propelled fsd disruptor',\r\n    ];\r\n    const powerplayInternals = internals.find((x) =>\r\n        x?.group.toLowerCase().startsWith('prismatic')\r\n    );\r\n    if (powerplay === false && powerplayInternals) {\r\n        powerplay = true;\r\n    }\r\n    powerplayWeaponNames.forEach((x) => {\r\n        if (powerplay === false) {\r\n            const powerplayHardpoint = hardpoints.find(\r\n                (hp) => hp?.name?.toLowerCase() === x.toLowerCase()\r\n            );\r\n            powerplay = powerplayHardpoint ? true : false;\r\n        }\r\n    });\r\n\r\n    // Check for engineering\r\n    const weaponEng = hardpoints.filter((hp) => hp?.blueprint);\r\n    const internalEng = internals.filter((i) => i?.blueprint);\r\n    const ppEng = core.powerPlant.blueprint;\r\n    const thrustEng = core.thrusters.blueprint;\r\n    const fsdEng = core.frameShiftDrive.blueprint;\r\n    const lifeEng = core.lifeSupport.blueprint;\r\n    const pdEng = core.powerDistributor.blueprint;\r\n    const sensorEng = core.sensors.blueprint;\r\n    if (\r\n        engineering === false &&\r\n        (weaponEng.length > 0 ||\r\n            internalEng.length > 0 ||\r\n            ppEng ||\r\n            thrustEng ||\r\n            fsdEng ||\r\n            lifeEng ||\r\n            pdEng ||\r\n            sensorEng)\r\n    ) {\r\n        engineering = true;\r\n    }\r\n\r\n    return { buildName, shipName, guardian, powerplay, engineering, url };\r\n};\r\n","import { Fab, Typography, useMediaQuery } from '@material-ui/core';\r\nimport React, { useRef, useState } from 'react';\r\nimport { Builds } from '.';\r\nimport { IQuery } from '../models';\r\nimport { Query } from './query';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport './selection.css';\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\nimport { AddBuild } from './addBuilds';\r\n\r\nexport const Selection = () => {\r\n  const { path } = useRouteMatch();\r\n  const [query, setQuery] = useState<IQuery>();\r\n  const buildRef = useRef<HTMLDivElement>(null);\r\n  const isMobile = useMediaQuery('(max-width:1000px)');\r\n\r\n  const handleQuery = (query: IQuery) => {\r\n    setQuery(query);\r\n  };\r\n  const handleFab = () => {\r\n    if (buildRef.current) {\r\n      buildRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={path} exact>\r\n        <section className='selection'>\r\n          <Typography variant='h3'>Ship Build Archive</Typography>\r\n          <Query queryUpdate={handleQuery} />\r\n          <div ref={buildRef}>\r\n            <Builds buildQuery={query} />\r\n          </div>\r\n          {isMobile && (\r\n            <div className='fab'>\r\n              <Fab color='primary' className='fab' onClick={handleFab}>\r\n                <ArrowDownwardIcon />\r\n              </Fab>\r\n            </div>\r\n          )}\r\n        </section>\r\n      </Route>\r\n      <Route path={`${path}/add`}>\r\n        <AddBuild />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n"],"sourceRoot":""}