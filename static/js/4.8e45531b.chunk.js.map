{"version":3,"sources":["app/information/ship-builds/models/index.ts","app/information/ship-builds/models/shipSize.ts","app/information/ship-builds/models/shipSpecialty.ts","app/information/ship-builds/functions/getShipInfo.ts","app/information/ship-builds/components/query/querySpecialities.tsx","app/information/ship-builds/assets/Engineer_icon.svg","app/information/ship-builds/components/engToggleGroup.tsx","app/information/ship-builds/components/builds/buildAddText.tsx","app/information/ship-builds/components/shipAutocomplete.tsx","app/information/ship-builds/hooks/useShipMap.ts","app/information/ship-builds/components/builds/buildCheckBox.tsx","app/information/ship-builds/hooks/useShipBuildMutations.ts","app/information/ship-builds/hooks/useShipBuilds.ts","app/information/ship-builds/hooks/useURLQuery.ts","app/information/ship-builds/components/builds/buildAdd.tsx","app/information/ship-builds/functions/processJSONBuild.ts","app/information/ship-builds/components/builds/engIcons.tsx","app/information/ship-builds/components/builds/tagGroup.tsx","app/information/ship-builds/components/builds/buildCard.tsx","app/information/ship-builds/components/builds/buildDetailBuilds.tsx","app/information/ship-builds/components/builds/buildDetail.tsx","app/information/ship-builds/components/builds/buildList.tsx","app/information/ship-builds/functions/filterShipBuilds.ts","app/information/ship-builds/components/query/queryShip.tsx","app/information/ship-builds/components/query/queryEngineering.tsx","app/information/ship-builds/components/query/queryOther.tsx","app/information/ship-builds/components/query/query.tsx","app/information/ship-builds/components/queryandBuildList.tsx","app/information/ship-builds/uscBuildSystem.tsx"],"names":["ShipSize","ShipSpecialty","getShipInfofromID","shipID","shipMap","find","x","shipId","QuerySpecialization","props","selectedSpecialties","setSpecialties","className","Typography","getSpecialties","map","special","ToggleButton","value","selected","includes","onChange","newSpecials","filter","v","handleSpecialties","specialties","speciality","EngToggleGroup","engLevel","handleEngLevelChange","ToggleButtonGroup","exclusive","Tooltip","title","arrow","src","engineerIcon","alt","BuildAddText","id","label","isMultiline","disabled","TextField","variant","multiline","rowsMax","findShipName","ships","ShipAutocomplete","shipType","handleShipChange","Ships","Autocomplete","options","sortItems","autoHighlight","getOptionLabel","option","name","renderOption","renderInput","params","inputProps","autocomplete","BuildCheckBox","checked","FormControlLabel","control","Checkbox","AddBuildMutation","ReplaceBuildMutation","UpdateBuildMutation","useShipBuildMutations","addBuild","useAddBuild","replaceBuild","useReplaceBuild","updateVariants","useUpdateVariantBuilds","updateRelated","useUpdateRelatedBuilds","useMutation","addBuildMutation","build","a","variables","addedBuild","updateBuildMutation","relatedBuilds","_id","input","related","updatedBuild","variantBuilds","variants","replaceBuildMutation","buildID","AllShipBuildsv2s","useShipBuilds","useAllShipBuilds","shipBuilds","loading","addRelated","useAddRelatedBuild","addVariant","useAddVariantBuild","useQuery","data","error","Error","message","shipBuildsv2s","currentID","buildtoInsert","currentBuild","tempBuild","console","log","insertOneShipBuildsv2","newRelated","parentID","parentBuild","isVariant","useUrlQuery","URLSearchParams","useLocation","search","useStyles","makeStyles","root","textAlign","display","gridTemplate","rowGap","width","margin","BuildAdd","classes","enqueueSnackbar","useSnackbar","useState","jsonBuild","setJsonBuild","DEFAULTBUILD","buildInfo","setBuildInfo","urlQuery","useEffect","specializations","handleTextChange","event","target","info","description","buildLink","author","split","s","trim","handleOtherChange","handleSubmit","addType","get","refID","ObjectId","textFields","json","JSON","parse","buildName","shipName","ship","url","references","guardian","powerplay","engineering","components","core","standard","hardpoints","internals","internal","ppName","powerPlant","pdName","powerDistributor","guardianHardPoints","group","toLowerCase","startsWith","guardianInternals","powerplayInternals","forEach","powerplayHardpoint","hp","weaponEng","blueprint","internalEng","i","ppEng","thrustEng","thrusters","fsdEng","frameShiftDrive","lifeEng","lifeSupport","pdEng","sensorEng","sensors","length","hasGuardian","hasPowerplay","processJSONBuild","shipInfo","getShipInfofromName","isBeginner","checkFields","Button","to","component","NavLink","color","field","_","FormGroup","row","check","onClick","EngIcons","icons","icon","TagGroup","Chip","BuildCard","shipBuild","useShipIdfromMap","Card","CardMedia","image","shipImg","CardContent","Divider","size","requires","CardActions","href","theme","paper","marginBottom","flexWrap","flexDirection","justifyContent","textCenter","BuildDetailBuilds","buildIDs","padding","img","breakpoints","down","flexDown","flexAcross","spacer","flexGrow","gridDown","gap","BuildDetail","useParams","setShipInfo","foundBuild","useMemo","Paper","shipReview","orientation","flexItem","plugins","gfm","renderers","paragraph","children","BuildList","queriedBuilds","setQueriedBuilds","buildQuery","filterBuilds","useCallback","filtered","query","newList","tempList","specialty","other","val","beginner","filterShipBuilds","sorted","QueryShip","setShipType","shipSize","setShipSize","newValue","QueryEngineering","setEngLevel","QueryOther","setOther","Query","queryUpdate","QueryandBuildList","setQuery","buildRef","useRef","isMobile","useMediaQuery","ref","Fab","current","scrollIntoView","behavior","USCBuildSystem","path","useRouteMatch","exact"],"mappings":"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","file":"static/js/4.8e45531b.chunk.js","sourcesContent":["export * from './buildInfo';\nexport * from './query';\nexport * from './shipInfo';\nexport * from './shipSize';\nexport * from './tag';\n","export enum ShipSize {\n  'S' = 1,\n  'M',\n  'L',\n}\n","export enum ShipSpecialty {\n  exp = 'Exploration',\n  jump = 'Jump Ship',\n  hge = 'HGE Farming',\n  cargo = 'Cargo',\n  mining = 'Miner',\n  pve = 'Combat - PvE',\n  pvp = 'Combat - PvP',\n  ax = 'Combat - Anti-Xeno',\n  racing = 'Racing',\n  multi = 'Multi-Purpose',\n}\n","import shipMap from '../assets/shipMap.json';\nimport { IShipInfo } from '../models/shipInfo';\n\nexport const getShipInfofromID = (shipID: string): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find((x) => x.shipId === shipID);\n  return ship;\n};\nexport const getShipInfofromName = (\n  shipName: string\n): IShipInfo | undefined => {\n  const ship: IShipInfo | undefined = shipMap.find(\n    (x) => x.name.toLowerCase() === shipName.toLowerCase()\n  );\n  return ship;\n};\n","import { Typography } from '@material-ui/core';\nimport { ToggleButton } from '@material-ui/lab';\nimport { ShipSpecialty } from '../../models/shipSpecialty';\n\nexport const QuerySpecialization = (props: {\n  selectedSpecialties: string[];\n  setSpecialties: React.Dispatch<React.SetStateAction<string[]>>;\n}) => {\n  const { selectedSpecialties, setSpecialties } = props;\n\n  const handleSpecialties = (special: string) => {\n    let newSpecials: string[] = [];\n    if (selectedSpecialties.includes(special)) {\n      newSpecials = selectedSpecialties.filter((v) => v !== special);\n    } else {\n      newSpecials = [...selectedSpecialties, special];\n    }\n    setSpecialties(newSpecials);\n  };\n\n  return (\n    <div className=\"specializationQuery\">\n      <h3 className=\"queryHeader\">Ship Specializations</h3>\n\n      <Typography>\n        Select specializations that the ship should fulfill.\n      </Typography>\n\n      <div className=\"specialButtons\">\n        {getSpecialties().map((special) => (\n          <ToggleButton\n            value={special}\n            key={special}\n            selected={selectedSpecialties.includes(special)}\n            onChange={() => handleSpecialties(special)}\n          >\n            {special}\n          </ToggleButton>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst getSpecialties = (): string[] => {\n  let specialties: string[] = [];\n\n  for (const speciality in ShipSpecialty) {\n    specialties = [\n      ...specialties,\n      ShipSpecialty[speciality as keyof typeof ShipSpecialty],\n    ];\n  }\n  return specialties;\n};\n","export default __webpack_public_path__ + \"static/media/Engineer_icon.42fbabbd.svg\";","import React from 'react';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { Tooltip } from '@material-ui/core';\nimport BlockIcon from '@material-ui/icons/Block';\nimport engineerIcon from '../assets/Engineer_icon.svg';\n\ninterface IEngToggleGroupProps {\n  handleEngLevelChange: (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => void;\n  engLevel: number | null;\n}\n\nexport const EngToggleGroup = (props: IEngToggleGroupProps) => {\n  const { engLevel, handleEngLevelChange } = props;\n\n  return (\n    <ToggleButtonGroup\n      value={engLevel}\n      exclusive\n      onChange={handleEngLevelChange}\n    >\n      <ToggleButton value={0}>\n        <Tooltip title=\"No Engineering\" arrow>\n          <div className=\"engButton\">\n            <BlockIcon />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={1}>\n        <Tooltip title=\"Simple Engineering\" arrow>\n          <div className=\"engButton\">\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={2}>\n        <Tooltip title=\"Moderate Engineering\" arrow>\n          <div className=\"engButton\">\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value={3}>\n        <Tooltip title=\"End-Game/Extreme Engineering\" arrow>\n          <div className=\"engButton\">\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n            <img src={engineerIcon} alt=\"engineeringIcon\" />\n          </div>\n        </Tooltip>\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n};\n","import { TextField } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildAddText {\n  id: string;\n  label: string;\n  isMultiline: boolean;\n  value: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n}\nexport const BuildAddText = (props: IBuildAddText) => {\n  const { id, label, value, onChange, isMultiline, disabled } = props;\n  return (\n    <TextField\n      variant=\"outlined\"\n      id={id}\n      label={label}\n      multiline={isMultiline}\n      rowsMax={10}\n      value={value}\n      onChange={onChange}\n      disabled={disabled}\n    />\n  );\n};\n","import { Autocomplete } from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport { sortItems } from '../functions/sort';\nimport { ChangeEvent } from 'react';\nimport { IShipInfo } from '../models';\nimport { useShipMap } from '../hooks/useShipMap';\n\nconst findShipName = (ships: IShipInfo[], shipID: string | null) => {\n  if (shipID === null) {\n    return null;\n  }\n  const shipName = ships.find((x) => x.shipId === shipID);\n  return shipName;\n};\n\ninterface IShipAutocompleteProps {\n  shipType: string | null;\n  handleShipChange: (event: ChangeEvent<{}>, value: IShipInfo | null) => void;\n}\n\nexport const ShipAutocomplete = (props: IShipAutocompleteProps) => {\n  const { shipType, handleShipChange } = props;\n  const ships = useShipMap();\n\n  return (\n    <Autocomplete\n      id=\"shipType\"\n      options={sortItems(ships, 'name')}\n      autoHighlight\n      getOptionLabel={(option) => option.name}\n      renderOption={(option) => (\n        <>\n          <span>{option.name}</span>\n        </>\n      )}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Ship Type\"\n          variant=\"outlined\"\n          inputProps={{\n            ...params.inputProps,\n            autocomplete: 'new-password',\n          }}\n        />\n      )}\n      value={findShipName(ships, shipType)}\n      onChange={handleShipChange}\n    />\n  );\n};\n","import Ships from '../assets/shipMap.json';\nimport { IShipInfo } from '../models';\n\nexport const useShipMap = () => {\n  const ships: IShipInfo[] = Ships;\n  return ships;\n};\n\nexport const useShipIdfromMap = (shipId: string | undefined) => {\n  if (shipId) {\n    const ships: IShipInfo[] = Ships;\n    const ship = ships.find((x) => x.shipId === shipId);\n    return ship;\n  }\n  return undefined;\n};\n","import { FormControlLabel, Checkbox } from '@material-ui/core';\nimport { ChangeEvent } from 'react';\n\ninterface IBuildCheckBoxProps {\n  label: string;\n  name: string;\n  checked: boolean;\n  onChange: (event: ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n  disabled?: boolean;\n}\nexport const BuildCheckBox = (props: IBuildCheckBoxProps) => {\n  const { label, name, checked, onChange, disabled } = props;\n  return (\n    <FormControlLabel\n      label={label}\n      control={\n        <Checkbox\n          name={name}\n          checked={checked}\n          onChange={onChange}\n          disabled={disabled}\n        />\n      }\n    />\n  );\n};\n","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { IBuildInfoInsert } from '../models/buildInfoInsert';\n\nconst AddBuildMutation = loader('../graphql/insertOneShipBuildsv2.gql');\nconst ReplaceBuildMutation = loader('../graphql/replaceOneShipBuildsv2.gql');\nconst UpdateBuildMutation = loader(\n  '../graphql/updateRelatedOneShipBuildsv2.gql'\n);\n\nexport const useShipBuildMutations = () => {\n  return {\n    addBuild: useAddBuild(),\n    replaceBuild: useReplaceBuild(),\n    updateVariants: useUpdateVariantBuilds(),\n    updateRelated: useUpdateRelatedBuilds(),\n  };\n};\n\nconst useAddBuild = () => {\n  const [addBuildMutation] = useMutation<{\n    insertOneShipBuildsv2: IBuildInfoInsert;\n  }>(AddBuildMutation);\n\n  const addShipBuild = async (build: IBuildInfoInsert) => {\n    const addedBuild = await addBuildMutation({\n      variables: {\n        build: {\n          ...build,\n        },\n      },\n    });\n    return addedBuild;\n  };\n\n  return addShipBuild;\n};\n\nconst useUpdateRelatedBuilds = () => {\n  const [updateBuildMutation] = useMutation(UpdateBuildMutation);\n\n  const updateRelatedBuilds = async (id: string, relatedBuilds: string[]) => {\n    const updatedBuild = await updateBuildMutation({\n      variables: {\n        build: {\n          _id: id,\n        },\n        input: {\n          related: relatedBuilds,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n  return updateRelatedBuilds;\n};\n\nconst useUpdateVariantBuilds = () => {\n  const [updateBuildMutation] = useMutation(UpdateBuildMutation);\n\n  const updateVariantBuilds = async (id: string, variantBuilds: string[]) => {\n    const updatedBuild = await updateBuildMutation({\n      variables: {\n        build: {\n          _id: id,\n        },\n        input: {\n          variants: variantBuilds,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n  return updateVariantBuilds;\n};\n\nconst useReplaceBuild = () => {\n  const [replaceBuildMutation] = useMutation<IBuildInfoInsert>(\n    ReplaceBuildMutation\n  );\n\n  const replaceShipBuild = async (build: IBuildInfoInsert) => {\n    const updatedBuild = await replaceBuildMutation({\n      variables: {\n        buildID: build._id,\n        build: {\n          ...build,\n        },\n      },\n    });\n    return updatedBuild;\n  };\n\n  return replaceShipBuild;\n};\n","import { useQuery } from '@apollo/client';\nimport { IBuildInfov2 } from '../models';\nimport { loader } from 'graphql.macro';\nimport { useShipBuildMutations } from './useShipBuildMutations';\nimport { IBuildInfoInsert } from '../models/buildInfoInsert';\n\nconst AllShipBuildsv2s = loader('../graphql/allShipBuildsv2s.gql');\n\nexport const useShipBuilds = () => {\n  const { shipBuilds, loading } = useAllShipBuilds();\n  const { addBuild, replaceBuild } = useShipBuildMutations();\n  return {\n    loading,\n    shipBuilds,\n    addBuild,\n    addRelated: useAddRelatedBuild(),\n    addVariant: useAddVariantBuild(),\n    replaceBuild,\n  };\n};\n\nconst useAllShipBuilds = () => {\n  const { data, loading, error } = useQuery<{\n    shipBuildsv2s: IBuildInfov2[];\n  }>(AllShipBuildsv2s);\n  if (error) {\n    throw new Error(`Failed to fetch ship builds: ${error.message}`);\n  }\n  const shipBuilds = data?.shipBuildsv2s ?? [];\n\n  return { shipBuilds, loading };\n};\n\nconst useAddRelatedBuild = () => {\n  const { addBuild, updateRelated } = useShipBuildMutations();\n  const addRelatedBuild = async (\n    currentID: string,\n    shipBuilds: IBuildInfov2[],\n    buildtoInsert: IBuildInfoInsert\n  ) => {\n    const currentBuild = shipBuilds.find(\n      (x) => ((x._id as unknown) as string) === currentID\n    );\n    if (currentBuild) {\n      const relatedBuilds = currentBuild.related;\n\n      const tempBuild = buildtoInsert;\n      tempBuild.related = currentBuild.related;\n      tempBuild.related = [...tempBuild.related, currentID];\n      const addedBuild:\n        | { insertOneShipBuildsv2: IBuildInfov2 }\n        | undefined\n        | null = (await addBuild(tempBuild)).data;\n      console.log(addedBuild);\n      if (addedBuild) {\n        const buildID = (addedBuild.insertOneShipBuildsv2\n          ._id as unknown) as string;\n        if (buildID) {\n          await updateRelated(currentID, [...relatedBuilds, buildID]);\n          for (const id of relatedBuilds) {\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            if (build) {\n              const newRelated = [...build.related, buildID];\n              await updateRelated((build._id as unknown) as string, newRelated);\n            }\n          }\n        }\n      } else {\n        throw new Error('Reference build and related builds not updated');\n      }\n    } else {\n      throw new Error('Reference build cannot be found');\n    }\n  };\n  return addRelatedBuild;\n};\n\nconst useAddVariantBuild = () => {\n  const { addBuild, updateVariants, updateRelated } = useShipBuildMutations();\n  const addVariantBuild = async (\n    parentID: string,\n    shipBuilds: IBuildInfov2[],\n    buildtoInsert: IBuildInfoInsert\n  ) => {\n    const parentBuild = shipBuilds.find(\n      (x) => ((x._id as unknown) as string) === parentID\n    );\n    if (parentBuild) {\n      const variantBuilds = parentBuild.variants;\n\n      const tempBuild = buildtoInsert;\n      tempBuild.isVariant = true;\n      tempBuild.related = variantBuilds;\n      const addedBuild:\n        | { insertOneShipBuildsv2: IBuildInfov2 }\n        | undefined\n        | null = (await addBuild(tempBuild)).data;\n      if (addedBuild) {\n        const buildID = (addedBuild.insertOneShipBuildsv2\n          ._id as unknown) as string;\n        if (buildID) {\n          console.log(buildID);\n          await updateVariants(parentID, [...variantBuilds, buildID]);\n\n          for (const id of variantBuilds) {\n            console.log(id);\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            if (build) {\n              const newRelated = [...build.related, buildID];\n              await updateRelated((build._id as unknown) as string, newRelated);\n            }\n          }\n        }\n      } else {\n        throw new Error('Parent and related builds were not updated');\n      }\n    } else {\n      throw new Error('Parent cannot be found');\n    }\n  };\n  return addVariantBuild;\n};\n","import { useLocation } from 'react-router-dom';\n\nexport const useUrlQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n","import { Button, FormGroup, makeStyles } from '@material-ui/core';\nimport { ChangeEvent, MouseEvent, useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { processJSONBuild } from '../../functions/processJSONBuild';\nimport { getShipInfofromName } from '../../functions/getShipInfo';\nimport { IBuildInfoInsert } from '../../models/buildInfoInsert';\nimport { ObjectId } from 'bson';\nimport { QuerySpecialization } from '../query/querySpecialities';\nimport { useSnackbar } from 'notistack';\nimport { EngToggleGroup } from '../engToggleGroup';\nimport { BuildAddText } from './buildAddText';\nimport { IShipInfo } from '../../models';\nimport { ShipAutocomplete } from '../shipAutocomplete';\nimport { BuildCheckBox } from './buildCheckBox';\nimport { useShipBuilds } from '../../hooks/useShipBuilds';\nimport { useUrlQuery } from '../../hooks/useURLQuery';\nimport { Loading } from '../../../../components';\n\nconst useStyles = makeStyles({\n  root: {\n    textAlign: 'center',\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n    rowGap: '10px',\n    width: '90%',\n    margin: 'auto',\n  },\n});\n\nexport const BuildAdd = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [jsonBuild, setJsonBuild] = useState('');\n  const [buildInfo, setBuildInfo] = useState<IBuildInfoInsert>(DEFAULTBUILD);\n  const [specialties, setSpecialties] = useState<string[]>([]);\n  const {\n    loading,\n    shipBuilds,\n    addBuild,\n    addRelated,\n    addVariant,\n  } = useShipBuilds();\n  const urlQuery = useUrlQuery();\n\n  useEffect(() => {\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, specializations: specialties };\n    });\n  }, [specialties]);\n\n  const handleJSONChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setJsonBuild(event.target.value);\n    const {\n      buildName,\n      shipName,\n      hasGuardian,\n      hasPowerplay,\n      engineering,\n      url,\n    } = processJSONBuild(event.target.value);\n    const engLevel = engineering ? 1 : 0;\n    const shipInfo = getShipInfofromName(shipName)!;\n    const _id = buildInfo._id;\n    const info: IBuildInfoInsert = {\n      _id,\n      title: buildName,\n      hasGuardian,\n      hasPowerplay,\n      buildLink: url,\n      shipId: shipInfo.shipId,\n      author: '',\n      specializations: [],\n      engLevel,\n      isBeginner: false,\n      description: '',\n      isVariant: false,\n      variants: [],\n      related: [],\n      jsonBuild: event.target.value,\n    };\n    setBuildInfo(info);\n  };\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n\n    switch (event.target.id) {\n      case 'title':\n        setBuildInfo((info) => {\n          return { ...info, title: value };\n        });\n        break;\n      case 'description':\n        setBuildInfo((info) => {\n          return { ...info, description: value };\n        });\n        break;\n      case 'buildLink':\n        setBuildInfo((info) => {\n          return { ...info, buildLink: value };\n        });\n        break;\n      case 'author':\n        setBuildInfo((info) => {\n          return { ...info, author: value };\n        });\n        break;\n      case 'variants':\n        const variants = value.split(',').map((s) => s.trim());\n        setBuildInfo((info) => {\n          return { ...info, variants: variants };\n        });\n        break;\n      case 'related':\n        const related = value.split(',').map((s) => s.trim());\n        setBuildInfo((info) => {\n          return { ...info, related: related };\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value!.shipId;\n    setBuildInfo((buildInfo) => {\n      return { ...buildInfo, shipId: ship };\n    });\n  };\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    engLevel: number\n  ) => {\n    setBuildInfo({ ...buildInfo, engLevel });\n  };\n  const handleOtherChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setBuildInfo({ ...buildInfo, [event.target.name]: event.target.checked });\n  };\n  const handleSubmit = async () => {\n    const addType = urlQuery.get('type');\n    console.log(addType);\n    const refID = urlQuery.get('refID');\n    try {\n      switch (addType) {\n        case 'variant':\n          if (refID) {\n            await addVariant(refID, shipBuilds, buildInfo);\n          } else {\n            throw new Error('Build reference ID missing from URL');\n          }\n          break;\n        case 'related':\n          if (refID) {\n            await addRelated(refID, shipBuilds, buildInfo);\n          } else {\n            throw new Error('Build reference ID missing from URL');\n          }\n          break;\n        default:\n          await addBuild(buildInfo);\n          break;\n      }\n      enqueueSnackbar('Build Successfully Submitted', {\n        variant: 'success',\n      });\n      setBuildInfo({ ...DEFAULTBUILD, _id: new ObjectId() });\n      setSpecialties([]);\n      setJsonBuild('');\n    } catch (e) {\n      enqueueSnackbar(`Submit Failed: ${e.message}`, { variant: 'error' });\n      console.error(e);\n    }\n  };\n\n  const textFields = [\n    {\n      id: 'json',\n      label: 'Exported JSON',\n      isMultiline: true,\n      value: jsonBuild,\n      onChange: handleJSONChange,\n    },\n    {\n      id: 'title',\n      label: 'Title',\n      isMultiline: false,\n      value: buildInfo.title,\n      onChange: handleTextChange,\n      disabled: true,\n    },\n    {\n      id: 'description',\n      label: 'More Information - Accepts markdown',\n      isMultiline: true,\n      value: buildInfo.description,\n      onChange: handleTextChange,\n    },\n    {\n      id: 'buildLink',\n      label: 'Build Link - Full',\n      isMultiline: false,\n      value: buildInfo.buildLink,\n      onChange: handleTextChange,\n      disabled: true,\n    },\n    // {\n    //   id: 'variant',\n    //   label: 'Variant Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.variants.join(','),\n    //   onChange: handleTextChange,\n    // },\n    // {\n    //   id: 'related',\n    //   label: 'Related Build IDs - If applicable - separated by commas',\n    //   isMultiline: false,\n    //   value: buildInfo.related.join(','),\n    //   onChange: handleTextChange,\n    // },\n    {\n      id: 'author',\n      label: 'Author',\n      isMultiline: false,\n      value: buildInfo.author,\n      onChange: handleTextChange,\n    },\n  ];\n\n  const checkFields = [\n    {\n      label: 'Guardian',\n      name: 'hasGuardian',\n      checked: buildInfo.hasGuardian,\n      disabled: true,\n    },\n    {\n      label: 'PowerPlay',\n      name: 'hasPowerplay',\n      checked: buildInfo.hasPowerplay,\n      disabled: true,\n    },\n    { label: 'Beginner', name: 'isBeginner', checked: buildInfo.isBeginner },\n  ];\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <Button\n        to=\"/information/builds\"\n        component={NavLink}\n        color=\"secondary\"\n        variant=\"outlined\"\n      >\n        Return to builds\n      </Button>\n      {textFields.map((field) => (\n        <BuildAddText key={field.id} {...field} />\n      ))}\n      <ShipAutocomplete\n        shipType={buildInfo.shipId}\n        handleShipChange={handleShipChange}\n      />\n      <QuerySpecialization\n        selectedSpecialties={buildInfo.specializations}\n        setSpecialties={setSpecialties}\n      />\n      <EngToggleGroup\n        engLevel={buildInfo.engLevel}\n        handleEngLevelChange={handleEngLevelChange}\n      />\n      <FormGroup row>\n        {checkFields.map((check) => (\n          <BuildCheckBox\n            key={check.name}\n            {...check}\n            onChange={handleOtherChange}\n          />\n        ))}\n      </FormGroup>\n      <Button onClick={handleSubmit} variant=\"outlined\">\n        Submit Build\n      </Button>\n    </div>\n  );\n};\n\nconst DEFAULTBUILD: IBuildInfoInsert = {\n  _id: new ObjectId(),\n  shipId: 'adder',\n  title: '',\n  specializations: [],\n  buildLink: '',\n  engLevel: 0,\n  hasGuardian: false,\n  hasPowerplay: false,\n  isBeginner: false,\n  author: '',\n  isVariant: false,\n  variants: [],\n  related: [],\n  description: '',\n  jsonBuild: '',\n};\n","import { ICoriolisLoadout } from '../models/coriolis';\n\nexport const processJSONBuild = (\n  json: string\n): {\n  buildName: string;\n  shipName: string;\n  hasGuardian: boolean;\n  hasPowerplay: boolean;\n  engineering: boolean;\n  url: string;\n} => {\n  const build: ICoriolisLoadout = JSON.parse(json);\n\n  const buildName = build.name;\n  const shipName = build.ship;\n  const url = build.references[0].url ?? '';\n  let guardian = false;\n  let powerplay = false;\n  let engineering = false;\n\n  const components = build.components;\n  const core = components.standard;\n  const hardpoints = components.hardpoints;\n  const internals = components.internal;\n\n  // Check for Guardian\n  const ppName = (core.powerPlant.name as string) ?? '';\n  const pdName = (core.powerDistributor.name as string) ?? '';\n  const guardianHardPoints = hardpoints.find((x) =>\n    x?.group.toLowerCase().startsWith('guardian')\n  );\n  const guardianInternals = internals.find((x) =>\n    x?.group.toLowerCase().startsWith('guardian')\n  );\n  if (\n    guardian === false &&\n    (ppName.toLowerCase().startsWith('guardian') ||\n      pdName.toLowerCase().startsWith('guardian') ||\n      guardianHardPoints ||\n      guardianInternals)\n  ) {\n    guardian = true;\n  }\n\n  // Check for PowerPlay\n  const powerplayWeaponNames = [\n    'disruptor',\n    'imperial hammer',\n    'pack-hound',\n    'mining lance',\n    'enforcer',\n    'cytoscrambler',\n    'retributor',\n    'advanced plasma accelerator',\n    'pacifier',\n    'rocket propelled fsd disruptor',\n  ];\n  const powerplayInternals = internals.find((x) =>\n    x?.group.toLowerCase().startsWith('prismatic')\n  );\n  if (powerplay === false && powerplayInternals) {\n    powerplay = true;\n  }\n  powerplayWeaponNames.forEach((x) => {\n    if (powerplay === false) {\n      const powerplayHardpoint = hardpoints.find(\n        (hp) => hp?.name?.toLowerCase() === x.toLowerCase()\n      );\n      powerplay = powerplayHardpoint ? true : false;\n    }\n  });\n\n  // Check for engineering\n  const weaponEng = hardpoints.filter((hp) => hp?.blueprint);\n  const internalEng = internals.filter((i) => i?.blueprint);\n  const ppEng = core.powerPlant.blueprint;\n  const thrustEng = core.thrusters.blueprint;\n  const fsdEng = core.frameShiftDrive.blueprint;\n  const lifeEng = core.lifeSupport.blueprint;\n  const pdEng = core.powerDistributor.blueprint;\n  const sensorEng = core.sensors.blueprint;\n  if (\n    engineering === false &&\n    (weaponEng.length > 0 ||\n      internalEng.length > 0 ||\n      ppEng ||\n      thrustEng ||\n      fsdEng ||\n      lifeEng ||\n      pdEng ||\n      sensorEng)\n  ) {\n    engineering = true;\n  }\n\n  return {\n    buildName,\n    shipName,\n    hasGuardian: guardian,\n    hasPowerplay: powerplay,\n    engineering,\n    url,\n  };\n};\n","import engineerIcon from '../../assets/Engineer_icon.svg';\n\nexport const EngIcons = (props: { engLevel: number }) => {\n  let icons: JSX.Element[] = [];\n  if (props.engLevel > 3 || props.engLevel < 1) {\n    return (\n      <div className=\"engineering\">\n        <p>Engineering Level: None</p>\n      </div>\n    );\n  } else {\n    for (let i = 1; i <= props.engLevel; i++) {\n      icons = [\n        ...icons,\n        <img src={engineerIcon} key={i} alt=\"Engineering Icon\" />,\n      ];\n    }\n    return (\n      <div className=\"engineering\">\n        <p>\n          <span>Engineering Level:</span> {icons.map((icon) => icon)}\n        </p>\n      </div>\n    );\n  }\n};\n","import { Chip } from '@material-ui/core';\nimport { IBuildInfov2 } from '../../models';\n\nexport const TagGroup = (props: { build: IBuildInfov2 }) => {\n  const { build } = props;\n  return (\n    <div className=\"chips\">\n      {build.specializations.map((v) => (\n        <Chip label={v} key={v} />\n      ))}\n      {build.hasGuardian && <Chip label=\"Guardian\" key=\"guardian\" />}\n      {build.hasPowerplay && <Chip label=\"PowerPlay\" key=\"powerplay\" />}\n      {build.isBeginner && <Chip label=\"Beginner\" key=\"beginner\" />}\n    </div>\n  );\n};\n","import './buildCard.css';\nimport {\n  CardMedia,\n  Divider,\n  Typography,\n  Button,\n  CardActions,\n  CardContent,\n  Card,\n} from '@material-ui/core';\nimport { IBuildInfov2, ShipSize } from '../../models';\nimport { EngIcons } from './engIcons';\nimport { NavLink } from 'react-router-dom';\nimport { useShipIdfromMap } from '../../hooks/useShipMap';\nimport { TagGroup } from './tagGroup';\n\nexport const BuildCard = (props: { shipBuild: IBuildInfov2 | undefined }) => {\n  const { shipBuild } = props;\n  const shipInfo = useShipIdfromMap(shipBuild?.shipId);\n\n  return shipBuild && shipInfo ? (\n    <Card variant=\"outlined\" className=\"card\">\n      {shipInfo && (\n        <CardMedia\n          className=\"shipImg\"\n          image={shipInfo?.shipImg}\n          title={shipInfo?.name}\n        />\n      )}\n      <CardContent className=\"cardContent\">\n        <Typography>{shipBuild.title}</Typography>\n        <Divider />\n        <div className=\"shipName\">\n          <Typography>{shipInfo?.name} </Typography>\n          <div className=\"spacer\" />\n          {shipInfo && <Typography>{ShipSize[shipInfo.size]}</Typography>}\n        </div>\n        {shipInfo?.requires && (\n          <Typography>Requirement: {shipInfo.requires}</Typography>\n        )}\n        <TagGroup build={shipBuild} />\n        <Divider />\n        <EngIcons engLevel={shipBuild.engLevel} />\n        <Divider />\n        <Typography>Author: {shipBuild.author}</Typography>\n        {shipBuild.variants.length > 0 ? (\n          <Typography>Has Variants</Typography>\n        ) : null}\n        {shipBuild.related.length > 0 ? (\n          <Typography>Has Related Builds</Typography>\n        ) : null}\n        <div className=\"spacer\" />\n        <CardActions className=\"cardActions\">\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            href={shipBuild.buildLink}\n            target=\"_blank\"\n          >\n            View Build\n          </Button>{' '}\n          <Button\n            to={`/information/builds/detail/${\n              (shipBuild._id as unknown) as string\n            }`}\n            component={NavLink}\n            color=\"primary\"\n            variant=\"contained\"\n            target=\"_blank\"\n          >\n            View Details\n          </Button>\n        </CardActions>\n      </CardContent>\n    </Card>\n  ) : null;\n};\n","import { makeStyles, Typography } from '@material-ui/core';\nimport { Loading } from '../../../../components';\nimport { useShipBuilds } from '../../hooks/useShipBuilds';\nimport { BuildCard } from './buildCard';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '90%',\n    margin: 'auto',\n    marginBottom: 5,\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetailBuilds = (props: {\n  title: string;\n  buildIDs: string[];\n}) => {\n  const { title, buildIDs } = props;\n  const classes = useStyles();\n  const { loading, shipBuilds } = useShipBuilds();\n\n  return (\n    <div id=\"variants\" className={classes.textCenter}>\n      <Typography variant=\"h4\">{title}</Typography>\n      {loading ? (\n        <Loading />\n      ) : (\n        <div className={classes.paper}>\n          {buildIDs.map((id) => {\n            const build = shipBuilds.find(\n              (x) => ((x._id as unknown) as string) === id\n            );\n            return <BuildCard shipBuild={build} key={id} />;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n","import {\n  Button,\n  Divider,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { useEffect, useMemo, useState } from 'react';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { Loading, NotFound } from '../../../../components';\nimport { getShipInfofromID } from '../../functions/getShipInfo';\nimport { useShipBuilds } from '../../hooks/useShipBuilds';\nimport { IShipInfo, ShipSize } from '../../models';\nimport { BuildDetailBuilds } from './buildDetailBuilds';\nimport { TagGroup } from './tagGroup';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\n\ninterface RouteParams {\n  id: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '80%',\n    margin: 'auto',\n    padding: 10,\n    marginBottom: 5,\n  },\n  img: {\n    width: 300,\n    [theme.breakpoints.down('md')]: {\n      display: 'none',\n    },\n  },\n  flexDown: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  flexAcross: {\n    display: 'flex',\n    flexDirection: 'row',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column',\n      flexWrap: 'wrap',\n    },\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  gridDown: {\n    display: 'grid',\n    gridTemplate: 'auto / 1fr',\n    gap: '5px',\n  },\n  margin: {\n    margin: 10,\n  },\n  textCenter: {\n    textAlign: 'center',\n  },\n}));\n\nexport const BuildDetail = () => {\n  const { loading, shipBuilds } = useShipBuilds();\n  let { id } = useParams<RouteParams>();\n  const classes = useStyles();\n  const [shipInfo, setShipInfo] = useState<IShipInfo>();\n\n  let foundBuild = useMemo(() => {\n    if (loading) {\n      return undefined;\n    }\n\n    let build = shipBuilds.find(\n      (x) => x._id && ((x._id as unknown) as string) === id\n    );\n    if (build) {\n      return build;\n    } else {\n      return null;\n    }\n  }, [id, loading, shipBuilds]);\n\n  useEffect(() => {\n    if (foundBuild) {\n      const info = getShipInfofromID(foundBuild.shipId);\n      setShipInfo(info);\n    }\n  }, [foundBuild]);\n\n  return (\n    <>\n      <Typography variant=\"h3\">Build Detail</Typography>\n      {loading ? (\n        <Loading />\n      ) : foundBuild === null ? (\n        <NotFound />\n      ) : (\n        <>\n          <Paper className={`${classes.paper} ${classes.flexAcross}`}>\n            {shipInfo && (\n              <div className={`${classes.flexDown} ${classes.margin}`}>\n                <img\n                  src={shipInfo.shipImg}\n                  alt={shipInfo.name}\n                  className={classes.img}\n                />\n                <div className={classes.flexAcross}>\n                  <Typography>{shipInfo.name}</Typography>\n                  <span className={classes.spacer} />\n                  <Typography>{ShipSize[shipInfo.size]}</Typography>\n                </div>\n                {shipInfo.requires && (\n                  <Typography>Requires: {shipInfo.requires}</Typography>\n                )}\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  href={shipInfo.shipReview}\n                  target=\"_blank\"\n                >\n                  Pilot Review\n                </Button>\n              </div>\n            )}\n            <Divider orientation=\"vertical\" flexItem />\n            <div\n              className={`${classes.flexDown} ${classes.spacer} ${classes.margin}`}\n            >\n              <Typography variant=\"h5\">{foundBuild?.title}</Typography>\n              <Typography>Author: {foundBuild?.author}</Typography>\n              <TagGroup build={foundBuild!} />\n              {foundBuild?.description && (\n                <ReactMarkdown\n                  plugins={[gfm]}\n                  renderers={{ paragraph: Typography }}\n                  children={foundBuild.description}\n                />\n              )}\n            </div>\n            <div\n              className={`${classes.flexDown} ${classes.spacer} ${classes.textCenter}`}\n            >\n              <div className={classes.gridDown}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  href={foundBuild!.buildLink}\n                  target=\"_blank\"\n                >\n                  Open Coriolis\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  to={`/information/builds/add?type=variant&refID=${\n                    (foundBuild!._id as unknown) as string\n                  }`}\n                  component={NavLink}\n                >\n                  Add Variant\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  to={`/information/builds/add?type=related&refID=${\n                    (foundBuild!._id as unknown) as string\n                  }`}\n                  component={NavLink}\n                >\n                  Add Related\n                </Button>\n              </div>\n            </div>\n          </Paper>\n          {foundBuild && foundBuild.variants.length > 0 ? (\n            <BuildDetailBuilds\n              title=\"Build Variants\"\n              buildIDs={foundBuild.variants}\n            />\n          ) : null}\n          {foundBuild && foundBuild.related.length > 0 ? (\n            <BuildDetailBuilds\n              title=\"Related Builds\"\n              buildIDs={foundBuild.related}\n            />\n          ) : null}\n        </>\n      )}\n    </>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { Loading } from '../../../../components';\nimport { filterShipBuilds } from '../../functions/filterShipBuilds';\nimport { sortItems } from '../../functions/sort';\nimport { useShipBuilds } from '../../hooks/useShipBuilds';\nimport { IBuildInfov2, IQuery } from '../../models';\nimport { BuildCard } from './buildCard';\nimport './buildList.css';\n\nexport const BuildList = (props: { buildQuery: IQuery | undefined }) => {\n  const [queriedBuilds, setQueriedBuilds] = useState<IBuildInfov2[]>();\n  const { buildQuery } = props;\n  const { loading, shipBuilds } = useShipBuilds();\n\n  let filterBuilds = useCallback(() => {\n    if (loading) {\n      return;\n    }\n    console.log(shipBuilds);\n    const filtered = filterShipBuilds(shipBuilds, buildQuery);\n    const sorted = sortItems(filtered!, 'shipId');\n    setQueriedBuilds(sorted);\n  }, [loading, shipBuilds, buildQuery]);\n\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    filterBuilds();\n  }, [loading, filterBuilds]);\n\n  return (\n    <div className=\"builds\">\n      {loading ? (\n        <Loading />\n      ) : (\n        queriedBuilds?.map((ship) => {\n          return (\n            <BuildCard key={(ship._id as unknown) as string} shipBuild={ship} />\n          );\n        })\n      )}\n    </div>\n  );\n};\n","import { IBuildInfov2, IQuery } from '../models';\nimport { getShipInfofromID } from './getShipInfo';\n\nexport const filterShipBuilds = (\n  shipBuilds: IBuildInfov2[] | undefined,\n  query: IQuery | undefined\n) => {\n  if (shipBuilds && query) {\n    let newList = shipBuilds.filter((x) => x.isVariant === false);\n    // ship type\n    if (query.ship !== null) {\n      newList = newList.filter((build) => build.shipId === query.ship);\n    }\n    // ship size\n    if (query.size !== null) {\n      newList = newList.filter((build) => {\n        const shipInfo = getShipInfofromID(build.shipId);\n        if (shipInfo?.size === query.size) {\n          return build;\n        } else {\n          return undefined;\n        }\n      });\n    }\n    // Engineering\n    if (query.engLevel !== null) {\n      newList = newList.filter((build) => build.engLevel === query.engLevel);\n    }\n    // Specializations\n    if (query.specialties.length > 0) {\n      console.log(query.specialties);\n      let tempList: IBuildInfov2[] = [];\n      for (const specialty of query.specialties) {\n        if (tempList.length > 0) {\n          tempList = tempList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        } else {\n          tempList = newList.filter((build) =>\n            build.specializations.includes(specialty)\n          );\n        }\n      }\n      newList = tempList;\n    }\n    // Guardian\n    if (query.other.guardian !== null) {\n      const val = query.other.guardian === 1 ? true : false;\n      newList = newList.filter((build) => build.hasGuardian === val);\n    }\n    // PowerPlay\n    if (query.other.powerplay !== null) {\n      const val = query.other.powerplay === 1 ? true : false;\n      newList = newList.filter((build) => build.hasPowerplay === val);\n    }\n    // Beginner\n    if (query.other.beginner !== null) {\n      const val = query.other.beginner === 1 ? true : false;\n      newList = newList.filter((build) => build.isBeginner === val);\n    }\n    return newList;\n  }\n};\n","import { Tooltip } from '@material-ui/core';\n\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { ChangeEvent } from 'react';\nimport { IShipInfo } from '../../models';\nimport { ShipAutocomplete } from '../shipAutocomplete';\n\nexport const QueryShip = (props: {\n  shipSize: number | null;\n  setShipSize: React.Dispatch<React.SetStateAction<number | null>>;\n  shipType: string | null;\n  setShipType: React.Dispatch<React.SetStateAction<string | null>>;\n}) => {\n  const { shipType, setShipType, shipSize, setShipSize } = props;\n\n  const handleShipSizeChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setShipType(null);\n    setShipSize(newValue);\n  };\n\n  const handleShipChange = (_: ChangeEvent<{}>, value: IShipInfo | null) => {\n    const ship = value?.shipId;\n    setShipType(ship ?? null);\n    setShipSize(null);\n  };\n\n  return (\n    <div className=\"shipQuery\">\n      <h3 className=\"queryHeader\">Ship Type and Size</h3>\n      <div className=\"shipQuerySection\">\n        <div className=\"shipTypeQuery\">\n          <ShipAutocomplete\n            shipType={shipType}\n            handleShipChange={handleShipChange}\n          />\n        </div>\n        <div className=\"shipSizeQuery\">\n          <Tooltip\n            title=\"What's the size of the ship you're looking for?\"\n            arrow\n          >\n            <ToggleButtonGroup\n              value={shipSize}\n              exclusive\n              onChange={handleShipSizeChange}\n            >\n              <ToggleButton value={1}>Small</ToggleButton>\n              <ToggleButton value={2}>Medium</ToggleButton>\n              <ToggleButton value={3}>Large</ToggleButton>\n            </ToggleButtonGroup>\n          </Tooltip>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Typography } from '@material-ui/core';\nimport { SetStateAction, MouseEvent } from 'react';\nimport { EngToggleGroup } from '../engToggleGroup';\n\nexport const QueryEngineering = (props: {\n  engLevel: number | null;\n  setEngLevel: React.Dispatch<SetStateAction<number | null>>;\n}) => {\n  const { engLevel, setEngLevel } = props;\n\n  const handleEngLevelChange = (\n    _: MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setEngLevel(newValue);\n  };\n\n  return (\n    <div className=\"engineeringQuery\">\n      <h3 className=\"queryHeader\">Ship Engineering Level</h3>\n      <Typography>\n        Select Engineering level ranging from None to Max Engineering.\n      </Typography>\n      <EngToggleGroup\n        engLevel={engLevel}\n        handleEngLevelChange={handleEngLevelChange}\n      />\n    </div>\n  );\n};\n","import { Tooltip } from '@material-ui/core';\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\n\nimport { OtherFilters } from '../../models/otherFilters';\nimport BlockIcon from '@material-ui/icons/Block';\nimport CheckIcon from '@material-ui/icons/Check';\n\nexport const QueryOther = (props: {\n  other: OtherFilters;\n  setOther: React.Dispatch<React.SetStateAction<OtherFilters>>;\n}) => {\n  const { other, setOther } = props;\n\n  const handleGuardianChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther({ ...other, guardian: newValue });\n  };\n  const handlePowerPlayChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther({ ...other, powerplay: newValue });\n  };\n  const handleBeginnerChange = (\n    _: React.MouseEvent<HTMLElement>,\n    newValue: number\n  ) => {\n    setOther({ ...other, beginner: newValue });\n  };\n\n  return (\n    <div className=\"otherQuery\">\n      <h3 className=\"queryHeader\">Other Filters</h3>\n      <div className=\"otherButtons\">\n        <Tooltip title=\"Should the build have Guardian components?\" arrow>\n          <div className=\"guardian\">\n            <label>Guardian</label>\n            <ToggleButtonGroup\n              value={other.guardian}\n              exclusive\n              onChange={handleGuardianChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Does the build have Power Play modules?\" arrow>\n          <div className=\"powerplay\">\n            <label>Power Play</label>\n            <ToggleButtonGroup\n              value={other.powerplay}\n              exclusive\n              onChange={handlePowerPlayChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n        <Tooltip title=\"Is this build easy to achieve early-game?\">\n          <div className=\"beginner\">\n            <label>Beginner</label>\n            <ToggleButtonGroup\n              value={other.beginner}\n              exclusive\n              onChange={handleBeginnerChange}\n            >\n              <ToggleButton value={1}>\n                <CheckIcon />\n              </ToggleButton>\n              <ToggleButton value={0}>\n                <BlockIcon />\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { IQuery } from '../../models';\n\nimport './query.css';\n\nimport { Button, Paper } from '@material-ui/core';\nimport { QuerySpecialization } from './querySpecialities';\nimport { QueryShip } from './queryShip';\nimport { QueryEngineering } from './queryEngineering';\nimport { QueryOther } from './queryOther';\nimport { OtherFilters } from '../../models/otherFilters';\nimport { NavLink } from 'react-router-dom';\nimport { useUrlQuery } from '../../hooks/useURLQuery';\n\nexport const Query = (props: { queryUpdate: (query: IQuery) => void }) => {\n  const [shipType, setShipType] = useState<string | null>(null);\n  const [shipSize, setShipSize] = useState<number | null>(null);\n  const [engLevel, setEngLevel] = useState<number | null>(null);\n  const [selectedSpecialties, setSpecialties] = useState<string[]>([]);\n  const [other, setOther] = useState<OtherFilters>({\n    guardian: null,\n    powerplay: null,\n    beginner: null,\n  });\n  let query = useUrlQuery();\n\n  useEffect(() => {\n    const queryParam = query.get('beginner');\n    if (queryParam === 'true') {\n      setOther({ ...other, beginner: 1 });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const { queryUpdate } = props;\n    const query: IQuery = {\n      ship: shipType,\n      size: shipSize,\n      engLevel,\n      specialties: selectedSpecialties,\n      other,\n    };\n    queryUpdate(query);\n    // Disable eslint. Props is not missing from dependencies.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shipType, shipSize, engLevel, selectedSpecialties, other]);\n\n  const resetQueries = () => {\n    setShipType(null);\n    setShipSize(null);\n    setEngLevel(null);\n    setSpecialties([]);\n    setOther({\n      guardian: null,\n      powerplay: null,\n      beginner: null,\n    });\n  };\n\n  return (\n    <Paper className=\"query\">\n      <QuerySpecialization\n        selectedSpecialties={selectedSpecialties}\n        setSpecialties={setSpecialties}\n      />\n      <QueryShip\n        shipType={shipType}\n        setShipType={setShipType}\n        shipSize={shipSize}\n        setShipSize={setShipSize}\n      />\n      <QueryEngineering engLevel={engLevel} setEngLevel={setEngLevel} />\n      <QueryOther other={other} setOther={setOther} />\n      <div className=\"reset\">\n        <Button\n          onClick={resetQueries}\n          color=\"primary\"\n          variant=\"outlined\"\n          className=\"resetButton\"\n        >\n          Reset Selections\n        </Button>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          component={NavLink}\n          to=\"/information/builds/add\"\n        >\n          Add Build\n        </Button>\n      </div>\n    </Paper>\n  );\n};\n","import { Fab, Typography, useMediaQuery } from '@material-ui/core';\nimport { useRef, useState } from 'react';\nimport { BuildList } from './builds/buildList';\nimport { IQuery } from '../models';\nimport { Query } from './query/query';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport './queryandBuildList.css';\n\nexport const QueryandBuildList = (props: {}) => {\n  const [query, setQuery] = useState<IQuery>();\n  const buildRef = useRef<HTMLDivElement>(null);\n  const isMobile = useMediaQuery('(max-width:1000px)');\n\n  const handleQuery = (query: IQuery) => {\n    setQuery(query);\n  };\n  const handleFab = () => {\n    if (buildRef.current) {\n      buildRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n  return (\n    <section className=\"selection\">\n      <Typography variant=\"h3\">Ship Build Archive</Typography>\n      <Query queryUpdate={handleQuery} />\n      <div ref={buildRef}>\n        <BuildList buildQuery={query} />\n      </div>\n      {isMobile && (\n        <div className=\"fab\">\n          <Fab color=\"primary\" className=\"fab\" onClick={handleFab}>\n            <ArrowDownwardIcon />\n          </Fab>\n        </div>\n      )}\n    </section>\n  );\n};\n","import { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { Loading } from '../../components';\nimport { BuildAdd } from './components/builds/buildAdd';\nimport { BuildDetail } from './components/builds/buildDetail';\nimport { QueryandBuildList } from './components/queryandBuildList';\nimport { useShipBuilds } from './hooks/useShipBuilds';\n\nexport const USCBuildSystem = () => {\n  const { path } = useRouteMatch();\n  const { loading } = useShipBuilds();\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <Switch>\n      <Route path={`${path}/detail/:id`}>\n        <BuildDetail />\n      </Route>\n      <Route path={path} exact>\n        <QueryandBuildList />\n      </Route>\n      <Route path={`${path}/add`}>\n        <BuildAdd />\n      </Route>\n    </Switch>\n  );\n};\n"],"sourceRoot":""}